/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CapitalAllocation,
  HTTPValidationError,
  LeverageEvent,
  LeverageFacility,
  LeverageResponse,
  LoanPortfolio,
  LoansResponse,
  ReinvestmentRequest,
  SrcApiRoutersPortfolioLeverageMetrics,
  SrcApiRoutersPortfolioReinvestmentResponse,
  VisualizationResponse,
} from '../models/index';
import {
    CapitalAllocationFromJSON,
    CapitalAllocationToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LeverageEventFromJSON,
    LeverageEventToJSON,
    LeverageFacilityFromJSON,
    LeverageFacilityToJSON,
    LeverageResponseFromJSON,
    LeverageResponseToJSON,
    LoanPortfolioFromJSON,
    LoanPortfolioToJSON,
    LoansResponseFromJSON,
    LoansResponseToJSON,
    ReinvestmentRequestFromJSON,
    ReinvestmentRequestToJSON,
    SrcApiRoutersPortfolioLeverageMetricsFromJSON,
    SrcApiRoutersPortfolioLeverageMetricsToJSON,
    SrcApiRoutersPortfolioReinvestmentResponseFromJSON,
    SrcApiRoutersPortfolioReinvestmentResponseToJSON,
    VisualizationResponseFromJSON,
    VisualizationResponseToJSON,
} from '../models/index';

export interface GetAllocationHistorySimulationsSimulationIdAllocationHistoryGetRequest {
    simulationId: string;
}

export interface GetCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRequest {
    simulationId: string;
}

export interface GetLeverageEventsSimulationsSimulationIdLeverageEventsGetRequest {
    simulationId: string;
    eventType?: string;
    facilityId?: string;
}

export interface GetLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRequest {
    simulationId: string;
}

export interface GetLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRequest {
    simulationId: string;
}

export interface GetLeverageSimulationsSimulationIdLeverageGetRequest {
    simulationId: string;
}

export interface GetLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRequest {
    simulationId: string;
}

export interface GetLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRequest {
    simulationId: string;
}

export interface GetLoansSimulationsSimulationIdLoansGetRequest {
    simulationId: string;
    zone?: string;
    limit?: number;
    offset?: number;
}

export interface GetRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRequest {
    simulationId: string;
    tolerance?: number;
}

export interface GetVisualizationsSimulationsSimulationIdVisualizationsGetRequest {
    simulationId: string;
}

export interface ReinvestSimulationsSimulationIdReinvestPostRequest {
    simulationId: string;
    reinvestmentRequest: ReinvestmentRequest;
}

/**
 * PortfolioApi - interface
 * 
 * @export
 * @interface PortfolioApiInterface
 */
export interface PortfolioApiInterface {
    /**
     * Get allocation history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Allocation history data
     * @summary Get Allocation History
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getAllocationHistorySimulationsSimulationIdAllocationHistoryGetRaw(requestParameters: GetAllocationHistorySimulationsSimulationIdAllocationHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get allocation history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Allocation history data
     * Get Allocation History
     */
    getAllocationHistorySimulationsSimulationIdAllocationHistoryGet(requestParameters: GetAllocationHistorySimulationsSimulationIdAllocationHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Get capital allocation data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Capital allocation data
     * @summary Get Capital Allocation
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRaw(requestParameters: GetCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CapitalAllocation>>;

    /**
     * Get capital allocation data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Capital allocation data
     * Get Capital Allocation
     */
    getCapitalAllocationSimulationsSimulationIdCapitalAllocationGet(requestParameters: GetCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CapitalAllocation>;

    /**
     * Get leverage events for a simulation.  Args:     simulation_id: Simulation ID     event_type: Filter by event type (draw, repayment, interest, fee)     facility_id: Filter by facility ID  Returns:     Leverage events
     * @summary Get Leverage Events
     * @param {string} simulationId 
     * @param {string} [eventType] Filter by event type (draw, repayment, interest, fee)
     * @param {string} [facilityId] Filter by facility ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getLeverageEventsSimulationsSimulationIdLeverageEventsGetRaw(requestParameters: GetLeverageEventsSimulationsSimulationIdLeverageEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LeverageEvent>>>;

    /**
     * Get leverage events for a simulation.  Args:     simulation_id: Simulation ID     event_type: Filter by event type (draw, repayment, interest, fee)     facility_id: Filter by facility ID  Returns:     Leverage events
     * Get Leverage Events
     */
    getLeverageEventsSimulationsSimulationIdLeverageEventsGet(requestParameters: GetLeverageEventsSimulationsSimulationIdLeverageEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LeverageEvent>>;

    /**
     * Get leverage facilities for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage facilities
     * @summary Get Leverage Facilities
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRaw(requestParameters: GetLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LeverageFacility>>>;

    /**
     * Get leverage facilities for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage facilities
     * Get Leverage Facilities
     */
    getLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGet(requestParameters: GetLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LeverageFacility>>;

    /**
     * Get leverage metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage metrics
     * @summary Get Leverage Metrics
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRaw(requestParameters: GetLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersPortfolioLeverageMetrics>>;

    /**
     * Get leverage metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage metrics
     * Get Leverage Metrics
     */
    getLeverageMetricsSimulationsSimulationIdLeverageMetricsGet(requestParameters: GetLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersPortfolioLeverageMetrics>;

    /**
     * Get leverage data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage data
     * @summary Get Leverage
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getLeverageSimulationsSimulationIdLeverageGetRaw(requestParameters: GetLeverageSimulationsSimulationIdLeverageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeverageResponse>>;

    /**
     * Get leverage data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage data
     * Get Leverage
     */
    getLeverageSimulationsSimulationIdLeverageGet(requestParameters: GetLeverageSimulationsSimulationIdLeverageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeverageResponse>;

    /**
     * Get loan portfolio history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio history data
     * @summary Get Loan Portfolio History
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRaw(requestParameters: GetLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get loan portfolio history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio history data
     * Get Loan Portfolio History
     */
    getLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGet(requestParameters: GetLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Get loan portfolio statistics and visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio data
     * @summary Get Loan Portfolio
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRaw(requestParameters: GetLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanPortfolio>>;

    /**
     * Get loan portfolio statistics and visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio data
     * Get Loan Portfolio
     */
    getLoanPortfolioSimulationsSimulationIdLoanPortfolioGet(requestParameters: GetLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanPortfolio>;

    /**
     * Get loans for a simulation.  Args:     simulation_id: Simulation ID     zone: Filter by zone (green, orange, red)     limit: Maximum number of loans to return     offset: Offset for pagination  Returns:     Loans data
     * @summary Get Loans
     * @param {string} simulationId 
     * @param {string} [zone] Filter by zone (green, orange, red)
     * @param {number} [limit] Maximum number of loans to return
     * @param {number} [offset] Offset for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getLoansSimulationsSimulationIdLoansGetRaw(requestParameters: GetLoansSimulationsSimulationIdLoansGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoansResponse>>;

    /**
     * Get loans for a simulation.  Args:     simulation_id: Simulation ID     zone: Filter by zone (green, orange, red)     limit: Maximum number of loans to return     offset: Offset for pagination  Returns:     Loans data
     * Get Loans
     */
    getLoansSimulationsSimulationIdLoansGet(requestParameters: GetLoansSimulationsSimulationIdLoansGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoansResponse>;

    /**
     * Get rebalancing recommendation for a simulation.  Args:     simulation_id: Simulation ID     tolerance: Tolerance for allocation mismatch  Returns:     Rebalancing recommendation
     * @summary Get Rebalancing Recommendation
     * @param {string} simulationId 
     * @param {number} [tolerance] Tolerance for allocation mismatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRaw(requestParameters: GetRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get rebalancing recommendation for a simulation.  Args:     simulation_id: Simulation ID     tolerance: Tolerance for allocation mismatch  Returns:     Rebalancing recommendation
     * Get Rebalancing Recommendation
     */
    getRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGet(requestParameters: GetRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Get visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * @summary Get Visualizations
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    getVisualizationsSimulationsSimulationIdVisualizationsGetRaw(requestParameters: GetVisualizationsSimulationsSimulationIdVisualizationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VisualizationResponse>>;

    /**
     * Get visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Visualizations
     */
    getVisualizationsSimulationsSimulationIdVisualizationsGet(requestParameters: GetVisualizationsSimulationsSimulationIdVisualizationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VisualizationResponse>;

    /**
     * Generate reinvestment loans for a simulation.  Args:     simulation_id: Simulation ID     request: Reinvestment request  Returns:     Generated reinvestment loans
     * @summary Reinvest
     * @param {string} simulationId 
     * @param {ReinvestmentRequest} reinvestmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApiInterface
     */
    reinvestSimulationsSimulationIdReinvestPostRaw(requestParameters: ReinvestSimulationsSimulationIdReinvestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersPortfolioReinvestmentResponse>>;

    /**
     * Generate reinvestment loans for a simulation.  Args:     simulation_id: Simulation ID     request: Reinvestment request  Returns:     Generated reinvestment loans
     * Reinvest
     */
    reinvestSimulationsSimulationIdReinvestPost(requestParameters: ReinvestSimulationsSimulationIdReinvestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersPortfolioReinvestmentResponse>;

}

/**
 * 
 */
export class PortfolioApi extends runtime.BaseAPI implements PortfolioApiInterface {

    /**
     * Get allocation history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Allocation history data
     * Get Allocation History
     */
    async getAllocationHistorySimulationsSimulationIdAllocationHistoryGetRaw(requestParameters: GetAllocationHistorySimulationsSimulationIdAllocationHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getAllocationHistorySimulationsSimulationIdAllocationHistoryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/allocation-history`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get allocation history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Allocation history data
     * Get Allocation History
     */
    async getAllocationHistorySimulationsSimulationIdAllocationHistoryGet(requestParameters: GetAllocationHistorySimulationsSimulationIdAllocationHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getAllocationHistorySimulationsSimulationIdAllocationHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get capital allocation data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Capital allocation data
     * Get Capital Allocation
     */
    async getCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRaw(requestParameters: GetCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CapitalAllocation>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getCapitalAllocationSimulationsSimulationIdCapitalAllocationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/capital-allocation`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CapitalAllocationFromJSON(jsonValue));
    }

    /**
     * Get capital allocation data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Capital allocation data
     * Get Capital Allocation
     */
    async getCapitalAllocationSimulationsSimulationIdCapitalAllocationGet(requestParameters: GetCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CapitalAllocation> {
        const response = await this.getCapitalAllocationSimulationsSimulationIdCapitalAllocationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get leverage events for a simulation.  Args:     simulation_id: Simulation ID     event_type: Filter by event type (draw, repayment, interest, fee)     facility_id: Filter by facility ID  Returns:     Leverage events
     * Get Leverage Events
     */
    async getLeverageEventsSimulationsSimulationIdLeverageEventsGetRaw(requestParameters: GetLeverageEventsSimulationsSimulationIdLeverageEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LeverageEvent>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getLeverageEventsSimulationsSimulationIdLeverageEventsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['eventType'] != null) {
            queryParameters['event_type'] = requestParameters['eventType'];
        }

        if (requestParameters['facilityId'] != null) {
            queryParameters['facility_id'] = requestParameters['facilityId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/leverage/events`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeverageEventFromJSON));
    }

    /**
     * Get leverage events for a simulation.  Args:     simulation_id: Simulation ID     event_type: Filter by event type (draw, repayment, interest, fee)     facility_id: Filter by facility ID  Returns:     Leverage events
     * Get Leverage Events
     */
    async getLeverageEventsSimulationsSimulationIdLeverageEventsGet(requestParameters: GetLeverageEventsSimulationsSimulationIdLeverageEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LeverageEvent>> {
        const response = await this.getLeverageEventsSimulationsSimulationIdLeverageEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get leverage facilities for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage facilities
     * Get Leverage Facilities
     */
    async getLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRaw(requestParameters: GetLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LeverageFacility>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/leverage/facilities`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeverageFacilityFromJSON));
    }

    /**
     * Get leverage facilities for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage facilities
     * Get Leverage Facilities
     */
    async getLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGet(requestParameters: GetLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LeverageFacility>> {
        const response = await this.getLeverageFacilitiesSimulationsSimulationIdLeverageFacilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get leverage metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage metrics
     * Get Leverage Metrics
     */
    async getLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRaw(requestParameters: GetLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersPortfolioLeverageMetrics>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getLeverageMetricsSimulationsSimulationIdLeverageMetricsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/leverage/metrics`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SrcApiRoutersPortfolioLeverageMetricsFromJSON(jsonValue));
    }

    /**
     * Get leverage metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage metrics
     * Get Leverage Metrics
     */
    async getLeverageMetricsSimulationsSimulationIdLeverageMetricsGet(requestParameters: GetLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersPortfolioLeverageMetrics> {
        const response = await this.getLeverageMetricsSimulationsSimulationIdLeverageMetricsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get leverage data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage data
     * Get Leverage
     */
    async getLeverageSimulationsSimulationIdLeverageGetRaw(requestParameters: GetLeverageSimulationsSimulationIdLeverageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeverageResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getLeverageSimulationsSimulationIdLeverageGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/leverage`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeverageResponseFromJSON(jsonValue));
    }

    /**
     * Get leverage data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Leverage data
     * Get Leverage
     */
    async getLeverageSimulationsSimulationIdLeverageGet(requestParameters: GetLeverageSimulationsSimulationIdLeverageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeverageResponse> {
        const response = await this.getLeverageSimulationsSimulationIdLeverageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get loan portfolio history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio history data
     * Get Loan Portfolio History
     */
    async getLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRaw(requestParameters: GetLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/loan-portfolio-history`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get loan portfolio history for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio history data
     * Get Loan Portfolio History
     */
    async getLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGet(requestParameters: GetLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getLoanPortfolioHistorySimulationsSimulationIdLoanPortfolioHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get loan portfolio statistics and visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio data
     * Get Loan Portfolio
     */
    async getLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRaw(requestParameters: GetLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanPortfolio>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getLoanPortfolioSimulationsSimulationIdLoanPortfolioGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/loan-portfolio`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanPortfolioFromJSON(jsonValue));
    }

    /**
     * Get loan portfolio statistics and visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Loan portfolio data
     * Get Loan Portfolio
     */
    async getLoanPortfolioSimulationsSimulationIdLoanPortfolioGet(requestParameters: GetLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanPortfolio> {
        const response = await this.getLoanPortfolioSimulationsSimulationIdLoanPortfolioGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get loans for a simulation.  Args:     simulation_id: Simulation ID     zone: Filter by zone (green, orange, red)     limit: Maximum number of loans to return     offset: Offset for pagination  Returns:     Loans data
     * Get Loans
     */
    async getLoansSimulationsSimulationIdLoansGetRaw(requestParameters: GetLoansSimulationsSimulationIdLoansGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoansResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getLoansSimulationsSimulationIdLoansGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['zone'] != null) {
            queryParameters['zone'] = requestParameters['zone'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/loans`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoansResponseFromJSON(jsonValue));
    }

    /**
     * Get loans for a simulation.  Args:     simulation_id: Simulation ID     zone: Filter by zone (green, orange, red)     limit: Maximum number of loans to return     offset: Offset for pagination  Returns:     Loans data
     * Get Loans
     */
    async getLoansSimulationsSimulationIdLoansGet(requestParameters: GetLoansSimulationsSimulationIdLoansGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoansResponse> {
        const response = await this.getLoansSimulationsSimulationIdLoansGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rebalancing recommendation for a simulation.  Args:     simulation_id: Simulation ID     tolerance: Tolerance for allocation mismatch  Returns:     Rebalancing recommendation
     * Get Rebalancing Recommendation
     */
    async getRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRaw(requestParameters: GetRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tolerance'] != null) {
            queryParameters['tolerance'] = requestParameters['tolerance'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/rebalancing-recommendation`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get rebalancing recommendation for a simulation.  Args:     simulation_id: Simulation ID     tolerance: Tolerance for allocation mismatch  Returns:     Rebalancing recommendation
     * Get Rebalancing Recommendation
     */
    async getRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGet(requestParameters: GetRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getRebalancingRecommendationSimulationsSimulationIdRebalancingRecommendationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Visualizations
     */
    async getVisualizationsSimulationsSimulationIdVisualizationsGetRaw(requestParameters: GetVisualizationsSimulationsSimulationIdVisualizationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VisualizationResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getVisualizationsSimulationsSimulationIdVisualizationsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/visualizations`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisualizationResponseFromJSON(jsonValue));
    }

    /**
     * Get visualization data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Visualizations
     */
    async getVisualizationsSimulationsSimulationIdVisualizationsGet(requestParameters: GetVisualizationsSimulationsSimulationIdVisualizationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VisualizationResponse> {
        const response = await this.getVisualizationsSimulationsSimulationIdVisualizationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate reinvestment loans for a simulation.  Args:     simulation_id: Simulation ID     request: Reinvestment request  Returns:     Generated reinvestment loans
     * Reinvest
     */
    async reinvestSimulationsSimulationIdReinvestPostRaw(requestParameters: ReinvestSimulationsSimulationIdReinvestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersPortfolioReinvestmentResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling reinvestSimulationsSimulationIdReinvestPost().'
            );
        }

        if (requestParameters['reinvestmentRequest'] == null) {
            throw new runtime.RequiredError(
                'reinvestmentRequest',
                'Required parameter "reinvestmentRequest" was null or undefined when calling reinvestSimulationsSimulationIdReinvestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/reinvest`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReinvestmentRequestToJSON(requestParameters['reinvestmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SrcApiRoutersPortfolioReinvestmentResponseFromJSON(jsonValue));
    }

    /**
     * Generate reinvestment loans for a simulation.  Args:     simulation_id: Simulation ID     request: Reinvestment request  Returns:     Generated reinvestment loans
     * Reinvest
     */
    async reinvestSimulationsSimulationIdReinvestPost(requestParameters: ReinvestSimulationsSimulationIdReinvestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersPortfolioReinvestmentResponse> {
        const response = await this.reinvestSimulationsSimulationIdReinvestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
