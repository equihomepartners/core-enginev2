/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PerformanceReportRequest,
  PerformanceReportSummary,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PerformanceReportRequestFromJSON,
    PerformanceReportRequestToJSON,
    PerformanceReportSummaryFromJSON,
    PerformanceReportSummaryToJSON,
} from '../models/index';

export interface GenerateReportPerformanceGeneratePostRequest {
    performanceReportRequest: PerformanceReportRequest;
    simulationId?: string;
}

export interface GetReportPerformanceSimulationIdGetRequest {
    simulationId: string;
}

export interface GetReportSummaryPerformanceSimulationIdSummaryGetRequest {
    simulationId: string;
}

/**
 * PerformanceApi - interface
 * 
 * @export
 * @interface PerformanceApiInterface
 */
export interface PerformanceApiInterface {
    /**
     * Generates a comprehensive performance report for the simulation
     * @summary Generate performance report
     * @param {PerformanceReportRequest} performanceReportRequest 
     * @param {string} [simulationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceApiInterface
     */
    generateReportPerformanceGeneratePostRaw(requestParameters: GenerateReportPerformanceGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Generates a comprehensive performance report for the simulation
     * Generate performance report
     */
    generateReportPerformanceGeneratePost(requestParameters: GenerateReportPerformanceGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Returns the performance report for the simulation
     * @summary Get performance report
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceApiInterface
     */
    getReportPerformanceSimulationIdGetRaw(requestParameters: GetReportPerformanceSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Returns the performance report for the simulation
     * Get performance report
     */
    getReportPerformanceSimulationIdGet(requestParameters: GetReportPerformanceSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Returns the summary of the performance report for the simulation
     * @summary Get performance report summary
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceApiInterface
     */
    getReportSummaryPerformanceSimulationIdSummaryGetRaw(requestParameters: GetReportSummaryPerformanceSimulationIdSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PerformanceReportSummary>>;

    /**
     * Returns the summary of the performance report for the simulation
     * Get performance report summary
     */
    getReportSummaryPerformanceSimulationIdSummaryGet(requestParameters: GetReportSummaryPerformanceSimulationIdSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PerformanceReportSummary>;

}

/**
 * 
 */
export class PerformanceApi extends runtime.BaseAPI implements PerformanceApiInterface {

    /**
     * Generates a comprehensive performance report for the simulation
     * Generate performance report
     */
    async generateReportPerformanceGeneratePostRaw(requestParameters: GenerateReportPerformanceGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['performanceReportRequest'] == null) {
            throw new runtime.RequiredError(
                'performanceReportRequest',
                'Required parameter "performanceReportRequest" was null or undefined when calling generateReportPerformanceGeneratePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/performance/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PerformanceReportRequestToJSON(requestParameters['performanceReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generates a comprehensive performance report for the simulation
     * Generate performance report
     */
    async generateReportPerformanceGeneratePost(requestParameters: GenerateReportPerformanceGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.generateReportPerformanceGeneratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the performance report for the simulation
     * Get performance report
     */
    async getReportPerformanceSimulationIdGetRaw(requestParameters: GetReportPerformanceSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getReportPerformanceSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/performance/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the performance report for the simulation
     * Get performance report
     */
    async getReportPerformanceSimulationIdGet(requestParameters: GetReportPerformanceSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getReportPerformanceSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the summary of the performance report for the simulation
     * Get performance report summary
     */
    async getReportSummaryPerformanceSimulationIdSummaryGetRaw(requestParameters: GetReportSummaryPerformanceSimulationIdSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PerformanceReportSummary>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getReportSummaryPerformanceSimulationIdSummaryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/performance/{simulation_id}/summary`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceReportSummaryFromJSON(jsonValue));
    }

    /**
     * Returns the summary of the performance report for the simulation
     * Get performance report summary
     */
    async getReportSummaryPerformanceSimulationIdSummaryGet(requestParameters: GetReportSummaryPerformanceSimulationIdSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PerformanceReportSummary> {
        const response = await this.getReportSummaryPerformanceSimulationIdSummaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
