/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  RiskMetricsRequest,
  RiskVisualization,
  SrcApiRoutersRiskRiskMetricsResponse,
  StressTestRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RiskMetricsRequestFromJSON,
    RiskMetricsRequestToJSON,
    RiskVisualizationFromJSON,
    RiskVisualizationToJSON,
    SrcApiRoutersRiskRiskMetricsResponseFromJSON,
    SrcApiRoutersRiskRiskMetricsResponseToJSON,
    StressTestRequestFromJSON,
    StressTestRequestToJSON,
} from '../models/index';

export interface CalculateRiskMetricsRiskMetricsCalculatePostRequest {
    riskMetricsRequest: RiskMetricsRequest;
    simulationId?: string;
}

export interface GetRiskMetricsRiskMetricsSimulationIdGetRequest {
    simulationId: string;
}

export interface GetRiskVisualizationRiskVisualizationSimulationIdGetRequest {
    simulationId: string;
}

export interface RunStressTestRiskStressTestPostRequest {
    stressTestRequest: StressTestRequest;
    simulationId?: string;
}

/**
 * RiskApi - interface
 * 
 * @export
 * @interface RiskApiInterface
 */
export interface RiskApiInterface {
    /**
     * Calculate risk metrics for a simulation.  This endpoint calculates a comprehensive set of risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc. - **Scenario/Stress Metrics**: Price shock, Rate shock, Default shock  Some metrics require Monte Carlo simulation to calculate accurately. When Monte Carlo is disabled or not available, these metrics will be approximated or marked as \"requires MC\" in the response.  Args:     request: Risk metrics calculation request     context: Simulation context  Returns:     Risk metrics calculation response with all categories of metrics
     * @summary Calculate Risk Metrics
     * @param {RiskMetricsRequest} riskMetricsRequest 
     * @param {string} [simulationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskApiInterface
     */
    calculateRiskMetricsRiskMetricsCalculatePostRaw(requestParameters: CalculateRiskMetricsRiskMetricsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersRiskRiskMetricsResponse>>;

    /**
     * Calculate risk metrics for a simulation.  This endpoint calculates a comprehensive set of risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc. - **Scenario/Stress Metrics**: Price shock, Rate shock, Default shock  Some metrics require Monte Carlo simulation to calculate accurately. When Monte Carlo is disabled or not available, these metrics will be approximated or marked as \"requires MC\" in the response.  Args:     request: Risk metrics calculation request     context: Simulation context  Returns:     Risk metrics calculation response with all categories of metrics
     * Calculate Risk Metrics
     */
    calculateRiskMetricsRiskMetricsCalculatePost(requestParameters: CalculateRiskMetricsRiskMetricsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersRiskRiskMetricsResponse>;

    /**
     * Get risk metrics for a simulation.  This endpoint retrieves previously calculated risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc.  Some metrics may be marked as \"requires MC\" if Monte Carlo simulation was not enabled for this simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Risk metrics response with all categories of metrics
     * @summary Get Risk Metrics
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskApiInterface
     */
    getRiskMetricsRiskMetricsSimulationIdGetRaw(requestParameters: GetRiskMetricsRiskMetricsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersRiskRiskMetricsResponse>>;

    /**
     * Get risk metrics for a simulation.  This endpoint retrieves previously calculated risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc.  Some metrics may be marked as \"requires MC\" if Monte Carlo simulation was not enabled for this simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Risk metrics response with all categories of metrics
     * Get Risk Metrics
     */
    getRiskMetricsRiskMetricsSimulationIdGet(requestParameters: GetRiskMetricsRiskMetricsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersRiskRiskMetricsResponse>;

    /**
     * Get risk visualization data for a simulation.  This endpoint retrieves risk visualization data for a simulation, including:  - **Risk-Return Scatter Plot**: Shows the relationship between risk and return for different scenarios - **VaR Histogram**: Shows the distribution of returns with VaR thresholds - **Drawdown Chart**: Shows the drawdown over time - **Stress Test Comparison**: Shows the impact of stress scenarios on key metrics - **Sensitivity Charts**: Shows how metrics change with parameter variations - **Concentration Chart**: Shows the concentration of exposure by zone, suburb, etc.  The visualization data is designed to be easily consumed by frontend charting libraries. When Monte Carlo simulation is enabled, the visualizations will include distribution information. In deterministic mode, the visualizations will be based on single-path data.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Comprehensive risk visualization data for charts and graphs
     * @summary Get Risk Visualization
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskApiInterface
     */
    getRiskVisualizationRiskVisualizationSimulationIdGetRaw(requestParameters: GetRiskVisualizationRiskVisualizationSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RiskVisualization>>;

    /**
     * Get risk visualization data for a simulation.  This endpoint retrieves risk visualization data for a simulation, including:  - **Risk-Return Scatter Plot**: Shows the relationship between risk and return for different scenarios - **VaR Histogram**: Shows the distribution of returns with VaR thresholds - **Drawdown Chart**: Shows the drawdown over time - **Stress Test Comparison**: Shows the impact of stress scenarios on key metrics - **Sensitivity Charts**: Shows how metrics change with parameter variations - **Concentration Chart**: Shows the concentration of exposure by zone, suburb, etc.  The visualization data is designed to be easily consumed by frontend charting libraries. When Monte Carlo simulation is enabled, the visualizations will include distribution information. In deterministic mode, the visualizations will be based on single-path data.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Comprehensive risk visualization data for charts and graphs
     * Get Risk Visualization
     */
    getRiskVisualizationRiskVisualizationSimulationIdGet(requestParameters: GetRiskVisualizationRiskVisualizationSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RiskVisualization>;

    /**
     * Run stress tests on a simulation.  This endpoint runs stress tests on a simulation, applying shocks to key parameters and recalculating metrics under stress scenarios. The following types of shocks can be applied:  - **Property Value Shock**: Applies a percentage shock to property values (e.g., -10%, -20%, -30%) - **Interest Rate Shock**: Applies a percentage point shock to interest rates (e.g., +1%, +2%, +3%) - **Default Rate Shock**: Applies a multiplier to default rates (e.g., 1.5x, 2x, 3x) - **Liquidity Shock**: Applies a percentage shock to liquidity (e.g., -30%, -50%, -70%)  The stress test results include recalculated metrics for each scenario, allowing comparison between base case and stressed scenarios. This helps identify vulnerabilities and assess the portfolio\'s resilience to adverse market conditions.  Stress tests work in both deterministic and Monte Carlo modes, but provide more detailed distribution impacts when Monte Carlo is enabled.  Args:     request: Stress test request with scenarios to apply     context: Simulation context  Returns:     Risk metrics response with comprehensive stress test results
     * @summary Run Stress Test
     * @param {StressTestRequest} stressTestRequest 
     * @param {string} [simulationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskApiInterface
     */
    runStressTestRiskStressTestPostRaw(requestParameters: RunStressTestRiskStressTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersRiskRiskMetricsResponse>>;

    /**
     * Run stress tests on a simulation.  This endpoint runs stress tests on a simulation, applying shocks to key parameters and recalculating metrics under stress scenarios. The following types of shocks can be applied:  - **Property Value Shock**: Applies a percentage shock to property values (e.g., -10%, -20%, -30%) - **Interest Rate Shock**: Applies a percentage point shock to interest rates (e.g., +1%, +2%, +3%) - **Default Rate Shock**: Applies a multiplier to default rates (e.g., 1.5x, 2x, 3x) - **Liquidity Shock**: Applies a percentage shock to liquidity (e.g., -30%, -50%, -70%)  The stress test results include recalculated metrics for each scenario, allowing comparison between base case and stressed scenarios. This helps identify vulnerabilities and assess the portfolio\'s resilience to adverse market conditions.  Stress tests work in both deterministic and Monte Carlo modes, but provide more detailed distribution impacts when Monte Carlo is enabled.  Args:     request: Stress test request with scenarios to apply     context: Simulation context  Returns:     Risk metrics response with comprehensive stress test results
     * Run Stress Test
     */
    runStressTestRiskStressTestPost(requestParameters: RunStressTestRiskStressTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersRiskRiskMetricsResponse>;

}

/**
 * 
 */
export class RiskApi extends runtime.BaseAPI implements RiskApiInterface {

    /**
     * Calculate risk metrics for a simulation.  This endpoint calculates a comprehensive set of risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc. - **Scenario/Stress Metrics**: Price shock, Rate shock, Default shock  Some metrics require Monte Carlo simulation to calculate accurately. When Monte Carlo is disabled or not available, these metrics will be approximated or marked as \"requires MC\" in the response.  Args:     request: Risk metrics calculation request     context: Simulation context  Returns:     Risk metrics calculation response with all categories of metrics
     * Calculate Risk Metrics
     */
    async calculateRiskMetricsRiskMetricsCalculatePostRaw(requestParameters: CalculateRiskMetricsRiskMetricsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersRiskRiskMetricsResponse>> {
        if (requestParameters['riskMetricsRequest'] == null) {
            throw new runtime.RequiredError(
                'riskMetricsRequest',
                'Required parameter "riskMetricsRequest" was null or undefined when calling calculateRiskMetricsRiskMetricsCalculatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/risk/metrics/calculate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RiskMetricsRequestToJSON(requestParameters['riskMetricsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SrcApiRoutersRiskRiskMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Calculate risk metrics for a simulation.  This endpoint calculates a comprehensive set of risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc. - **Scenario/Stress Metrics**: Price shock, Rate shock, Default shock  Some metrics require Monte Carlo simulation to calculate accurately. When Monte Carlo is disabled or not available, these metrics will be approximated or marked as \"requires MC\" in the response.  Args:     request: Risk metrics calculation request     context: Simulation context  Returns:     Risk metrics calculation response with all categories of metrics
     * Calculate Risk Metrics
     */
    async calculateRiskMetricsRiskMetricsCalculatePost(requestParameters: CalculateRiskMetricsRiskMetricsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersRiskRiskMetricsResponse> {
        const response = await this.calculateRiskMetricsRiskMetricsCalculatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get risk metrics for a simulation.  This endpoint retrieves previously calculated risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc.  Some metrics may be marked as \"requires MC\" if Monte Carlo simulation was not enabled for this simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Risk metrics response with all categories of metrics
     * Get Risk Metrics
     */
    async getRiskMetricsRiskMetricsSimulationIdGetRaw(requestParameters: GetRiskMetricsRiskMetricsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersRiskRiskMetricsResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getRiskMetricsRiskMetricsSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/risk/metrics/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SrcApiRoutersRiskRiskMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get risk metrics for a simulation.  This endpoint retrieves previously calculated risk metrics for a simulation, organized into the following categories:  - **Market/Price Metrics**: Volatility, Alpha, Beta, VaR, CVaR - **Credit Metrics**: LTV, Stress-LTV, Default probabilities - **Liquidity Metrics**: Liquidity scores, Exit lag, WAL - **Leverage Metrics**: NAV utilisation, Interest coverage - **Concentration Metrics**: Zone exposure, Suburb exposure, Single-loan exposure - **Performance/Return-Risk Metrics**: IRR, Sharpe ratio, Sortino ratio, etc.  Some metrics may be marked as \"requires MC\" if Monte Carlo simulation was not enabled for this simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Risk metrics response with all categories of metrics
     * Get Risk Metrics
     */
    async getRiskMetricsRiskMetricsSimulationIdGet(requestParameters: GetRiskMetricsRiskMetricsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersRiskRiskMetricsResponse> {
        const response = await this.getRiskMetricsRiskMetricsSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get risk visualization data for a simulation.  This endpoint retrieves risk visualization data for a simulation, including:  - **Risk-Return Scatter Plot**: Shows the relationship between risk and return for different scenarios - **VaR Histogram**: Shows the distribution of returns with VaR thresholds - **Drawdown Chart**: Shows the drawdown over time - **Stress Test Comparison**: Shows the impact of stress scenarios on key metrics - **Sensitivity Charts**: Shows how metrics change with parameter variations - **Concentration Chart**: Shows the concentration of exposure by zone, suburb, etc.  The visualization data is designed to be easily consumed by frontend charting libraries. When Monte Carlo simulation is enabled, the visualizations will include distribution information. In deterministic mode, the visualizations will be based on single-path data.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Comprehensive risk visualization data for charts and graphs
     * Get Risk Visualization
     */
    async getRiskVisualizationRiskVisualizationSimulationIdGetRaw(requestParameters: GetRiskVisualizationRiskVisualizationSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RiskVisualization>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getRiskVisualizationRiskVisualizationSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/risk/visualization/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RiskVisualizationFromJSON(jsonValue));
    }

    /**
     * Get risk visualization data for a simulation.  This endpoint retrieves risk visualization data for a simulation, including:  - **Risk-Return Scatter Plot**: Shows the relationship between risk and return for different scenarios - **VaR Histogram**: Shows the distribution of returns with VaR thresholds - **Drawdown Chart**: Shows the drawdown over time - **Stress Test Comparison**: Shows the impact of stress scenarios on key metrics - **Sensitivity Charts**: Shows how metrics change with parameter variations - **Concentration Chart**: Shows the concentration of exposure by zone, suburb, etc.  The visualization data is designed to be easily consumed by frontend charting libraries. When Monte Carlo simulation is enabled, the visualizations will include distribution information. In deterministic mode, the visualizations will be based on single-path data.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Comprehensive risk visualization data for charts and graphs
     * Get Risk Visualization
     */
    async getRiskVisualizationRiskVisualizationSimulationIdGet(requestParameters: GetRiskVisualizationRiskVisualizationSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RiskVisualization> {
        const response = await this.getRiskVisualizationRiskVisualizationSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run stress tests on a simulation.  This endpoint runs stress tests on a simulation, applying shocks to key parameters and recalculating metrics under stress scenarios. The following types of shocks can be applied:  - **Property Value Shock**: Applies a percentage shock to property values (e.g., -10%, -20%, -30%) - **Interest Rate Shock**: Applies a percentage point shock to interest rates (e.g., +1%, +2%, +3%) - **Default Rate Shock**: Applies a multiplier to default rates (e.g., 1.5x, 2x, 3x) - **Liquidity Shock**: Applies a percentage shock to liquidity (e.g., -30%, -50%, -70%)  The stress test results include recalculated metrics for each scenario, allowing comparison between base case and stressed scenarios. This helps identify vulnerabilities and assess the portfolio\'s resilience to adverse market conditions.  Stress tests work in both deterministic and Monte Carlo modes, but provide more detailed distribution impacts when Monte Carlo is enabled.  Args:     request: Stress test request with scenarios to apply     context: Simulation context  Returns:     Risk metrics response with comprehensive stress test results
     * Run Stress Test
     */
    async runStressTestRiskStressTestPostRaw(requestParameters: RunStressTestRiskStressTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersRiskRiskMetricsResponse>> {
        if (requestParameters['stressTestRequest'] == null) {
            throw new runtime.RequiredError(
                'stressTestRequest',
                'Required parameter "stressTestRequest" was null or undefined when calling runStressTestRiskStressTestPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/risk/stress-test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StressTestRequestToJSON(requestParameters['stressTestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SrcApiRoutersRiskRiskMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Run stress tests on a simulation.  This endpoint runs stress tests on a simulation, applying shocks to key parameters and recalculating metrics under stress scenarios. The following types of shocks can be applied:  - **Property Value Shock**: Applies a percentage shock to property values (e.g., -10%, -20%, -30%) - **Interest Rate Shock**: Applies a percentage point shock to interest rates (e.g., +1%, +2%, +3%) - **Default Rate Shock**: Applies a multiplier to default rates (e.g., 1.5x, 2x, 3x) - **Liquidity Shock**: Applies a percentage shock to liquidity (e.g., -30%, -50%, -70%)  The stress test results include recalculated metrics for each scenario, allowing comparison between base case and stressed scenarios. This helps identify vulnerabilities and assess the portfolio\'s resilience to adverse market conditions.  Stress tests work in both deterministic and Monte Carlo modes, but provide more detailed distribution impacts when Monte Carlo is enabled.  Args:     request: Stress test request with scenarios to apply     context: Simulation context  Returns:     Risk metrics response with comprehensive stress test results
     * Run Stress Test
     */
    async runStressTestRiskStressTestPost(requestParameters: RunStressTestRiskStressTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersRiskRiskMetricsResponse> {
        const response = await this.runStressTestRiskStressTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
