/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GuardrailReportModel,
  GuardrailRequest,
  HTTPValidationError,
} from '../models/index';
import {
    GuardrailReportModelFromJSON,
    GuardrailReportModelToJSON,
    GuardrailRequestFromJSON,
    GuardrailRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface EvaluateGuardrailsGuardrailEvaluatePostRequest {
    guardrailRequest: GuardrailRequest;
    simulationId?: string;
}

export interface GetGuardrailReportGuardrailSimulationIdGetRequest {
    simulationId: string;
}

/**
 * GuardrailApi - interface
 * 
 * @export
 * @interface GuardrailApiInterface
 */
export interface GuardrailApiInterface {
    /**
     * Evaluate guardrails for a simulation.  This endpoint evaluates guardrails for a simulation, checking that key risk metrics stay within acceptable bounds. It is non-blocking, meaning that it reports violations but does not stop the simulation.  The guardrails are organized into the following categories:  - **Property/Loan Level**: Stress LTV, loan size, exit month - **Zone Level**: Zone NAV weight, default rate, price volatility - **Portfolio Level**: Suburb concentration, loan concentration, NAV utilization,   interest coverage, liquidity buffer, WAL, VaR, CVaR, IRR P5, hurdle-clear probability - **Model/Process**: Schema version, Monte Carlo paths, seed reproducibility  Args:     request: Guardrail evaluation request     context: Simulation context  Returns:     Guardrail report with breaches
     * @summary Evaluate Guardrails
     * @param {GuardrailRequest} guardrailRequest 
     * @param {string} [simulationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailApiInterface
     */
    evaluateGuardrailsGuardrailEvaluatePostRaw(requestParameters: EvaluateGuardrailsGuardrailEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuardrailReportModel>>;

    /**
     * Evaluate guardrails for a simulation.  This endpoint evaluates guardrails for a simulation, checking that key risk metrics stay within acceptable bounds. It is non-blocking, meaning that it reports violations but does not stop the simulation.  The guardrails are organized into the following categories:  - **Property/Loan Level**: Stress LTV, loan size, exit month - **Zone Level**: Zone NAV weight, default rate, price volatility - **Portfolio Level**: Suburb concentration, loan concentration, NAV utilization,   interest coverage, liquidity buffer, WAL, VaR, CVaR, IRR P5, hurdle-clear probability - **Model/Process**: Schema version, Monte Carlo paths, seed reproducibility  Args:     request: Guardrail evaluation request     context: Simulation context  Returns:     Guardrail report with breaches
     * Evaluate Guardrails
     */
    evaluateGuardrailsGuardrailEvaluatePost(requestParameters: EvaluateGuardrailsGuardrailEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuardrailReportModel>;

    /**
     * Get guardrail report for a simulation.  This endpoint retrieves the guardrail report for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Guardrail report with breaches
     * @summary Get Guardrail Report
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailApiInterface
     */
    getGuardrailReportGuardrailSimulationIdGetRaw(requestParameters: GetGuardrailReportGuardrailSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuardrailReportModel>>;

    /**
     * Get guardrail report for a simulation.  This endpoint retrieves the guardrail report for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Guardrail report with breaches
     * Get Guardrail Report
     */
    getGuardrailReportGuardrailSimulationIdGet(requestParameters: GetGuardrailReportGuardrailSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuardrailReportModel>;

}

/**
 * 
 */
export class GuardrailApi extends runtime.BaseAPI implements GuardrailApiInterface {

    /**
     * Evaluate guardrails for a simulation.  This endpoint evaluates guardrails for a simulation, checking that key risk metrics stay within acceptable bounds. It is non-blocking, meaning that it reports violations but does not stop the simulation.  The guardrails are organized into the following categories:  - **Property/Loan Level**: Stress LTV, loan size, exit month - **Zone Level**: Zone NAV weight, default rate, price volatility - **Portfolio Level**: Suburb concentration, loan concentration, NAV utilization,   interest coverage, liquidity buffer, WAL, VaR, CVaR, IRR P5, hurdle-clear probability - **Model/Process**: Schema version, Monte Carlo paths, seed reproducibility  Args:     request: Guardrail evaluation request     context: Simulation context  Returns:     Guardrail report with breaches
     * Evaluate Guardrails
     */
    async evaluateGuardrailsGuardrailEvaluatePostRaw(requestParameters: EvaluateGuardrailsGuardrailEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuardrailReportModel>> {
        if (requestParameters['guardrailRequest'] == null) {
            throw new runtime.RequiredError(
                'guardrailRequest',
                'Required parameter "guardrailRequest" was null or undefined when calling evaluateGuardrailsGuardrailEvaluatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/guardrail/evaluate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuardrailRequestToJSON(requestParameters['guardrailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuardrailReportModelFromJSON(jsonValue));
    }

    /**
     * Evaluate guardrails for a simulation.  This endpoint evaluates guardrails for a simulation, checking that key risk metrics stay within acceptable bounds. It is non-blocking, meaning that it reports violations but does not stop the simulation.  The guardrails are organized into the following categories:  - **Property/Loan Level**: Stress LTV, loan size, exit month - **Zone Level**: Zone NAV weight, default rate, price volatility - **Portfolio Level**: Suburb concentration, loan concentration, NAV utilization,   interest coverage, liquidity buffer, WAL, VaR, CVaR, IRR P5, hurdle-clear probability - **Model/Process**: Schema version, Monte Carlo paths, seed reproducibility  Args:     request: Guardrail evaluation request     context: Simulation context  Returns:     Guardrail report with breaches
     * Evaluate Guardrails
     */
    async evaluateGuardrailsGuardrailEvaluatePost(requestParameters: EvaluateGuardrailsGuardrailEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuardrailReportModel> {
        const response = await this.evaluateGuardrailsGuardrailEvaluatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get guardrail report for a simulation.  This endpoint retrieves the guardrail report for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Guardrail report with breaches
     * Get Guardrail Report
     */
    async getGuardrailReportGuardrailSimulationIdGetRaw(requestParameters: GetGuardrailReportGuardrailSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuardrailReportModel>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getGuardrailReportGuardrailSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/guardrail/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuardrailReportModelFromJSON(jsonValue));
    }

    /**
     * Get guardrail report for a simulation.  This endpoint retrieves the guardrail report for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Guardrail report with breaches
     * Get Guardrail Report
     */
    async getGuardrailReportGuardrailSimulationIdGet(requestParameters: GetGuardrailReportGuardrailSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuardrailReportModel> {
        const response = await this.getGuardrailReportGuardrailSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
