/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnhancedPricePathScenarioRequest,
  HTTPValidationError,
  PricePathScenarioRequest,
  PricePathStatisticsResponse,
  PricePathVisualizationResponse,
  PropertyValueRequest,
  PropertyValueResponse,
} from '../models/index';
import {
    EnhancedPricePathScenarioRequestFromJSON,
    EnhancedPricePathScenarioRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PricePathScenarioRequestFromJSON,
    PricePathScenarioRequestToJSON,
    PricePathStatisticsResponseFromJSON,
    PricePathStatisticsResponseToJSON,
    PricePathVisualizationResponseFromJSON,
    PricePathVisualizationResponseToJSON,
    PropertyValueRequestFromJSON,
    PropertyValueRequestToJSON,
    PropertyValueResponseFromJSON,
    PropertyValueResponseToJSON,
} from '../models/index';

export interface GetEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRequest {
    simulationId: string;
    propertyValueRequest: PropertyValueRequest;
}

export interface GetPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRequest {
    simulationId: string;
}

export interface GetPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRequest {
    simulationId: string;
}

export interface GetPricePathsApiV1SimulationsSimulationIdPricePathsGetRequest {
    simulationId: string;
}

export interface GetPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRequest {
    simulationId: string;
    propertyValueRequest: PropertyValueRequest;
}

export interface RunEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRequest {
    simulationId: string;
    enhancedPricePathScenarioRequest: EnhancedPricePathScenarioRequest;
}

export interface RunPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRequest {
    simulationId: string;
    pricePathScenarioRequest: PricePathScenarioRequest;
}

/**
 * PricePathApi - interface
 * 
 * @export
 * @interface PricePathApiInterface
 */
export interface PricePathApiInterface {
    /**
     * Calculate the enhanced property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * @summary Get Enhanced Property Value
     * @param {string} simulationId 
     * @param {PropertyValueRequest} propertyValueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricePathApiInterface
     */
    getEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRaw(requestParameters: GetEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyValueResponse>>;

    /**
     * Calculate the enhanced property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * Get Enhanced Property Value
     */
    getEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePost(requestParameters: GetEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyValueResponse>;

    /**
     * Get statistics for price paths.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * @summary Get Price Path Statistics
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricePathApiInterface
     */
    getPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRaw(requestParameters: GetPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricePathStatisticsResponse>>;

    /**
     * Get statistics for price paths.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * Get Price Path Statistics
     */
    getPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGet(requestParameters: GetPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricePathStatisticsResponse>;

    /**
     * Get visualization data for price paths.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * @summary Get Price Path Visualization
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricePathApiInterface
     */
    getPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRaw(requestParameters: GetPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricePathVisualizationResponse>>;

    /**
     * Get visualization data for price paths.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Price Path Visualization
     */
    getPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGet(requestParameters: GetPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricePathVisualizationResponse>;

    /**
     * Get price path data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Price path data
     * @summary Get Price Paths
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricePathApiInterface
     */
    getPricePathsApiV1SimulationsSimulationIdPricePathsGetRaw(requestParameters: GetPricePathsApiV1SimulationsSimulationIdPricePathsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get price path data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Price path data
     * Get Price Paths
     */
    getPricePathsApiV1SimulationsSimulationIdPricePathsGet(requestParameters: GetPricePathsApiV1SimulationsSimulationIdPricePathsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Calculate the property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * @summary Get Property Value
     * @param {string} simulationId 
     * @param {PropertyValueRequest} propertyValueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricePathApiInterface
     */
    getPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRaw(requestParameters: GetPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyValueResponse>>;

    /**
     * Calculate the property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * Get Property Value
     */
    getPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePost(requestParameters: GetPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyValueResponse>;

    /**
     * Run an enhanced price path scenario with custom parameters.  This endpoint uses the enhanced price path simulator that integrates more deeply with the TLS module to generate realistic price paths based on suburb-specific data, economic factors, and Sydney property market cycles.  Args:     simulation_id: Simulation ID     request: Enhanced price path scenario request  Returns:     Enhanced price path scenario results
     * @summary Run Enhanced Price Path Scenario
     * @param {string} simulationId 
     * @param {EnhancedPricePathScenarioRequest} enhancedPricePathScenarioRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricePathApiInterface
     */
    runEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRaw(requestParameters: RunEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Run an enhanced price path scenario with custom parameters.  This endpoint uses the enhanced price path simulator that integrates more deeply with the TLS module to generate realistic price paths based on suburb-specific data, economic factors, and Sydney property market cycles.  Args:     simulation_id: Simulation ID     request: Enhanced price path scenario request  Returns:     Enhanced price path scenario results
     * Run Enhanced Price Path Scenario
     */
    runEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPost(requestParameters: RunEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Run a price path scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Price path scenario request  Returns:     Price path scenario results
     * @summary Run Price Path Scenario
     * @param {string} simulationId 
     * @param {PricePathScenarioRequest} pricePathScenarioRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricePathApiInterface
     */
    runPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRaw(requestParameters: RunPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Run a price path scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Price path scenario request  Returns:     Price path scenario results
     * Run Price Path Scenario
     */
    runPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPost(requestParameters: RunPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class PricePathApi extends runtime.BaseAPI implements PricePathApiInterface {

    /**
     * Calculate the enhanced property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * Get Enhanced Property Value
     */
    async getEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRaw(requestParameters: GetEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyValueResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePost().'
            );
        }

        if (requestParameters['propertyValueRequest'] == null) {
            throw new runtime.RequiredError(
                'propertyValueRequest',
                'Required parameter "propertyValueRequest" was null or undefined when calling getEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/price-paths/enhanced-property-value`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyValueRequestToJSON(requestParameters['propertyValueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyValueResponseFromJSON(jsonValue));
    }

    /**
     * Calculate the enhanced property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * Get Enhanced Property Value
     */
    async getEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePost(requestParameters: GetEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyValueResponse> {
        const response = await this.getEnhancedPropertyValueApiV1SimulationsSimulationIdPricePathsEnhancedPropertyValuePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get statistics for price paths.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * Get Price Path Statistics
     */
    async getPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRaw(requestParameters: GetPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricePathStatisticsResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/price-paths/statistics`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricePathStatisticsResponseFromJSON(jsonValue));
    }

    /**
     * Get statistics for price paths.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * Get Price Path Statistics
     */
    async getPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGet(requestParameters: GetPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricePathStatisticsResponse> {
        const response = await this.getPricePathStatisticsApiV1SimulationsSimulationIdPricePathsStatisticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get visualization data for price paths.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Price Path Visualization
     */
    async getPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRaw(requestParameters: GetPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricePathVisualizationResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/price-paths/visualization`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricePathVisualizationResponseFromJSON(jsonValue));
    }

    /**
     * Get visualization data for price paths.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Price Path Visualization
     */
    async getPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGet(requestParameters: GetPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricePathVisualizationResponse> {
        const response = await this.getPricePathVisualizationApiV1SimulationsSimulationIdPricePathsVisualizationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get price path data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Price path data
     * Get Price Paths
     */
    async getPricePathsApiV1SimulationsSimulationIdPricePathsGetRaw(requestParameters: GetPricePathsApiV1SimulationsSimulationIdPricePathsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getPricePathsApiV1SimulationsSimulationIdPricePathsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/price-paths`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get price path data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Price path data
     * Get Price Paths
     */
    async getPricePathsApiV1SimulationsSimulationIdPricePathsGet(requestParameters: GetPricePathsApiV1SimulationsSimulationIdPricePathsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getPricePathsApiV1SimulationsSimulationIdPricePathsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculate the property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * Get Property Value
     */
    async getPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRaw(requestParameters: GetPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyValueResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePost().'
            );
        }

        if (requestParameters['propertyValueRequest'] == null) {
            throw new runtime.RequiredError(
                'propertyValueRequest',
                'Required parameter "propertyValueRequest" was null or undefined when calling getPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/price-paths/property-value`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyValueRequestToJSON(requestParameters['propertyValueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyValueResponseFromJSON(jsonValue));
    }

    /**
     * Calculate the property value at a specific month.  Args:     simulation_id: Simulation ID     request: Property value request  Returns:     Property value
     * Get Property Value
     */
    async getPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePost(requestParameters: GetPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyValueResponse> {
        const response = await this.getPropertyValueApiV1SimulationsSimulationIdPricePathsPropertyValuePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run an enhanced price path scenario with custom parameters.  This endpoint uses the enhanced price path simulator that integrates more deeply with the TLS module to generate realistic price paths based on suburb-specific data, economic factors, and Sydney property market cycles.  Args:     simulation_id: Simulation ID     request: Enhanced price path scenario request  Returns:     Enhanced price path scenario results
     * Run Enhanced Price Path Scenario
     */
    async runEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRaw(requestParameters: RunEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling runEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPost().'
            );
        }

        if (requestParameters['enhancedPricePathScenarioRequest'] == null) {
            throw new runtime.RequiredError(
                'enhancedPricePathScenarioRequest',
                'Required parameter "enhancedPricePathScenarioRequest" was null or undefined when calling runEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/price-paths/enhanced-scenario`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnhancedPricePathScenarioRequestToJSON(requestParameters['enhancedPricePathScenarioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Run an enhanced price path scenario with custom parameters.  This endpoint uses the enhanced price path simulator that integrates more deeply with the TLS module to generate realistic price paths based on suburb-specific data, economic factors, and Sydney property market cycles.  Args:     simulation_id: Simulation ID     request: Enhanced price path scenario request  Returns:     Enhanced price path scenario results
     * Run Enhanced Price Path Scenario
     */
    async runEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPost(requestParameters: RunEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.runEnhancedPricePathScenarioApiV1SimulationsSimulationIdPricePathsEnhancedScenarioPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run a price path scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Price path scenario request  Returns:     Price path scenario results
     * Run Price Path Scenario
     */
    async runPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRaw(requestParameters: RunPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling runPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPost().'
            );
        }

        if (requestParameters['pricePathScenarioRequest'] == null) {
            throw new runtime.RequiredError(
                'pricePathScenarioRequest',
                'Required parameter "pricePathScenarioRequest" was null or undefined when calling runPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/price-paths/scenario`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricePathScenarioRequestToJSON(requestParameters['pricePathScenarioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Run a price path scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Price path scenario request  Returns:     Price path scenario results
     * Run Price Path Scenario
     */
    async runPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPost(requestParameters: RunPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.runPricePathScenarioApiV1SimulationsSimulationIdPricePathsScenarioPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
