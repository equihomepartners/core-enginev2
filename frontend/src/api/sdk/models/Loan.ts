/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Loan model.
 * @export
 * @interface Loan
 */
export interface Loan {
    /**
     * Loan ID
     * @type {string}
     * @memberof Loan
     */
    loanId: string;
    /**
     * Loan size
     * @type {number}
     * @memberof Loan
     */
    loanSize: number;
    /**
     * Loan-to-value ratio
     * @type {number}
     * @memberof Loan
     */
    ltv: number;
    /**
     * Zone category
     * @type {string}
     * @memberof Loan
     */
    zone: string;
    /**
     * Loan term in years
     * @type {number}
     * @memberof Loan
     */
    term: number;
    /**
     * Interest rate
     * @type {number}
     * @memberof Loan
     */
    interestRate: number;
    /**
     * Origination year
     * @type {number}
     * @memberof Loan
     */
    originationYear: number;
    /**
     * Property value
     * @type {number}
     * @memberof Loan
     */
    propertyValue: number;
    /**
     * Property ID
     * @type {string}
     * @memberof Loan
     */
    propertyId: string;
    /**
     * Suburb ID
     * @type {string}
     * @memberof Loan
     */
    suburbId: string;
    /**
     * Suburb name
     * @type {string}
     * @memberof Loan
     */
    suburbName: string;
    /**
     * Property type
     * @type {string}
     * @memberof Loan
     */
    propertyType?: string;
    /**
     * Number of bedrooms
     * @type {number}
     * @memberof Loan
     */
    bedrooms?: number;
    /**
     * Number of bathrooms
     * @type {number}
     * @memberof Loan
     */
    bathrooms?: number;
    /**
     * Land size
     * @type {number}
     * @memberof Loan
     */
    landSize?: number;
    /**
     * Building size
     * @type {number}
     * @memberof Loan
     */
    buildingSize?: number;
    /**
     * Year built
     * @type {number}
     * @memberof Loan
     */
    yearBuilt?: number;
}

/**
 * Check if a given object implements the Loan interface.
 */
export function instanceOfLoan(value: object): value is Loan {
    if (!('loanId' in value) || value['loanId'] === undefined) return false;
    if (!('loanSize' in value) || value['loanSize'] === undefined) return false;
    if (!('ltv' in value) || value['ltv'] === undefined) return false;
    if (!('zone' in value) || value['zone'] === undefined) return false;
    if (!('term' in value) || value['term'] === undefined) return false;
    if (!('interestRate' in value) || value['interestRate'] === undefined) return false;
    if (!('originationYear' in value) || value['originationYear'] === undefined) return false;
    if (!('propertyValue' in value) || value['propertyValue'] === undefined) return false;
    if (!('propertyId' in value) || value['propertyId'] === undefined) return false;
    if (!('suburbId' in value) || value['suburbId'] === undefined) return false;
    if (!('suburbName' in value) || value['suburbName'] === undefined) return false;
    return true;
}

export function LoanFromJSON(json: any): Loan {
    return LoanFromJSONTyped(json, false);
}

export function LoanFromJSONTyped(json: any, ignoreDiscriminator: boolean): Loan {
    if (json == null) {
        return json;
    }
    return {
        
        'loanId': json['loan_id'],
        'loanSize': json['loan_size'],
        'ltv': json['ltv'],
        'zone': json['zone'],
        'term': json['term'],
        'interestRate': json['interest_rate'],
        'originationYear': json['origination_year'],
        'propertyValue': json['property_value'],
        'propertyId': json['property_id'],
        'suburbId': json['suburb_id'],
        'suburbName': json['suburb_name'],
        'propertyType': json['property_type'] == null ? undefined : json['property_type'],
        'bedrooms': json['bedrooms'] == null ? undefined : json['bedrooms'],
        'bathrooms': json['bathrooms'] == null ? undefined : json['bathrooms'],
        'landSize': json['land_size'] == null ? undefined : json['land_size'],
        'buildingSize': json['building_size'] == null ? undefined : json['building_size'],
        'yearBuilt': json['year_built'] == null ? undefined : json['year_built'],
    };
}

export function LoanToJSON(json: any): Loan {
    return LoanToJSONTyped(json, false);
}

export function LoanToJSONTyped(value?: Loan | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'loan_id': value['loanId'],
        'loan_size': value['loanSize'],
        'ltv': value['ltv'],
        'zone': value['zone'],
        'term': value['term'],
        'interest_rate': value['interestRate'],
        'origination_year': value['originationYear'],
        'property_value': value['propertyValue'],
        'property_id': value['propertyId'],
        'suburb_id': value['suburbId'],
        'suburb_name': value['suburbName'],
        'property_type': value['propertyType'],
        'bedrooms': value['bedrooms'],
        'bathrooms': value['bathrooms'],
        'land_size': value['landSize'],
        'building_size': value['buildingSize'],
        'year_built': value['yearBuilt'],
    };
}

