# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PricePathVisualizationResponse(BaseModel):
    """
    Price path visualization response model.
    """ # noqa: E501
    zone_price_charts: Dict[str, List[Dict[str, Any]]] = Field(description="Price charts by zone")
    zone_comparison_chart: List[Dict[str, Any]] = Field(description="Comparison chart for all zones")
    suburb_price_charts: Dict[str, List[Dict[str, Any]]] = Field(description="Price charts by suburb")
    correlation_heatmap: List[Dict[str, Any]] = Field(description="Correlation heatmap data")
    final_distribution: Dict[str, List[Dict[str, Any]]] = Field(description="Distribution of final property values")
    cycle_position_chart: Optional[List[Dict[str, Any]]] = Field(default=None, description="Property cycle position over time")
    regime_chart: Optional[List[Dict[str, Any]]] = Field(default=None, description="Market regime over time")
    __properties: ClassVar[List[str]] = ["zone_price_charts", "zone_comparison_chart", "suburb_price_charts", "correlation_heatmap", "final_distribution", "cycle_position_chart", "regime_chart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricePathVisualizationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricePathVisualizationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "zone_price_charts": obj.get("zone_price_charts"),
            "zone_comparison_chart": obj.get("zone_comparison_chart"),
            "suburb_price_charts": obj.get("suburb_price_charts"),
            "correlation_heatmap": obj.get("correlation_heatmap"),
            "final_distribution": obj.get("final_distribution"),
            "cycle_position_chart": obj.get("cycle_position_chart"),
            "regime_chart": obj.get("regime_chart")
        })
        return _obj


