# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from equihome_sim_sdk.models.breach_model import BreachModel
from typing import Optional, Set
from typing_extensions import Self

class GuardrailReportModel(BaseModel):
    """
    Guardrail report model.  Attributes:     simulation_id: Simulation ID     worst_level: Worst severity level in the report     breaches: List of breaches
    """ # noqa: E501
    simulation_id: Optional[StrictStr] = Field(default=None, description="Simulation ID")
    worst_level: StrictStr = Field(description="Worst severity level in the report (INFO, WARN, FAIL)")
    breaches: Optional[List[BreachModel]] = Field(default=None, description="List of breaches")
    __properties: ClassVar[List[str]] = ["simulation_id", "worst_level", "breaches"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuardrailReportModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in breaches (list)
        _items = []
        if self.breaches:
            for _item_breaches in self.breaches:
                if _item_breaches:
                    _items.append(_item_breaches.to_dict())
            _dict['breaches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuardrailReportModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulation_id": obj.get("simulation_id"),
            "worst_level": obj.get("worst_level"),
            "breaches": [BreachModel.from_dict(_item) for _item in obj["breaches"]] if obj.get("breaches") is not None else None
        })
        return _obj


