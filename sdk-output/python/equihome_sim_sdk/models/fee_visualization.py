# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from equihome_sim_sdk.models.fee_breakdown_item import FeeBreakdownItem
from equihome_sim_sdk.models.fee_impact_item import FeeImpactItem
from equihome_sim_sdk.models.fees_by_year_item import FeesByYearItem
from typing import Optional, Set
from typing_extensions import Self

class FeeVisualization(BaseModel):
    """
    Fee visualization model.
    """ # noqa: E501
    fee_breakdown_chart: List[FeeBreakdownItem] = Field(description="Fee breakdown chart data")
    fees_by_year_chart: List[FeesByYearItem] = Field(description="Fees by year chart data")
    fee_impact_chart: List[FeeImpactItem] = Field(description="Fee impact chart data")
    fee_table: List[FeesByYearItem] = Field(description="Fee table data")
    __properties: ClassVar[List[str]] = ["fee_breakdown_chart", "fees_by_year_chart", "fee_impact_chart", "fee_table"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeeVisualization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fee_breakdown_chart (list)
        _items = []
        if self.fee_breakdown_chart:
            for _item_fee_breakdown_chart in self.fee_breakdown_chart:
                if _item_fee_breakdown_chart:
                    _items.append(_item_fee_breakdown_chart.to_dict())
            _dict['fee_breakdown_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fees_by_year_chart (list)
        _items = []
        if self.fees_by_year_chart:
            for _item_fees_by_year_chart in self.fees_by_year_chart:
                if _item_fees_by_year_chart:
                    _items.append(_item_fees_by_year_chart.to_dict())
            _dict['fees_by_year_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fee_impact_chart (list)
        _items = []
        if self.fee_impact_chart:
            for _item_fee_impact_chart in self.fee_impact_chart:
                if _item_fee_impact_chart:
                    _items.append(_item_fee_impact_chart.to_dict())
            _dict['fee_impact_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fee_table (list)
        _items = []
        if self.fee_table:
            for _item_fee_table in self.fee_table:
                if _item_fee_table:
                    _items.append(_item_fee_table.to_dict())
            _dict['fee_table'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeeVisualization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fee_breakdown_chart": [FeeBreakdownItem.from_dict(_item) for _item in obj["fee_breakdown_chart"]] if obj.get("fee_breakdown_chart") is not None else None,
            "fees_by_year_chart": [FeesByYearItem.from_dict(_item) for _item in obj["fees_by_year_chart"]] if obj.get("fees_by_year_chart") is not None else None,
            "fee_impact_chart": [FeeImpactItem.from_dict(_item) for _item in obj["fee_impact_chart"]] if obj.get("fee_impact_chart") is not None else None,
            "fee_table": [FeesByYearItem.from_dict(_item) for _item in obj["fee_table"]] if obj.get("fee_table") is not None else None
        })
        return _obj


