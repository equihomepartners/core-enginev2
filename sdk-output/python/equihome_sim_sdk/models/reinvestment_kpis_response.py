# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from equihome_sim_sdk.models.src_api_routers_reinvestment_risk_metrics_response import SrcApiRoutersReinvestmentRiskMetricsResponse
from typing import Optional, Set
from typing_extensions import Self

class ReinvestmentKPIsResponse(BaseModel):
    """
    Reinvestment KPIs response model.
    """ # noqa: E501
    total_reinvested: Union[StrictFloat, StrictInt] = Field(description="Total amount reinvested")
    num_reinvestment_events: StrictInt = Field(description="Number of reinvestment events")
    avg_reinvestment_amount: Union[StrictFloat, StrictInt] = Field(description="Average reinvestment amount")
    reinvestment_ratio: Union[StrictFloat, StrictInt] = Field(description="Ratio of reinvested capital to total exit value")
    avg_time_to_reinvest: Union[StrictFloat, StrictInt] = Field(description="Average time between exit and reinvestment in months")
    reinvestment_roi: Union[StrictFloat, StrictInt] = Field(description="Return on investment for reinvested capital")
    num_reinvestment_loans: StrictInt = Field(description="Number of reinvestment loans")
    reinvestment_portfolio_impact: Union[StrictFloat, StrictInt] = Field(description="Percentage of portfolio from reinvestment")
    risk_metrics: Optional[SrcApiRoutersReinvestmentRiskMetricsResponse] = Field(default=None, description="Risk impact metrics")
    __properties: ClassVar[List[str]] = ["total_reinvested", "num_reinvestment_events", "avg_reinvestment_amount", "reinvestment_ratio", "avg_time_to_reinvest", "reinvestment_roi", "num_reinvestment_loans", "reinvestment_portfolio_impact", "risk_metrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReinvestmentKPIsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of risk_metrics
        if self.risk_metrics:
            _dict['risk_metrics'] = self.risk_metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReinvestmentKPIsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_reinvested": obj.get("total_reinvested"),
            "num_reinvestment_events": obj.get("num_reinvestment_events"),
            "avg_reinvestment_amount": obj.get("avg_reinvestment_amount"),
            "reinvestment_ratio": obj.get("reinvestment_ratio"),
            "avg_time_to_reinvest": obj.get("avg_time_to_reinvest"),
            "reinvestment_roi": obj.get("reinvestment_roi"),
            "num_reinvestment_loans": obj.get("num_reinvestment_loans"),
            "reinvestment_portfolio_impact": obj.get("reinvestment_portfolio_impact"),
            "risk_metrics": SrcApiRoutersReinvestmentRiskMetricsResponse.from_dict(obj["risk_metrics"]) if obj.get("risk_metrics") is not None else None
        })
        return _obj


