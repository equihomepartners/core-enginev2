# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PerformanceReportRequest(BaseModel):
    """
    Performance report request model.  Attributes:     simulation_id: Simulation ID     include_kpi_table: Whether to include KPI table in the report     include_zone_allocation: Whether to include zone allocation in the report     include_cash_flow: Whether to include cash flow in the report     include_risk_metrics: Whether to include risk metrics in the report     include_tranche_performance: Whether to include tranche performance in the report     include_loan_performance: Whether to include loan performance in the report     include_visualization: Whether to include visualization data in the report     export_format: Format to export the report to     export_path: Path to export the report to
    """ # noqa: E501
    simulation_id: StrictStr = Field(description="Simulation ID")
    include_kpi_table: Optional[StrictBool] = Field(default=True, description="Whether to include KPI table in the report")
    include_zone_allocation: Optional[StrictBool] = Field(default=True, description="Whether to include zone allocation in the report")
    include_cash_flow: Optional[StrictBool] = Field(default=True, description="Whether to include cash flow in the report")
    include_risk_metrics: Optional[StrictBool] = Field(default=True, description="Whether to include risk metrics in the report")
    include_tranche_performance: Optional[StrictBool] = Field(default=True, description="Whether to include tranche performance in the report")
    include_loan_performance: Optional[StrictBool] = Field(default=True, description="Whether to include loan performance in the report")
    include_visualization: Optional[StrictBool] = Field(default=True, description="Whether to include visualization data in the report")
    export_format: Optional[StrictStr] = Field(default='json', description="Format to export the report to (json, csv, excel, markdown, html)")
    export_path: Optional[StrictStr] = Field(default='reports', description="Path to export the report to")
    __properties: ClassVar[List[str]] = ["simulation_id", "include_kpi_table", "include_zone_allocation", "include_cash_flow", "include_risk_metrics", "include_tranche_performance", "include_loan_performance", "include_visualization", "export_format", "export_path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformanceReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformanceReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulation_id": obj.get("simulation_id"),
            "include_kpi_table": obj.get("include_kpi_table") if obj.get("include_kpi_table") is not None else True,
            "include_zone_allocation": obj.get("include_zone_allocation") if obj.get("include_zone_allocation") is not None else True,
            "include_cash_flow": obj.get("include_cash_flow") if obj.get("include_cash_flow") is not None else True,
            "include_risk_metrics": obj.get("include_risk_metrics") if obj.get("include_risk_metrics") is not None else True,
            "include_tranche_performance": obj.get("include_tranche_performance") if obj.get("include_tranche_performance") is not None else True,
            "include_loan_performance": obj.get("include_loan_performance") if obj.get("include_loan_performance") is not None else True,
            "include_visualization": obj.get("include_visualization") if obj.get("include_visualization") is not None else True,
            "export_format": obj.get("export_format") if obj.get("export_format") is not None else 'json',
            "export_path": obj.get("export_path") if obj.get("export_path") is not None else 'reports'
        })
        return _obj


