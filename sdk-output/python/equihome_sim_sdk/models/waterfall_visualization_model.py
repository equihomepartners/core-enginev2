# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from equihome_sim_sdk.models.distribution_by_year_model import DistributionByYearModel
from equihome_sim_sdk.models.stakeholder_allocation_model import StakeholderAllocationModel
from equihome_sim_sdk.models.waterfall_chart_model import WaterfallChartModel
from equihome_sim_sdk.models.waterfall_tier_model import WaterfallTierModel
from typing import Optional, Set
from typing_extensions import Self

class WaterfallVisualizationModel(BaseModel):
    """
    Model for waterfall visualization data.
    """ # noqa: E501
    waterfall_chart: List[WaterfallChartModel] = Field(description="Waterfall chart data")
    distribution_by_year_chart: List[DistributionByYearModel] = Field(description="Distribution by year chart data")
    tier_allocation_chart: List[WaterfallTierModel] = Field(description="Tier allocation chart data")
    stakeholder_allocation_chart: List[StakeholderAllocationModel] = Field(description="Stakeholder allocation chart data")
    __properties: ClassVar[List[str]] = ["waterfall_chart", "distribution_by_year_chart", "tier_allocation_chart", "stakeholder_allocation_chart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WaterfallVisualizationModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in waterfall_chart (list)
        _items = []
        if self.waterfall_chart:
            for _item_waterfall_chart in self.waterfall_chart:
                if _item_waterfall_chart:
                    _items.append(_item_waterfall_chart.to_dict())
            _dict['waterfall_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_by_year_chart (list)
        _items = []
        if self.distribution_by_year_chart:
            for _item_distribution_by_year_chart in self.distribution_by_year_chart:
                if _item_distribution_by_year_chart:
                    _items.append(_item_distribution_by_year_chart.to_dict())
            _dict['distribution_by_year_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tier_allocation_chart (list)
        _items = []
        if self.tier_allocation_chart:
            for _item_tier_allocation_chart in self.tier_allocation_chart:
                if _item_tier_allocation_chart:
                    _items.append(_item_tier_allocation_chart.to_dict())
            _dict['tier_allocation_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stakeholder_allocation_chart (list)
        _items = []
        if self.stakeholder_allocation_chart:
            for _item_stakeholder_allocation_chart in self.stakeholder_allocation_chart:
                if _item_stakeholder_allocation_chart:
                    _items.append(_item_stakeholder_allocation_chart.to_dict())
            _dict['stakeholder_allocation_chart'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WaterfallVisualizationModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "waterfall_chart": [WaterfallChartModel.from_dict(_item) for _item in obj["waterfall_chart"]] if obj.get("waterfall_chart") is not None else None,
            "distribution_by_year_chart": [DistributionByYearModel.from_dict(_item) for _item in obj["distribution_by_year_chart"]] if obj.get("distribution_by_year_chart") is not None else None,
            "tier_allocation_chart": [WaterfallTierModel.from_dict(_item) for _item in obj["tier_allocation_chart"]] if obj.get("tier_allocation_chart") is not None else None,
            "stakeholder_allocation_chart": [StakeholderAllocationModel.from_dict(_item) for _item in obj["stakeholder_allocation_chart"]] if obj.get("stakeholder_allocation_chart") is not None else None
        })
        return _obj


