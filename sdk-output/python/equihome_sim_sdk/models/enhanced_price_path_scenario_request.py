# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EnhancedPricePathScenarioRequest(BaseModel):
    """
    Enhanced price path scenario request model.
    """ # noqa: E501
    model_type: Optional[StrictStr] = Field(default='sydney_cycle', description="Type of stochastic model to use (gbm, mean_reversion, regime_switching, sydney_cycle)")
    appreciation_rates: Dict[str, Union[StrictFloat, StrictInt]] = Field(description="Zone-specific appreciation rates")
    volatility: Dict[str, Union[StrictFloat, StrictInt]] = Field(description="Zone-specific volatility parameters")
    correlation_matrix: Dict[str, Union[StrictFloat, StrictInt]] = Field(description="Correlation matrix between zones")
    time_step: Optional[StrictStr] = Field(default='monthly', description="Time step for price path simulation")
    fund_term: Optional[StrictInt] = Field(default=10, description="Fund term in years")
    cycle_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.5, description="Initial position in the property cycle (0-1)")
    suburb_variation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.02, description="Variation between suburbs within the same zone")
    property_variation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.01, description="Variation between properties within the same suburb")
    mean_reversion_params: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Parameters for mean-reverting model")
    regime_switching_params: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Parameters for regime-switching model")
    __properties: ClassVar[List[str]] = ["model_type", "appreciation_rates", "volatility", "correlation_matrix", "time_step", "fund_term", "cycle_position", "suburb_variation", "property_variation", "mean_reversion_params", "regime_switching_params"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnhancedPricePathScenarioRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnhancedPricePathScenarioRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_type": obj.get("model_type") if obj.get("model_type") is not None else 'sydney_cycle',
            "appreciation_rates": obj.get("appreciation_rates"),
            "volatility": obj.get("volatility"),
            "correlation_matrix": obj.get("correlation_matrix"),
            "time_step": obj.get("time_step") if obj.get("time_step") is not None else 'monthly',
            "fund_term": obj.get("fund_term") if obj.get("fund_term") is not None else 10,
            "cycle_position": obj.get("cycle_position") if obj.get("cycle_position") is not None else 0.5,
            "suburb_variation": obj.get("suburb_variation") if obj.get("suburb_variation") is not None else 0.02,
            "property_variation": obj.get("property_variation") if obj.get("property_variation") is not None else 0.01,
            "mean_reversion_params": obj.get("mean_reversion_params"),
            "regime_switching_params": obj.get("regime_switching_params")
        })
        return _obj


