# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RiskMetricsModel(BaseModel):
    """
    Risk metrics model.
    """ # noqa: E501
    var_95: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value at Risk (95%)")
    var_99: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value at Risk (99%)")
    cvar_95: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Conditional Value at Risk (95%)")
    cvar_99: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Conditional Value at Risk (99%)")
    max_drawdown: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum Drawdown")
    volatility: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Volatility (standard deviation of returns)")
    downside_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downside Deviation")
    tail_risk: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tail Risk")
    tail_probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tail Probability")
    tail_severity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tail Severity")
    __properties: ClassVar[List[str]] = ["var_95", "var_99", "cvar_95", "cvar_99", "max_drawdown", "volatility", "downside_deviation", "tail_risk", "tail_probability", "tail_severity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RiskMetricsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RiskMetricsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "var_95": obj.get("var_95"),
            "var_99": obj.get("var_99"),
            "cvar_95": obj.get("cvar_95"),
            "cvar_99": obj.get("cvar_99"),
            "max_drawdown": obj.get("max_drawdown"),
            "volatility": obj.get("volatility"),
            "downside_deviation": obj.get("downside_deviation"),
            "tail_risk": obj.get("tail_risk"),
            "tail_probability": obj.get("tail_probability"),
            "tail_severity": obj.get("tail_severity")
        })
        return _obj


