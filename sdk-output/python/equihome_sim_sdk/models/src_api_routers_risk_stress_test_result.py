# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SrcApiRoutersRiskStressTestResult(BaseModel):
    """
    Stress test result model.
    """ # noqa: E501
    irr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="IRR under stress scenario")
    equity_multiple: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Equity multiple under stress scenario")
    roi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ROI under stress scenario")
    max_drawdown: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum drawdown under stress scenario")
    var_95: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="VaR (95%) under stress scenario")
    impact_pct: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage impact on base case IRR")
    __properties: ClassVar[List[str]] = ["irr", "equity_multiple", "roi", "max_drawdown", "var_95", "impact_pct"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SrcApiRoutersRiskStressTestResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SrcApiRoutersRiskStressTestResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "irr": obj.get("irr"),
            "equity_multiple": obj.get("equity_multiple"),
            "roi": obj.get("roi"),
            "max_drawdown": obj.get("max_drawdown"),
            "var_95": obj.get("var_95"),
            "impact_pct": obj.get("impact_pct")
        })
        return _obj


