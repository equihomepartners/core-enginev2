# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CoverageTestResponse(BaseModel):
    """
    Coverage test response model.
    """ # noqa: E501
    test_type: StrictStr = Field(description="Test type (e.g., 'overcollateralization', 'interest_coverage')")
    test_date: StrictStr = Field(description="Date of the test")
    year: Union[StrictFloat, StrictInt] = Field(description="Year of the test")
    month: StrictInt = Field(description="Month of the test")
    threshold: Union[StrictFloat, StrictInt] = Field(description="Test threshold")
    actual_value: Union[StrictFloat, StrictInt] = Field(description="Actual value")
    passed: StrictBool = Field(description="Whether the test passed")
    cure_deadline: Optional[StrictStr] = Field(default=None, description="Deadline to cure the test failure (if applicable)")
    cured: Optional[StrictBool] = Field(default=None, description="Whether the test failure was cured (if applicable)")
    __properties: ClassVar[List[str]] = ["test_type", "test_date", "year", "month", "threshold", "actual_value", "passed", "cure_deadline", "cured"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoverageTestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoverageTestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "test_type": obj.get("test_type"),
            "test_date": obj.get("test_date"),
            "year": obj.get("year"),
            "month": obj.get("month"),
            "threshold": obj.get("threshold"),
            "actual_value": obj.get("actual_value"),
            "passed": obj.get("passed"),
            "cure_deadline": obj.get("cure_deadline"),
            "cured": obj.get("cured")
        })
        return _obj


