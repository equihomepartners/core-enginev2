# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReinvestmentEventResponse(BaseModel):
    """
    Reinvestment event response model.
    """ # noqa: E501
    event_id: StrictStr = Field(description="Unique identifier for the reinvestment event")
    timestamp: Union[StrictFloat, StrictInt] = Field(description="Timestamp of the reinvestment event")
    year: Union[StrictFloat, StrictInt] = Field(description="Simulation year of the reinvestment event")
    month: StrictInt = Field(description="Month of the reinvestment event (1-12)")
    amount: Union[StrictFloat, StrictInt] = Field(description="Amount reinvested")
    source: StrictStr = Field(description="Source of the reinvestment capital")
    source_details: Dict[str, Any] = Field(description="Details about the source")
    strategy_used: StrictStr = Field(description="Reinvestment strategy used")
    target_allocations: Dict[str, Union[StrictFloat, StrictInt]] = Field(description="Target zone allocations")
    actual_allocations: Dict[str, Union[StrictFloat, StrictInt]] = Field(description="Actual zone allocations")
    num_loans_generated: StrictInt = Field(description="Number of loans generated")
    loan_ids: List[StrictStr] = Field(description="IDs of loans generated")
    performance_adjustments: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Performance adjustments")
    cash_reserve_before: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cash reserve before reinvestment")
    cash_reserve_after: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cash reserve after reinvestment")
    __properties: ClassVar[List[str]] = ["event_id", "timestamp", "year", "month", "amount", "source", "source_details", "strategy_used", "target_allocations", "actual_allocations", "num_loans_generated", "loan_ids", "performance_adjustments", "cash_reserve_before", "cash_reserve_after"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReinvestmentEventResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReinvestmentEventResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "timestamp": obj.get("timestamp"),
            "year": obj.get("year"),
            "month": obj.get("month"),
            "amount": obj.get("amount"),
            "source": obj.get("source"),
            "source_details": obj.get("source_details"),
            "strategy_used": obj.get("strategy_used"),
            "target_allocations": obj.get("target_allocations"),
            "actual_allocations": obj.get("actual_allocations"),
            "num_loans_generated": obj.get("num_loans_generated"),
            "loan_ids": obj.get("loan_ids"),
            "performance_adjustments": obj.get("performance_adjustments"),
            "cash_reserve_before": obj.get("cash_reserve_before"),
            "cash_reserve_after": obj.get("cash_reserve_after")
        })
        return _obj


