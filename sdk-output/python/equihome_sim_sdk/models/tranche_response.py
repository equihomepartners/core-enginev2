# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TrancheResponse(BaseModel):
    """
    Tranche response model.
    """ # noqa: E501
    name: StrictStr = Field(description="Tranche name")
    type: StrictStr = Field(description="Tranche type")
    size: Union[StrictFloat, StrictInt] = Field(description="Tranche size in dollars")
    priority: StrictInt = Field(description="Payment priority")
    interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Interest rate for debt tranches")
    target_return: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Target return for the tranche")
    actual_return: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Actual return achieved")
    irr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Internal rate of return")
    moic: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Multiple on invested capital")
    total_payments: Union[StrictFloat, StrictInt] = Field(description="Total payments made to the tranche")
    principal_payments: Union[StrictFloat, StrictInt] = Field(description="Principal payments made to the tranche")
    interest_payments: Union[StrictFloat, StrictInt] = Field(description="Interest payments made to the tranche")
    profit_share_payments: Union[StrictFloat, StrictInt] = Field(description="Profit share payments made to the tranche")
    shortfall: Union[StrictFloat, StrictInt] = Field(description="Shortfall amount (if any)")
    status: StrictStr = Field(description="Tranche status (e.g., 'paid', 'defaulted', 'active')")
    __properties: ClassVar[List[str]] = ["name", "type", "size", "priority", "interest_rate", "target_return", "actual_return", "irr", "moic", "total_payments", "principal_payments", "interest_payments", "profit_share_payments", "shortfall", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrancheResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrancheResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "size": obj.get("size"),
            "priority": obj.get("priority"),
            "interest_rate": obj.get("interest_rate"),
            "target_return": obj.get("target_return"),
            "actual_return": obj.get("actual_return"),
            "irr": obj.get("irr"),
            "moic": obj.get("moic"),
            "total_payments": obj.get("total_payments"),
            "principal_payments": obj.get("principal_payments"),
            "interest_payments": obj.get("interest_payments"),
            "profit_share_payments": obj.get("profit_share_payments"),
            "shortfall": obj.get("shortfall"),
            "status": obj.get("status")
        })
        return _obj


