# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FundLevelCashflow(BaseModel):
    """
    Fund-level cashflow model.
    """ # noqa: E501
    year: StrictInt = Field(description="Year")
    month: Optional[StrictInt] = Field(default=None, description="Month (if applicable)")
    quarter: Optional[StrictInt] = Field(default=None, description="Quarter (if applicable)")
    capital_calls: Union[StrictFloat, StrictInt] = Field(description="Capital calls")
    loan_investments: Union[StrictFloat, StrictInt] = Field(description="Loan investments")
    origination_fees: Union[StrictFloat, StrictInt] = Field(description="Origination fees")
    principal_repayments: Union[StrictFloat, StrictInt] = Field(description="Principal repayments")
    interest_income: Union[StrictFloat, StrictInt] = Field(description="Interest income")
    appreciation_share: Union[StrictFloat, StrictInt] = Field(description="Appreciation share")
    management_fees: Union[StrictFloat, StrictInt] = Field(description="Management fees")
    fund_expenses: Union[StrictFloat, StrictInt] = Field(description="Fund expenses")
    leverage_draws: Union[StrictFloat, StrictInt] = Field(description="Leverage draws")
    leverage_repayments: Union[StrictFloat, StrictInt] = Field(description="Leverage repayments")
    leverage_interest: Union[StrictFloat, StrictInt] = Field(description="Leverage interest")
    distributions: Union[StrictFloat, StrictInt] = Field(description="Distributions")
    net_cashflow: Union[StrictFloat, StrictInt] = Field(description="Net cashflow")
    cumulative_cashflow: Union[StrictFloat, StrictInt] = Field(description="Cumulative cashflow")
    __properties: ClassVar[List[str]] = ["year", "month", "quarter", "capital_calls", "loan_investments", "origination_fees", "principal_repayments", "interest_income", "appreciation_share", "management_fees", "fund_expenses", "leverage_draws", "leverage_repayments", "leverage_interest", "distributions", "net_cashflow", "cumulative_cashflow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FundLevelCashflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FundLevelCashflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "year": obj.get("year"),
            "month": obj.get("month"),
            "quarter": obj.get("quarter"),
            "capital_calls": obj.get("capital_calls"),
            "loan_investments": obj.get("loan_investments"),
            "origination_fees": obj.get("origination_fees"),
            "principal_repayments": obj.get("principal_repayments"),
            "interest_income": obj.get("interest_income"),
            "appreciation_share": obj.get("appreciation_share"),
            "management_fees": obj.get("management_fees"),
            "fund_expenses": obj.get("fund_expenses"),
            "leverage_draws": obj.get("leverage_draws"),
            "leverage_repayments": obj.get("leverage_repayments"),
            "leverage_interest": obj.get("leverage_interest"),
            "distributions": obj.get("distributions"),
            "net_cashflow": obj.get("net_cashflow"),
            "cumulative_cashflow": obj.get("cumulative_cashflow")
        })
        return _obj


