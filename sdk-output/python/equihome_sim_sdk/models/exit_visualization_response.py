# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ExitVisualizationResponse(BaseModel):
    """
    Exit visualization response model.
    """ # noqa: E501
    exit_timing_chart: List[Dict[str, Any]] = Field(description="Exit timing distribution chart")
    exit_type_chart: List[Dict[str, Any]] = Field(description="Exit type distribution chart")
    cumulative_exits_chart: List[Dict[str, Any]] = Field(description="Cumulative exits chart")
    exit_roi_chart: List[Dict[str, Any]] = Field(description="Exit ROI distribution chart")
    exit_type_roi_chart: List[Dict[str, Any]] = Field(description="Exit type ROI chart")
    exit_summary: Dict[str, Any] = Field(description="Exit summary")
    exit_value_by_year_chart: List[Dict[str, Any]] = Field(description="Exit value by year chart")
    exit_count_by_year_chart: List[Dict[str, Any]] = Field(description="Exit count by year chart")
    __properties: ClassVar[List[str]] = ["exit_timing_chart", "exit_type_chart", "cumulative_exits_chart", "exit_roi_chart", "exit_type_roi_chart", "exit_summary", "exit_value_by_year_chart", "exit_count_by_year_chart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExitVisualizationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExitVisualizationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exit_timing_chart": obj.get("exit_timing_chart"),
            "exit_type_chart": obj.get("exit_type_chart"),
            "cumulative_exits_chart": obj.get("cumulative_exits_chart"),
            "exit_roi_chart": obj.get("exit_roi_chart"),
            "exit_type_roi_chart": obj.get("exit_type_roi_chart"),
            "exit_summary": obj.get("exit_summary"),
            "exit_value_by_year_chart": obj.get("exit_value_by_year_chart"),
            "exit_count_by_year_chart": obj.get("exit_count_by_year_chart")
        })
        return _obj


