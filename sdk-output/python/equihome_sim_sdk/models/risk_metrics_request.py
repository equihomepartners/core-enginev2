# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RiskMetricsRequest(BaseModel):
    """
    Request model for risk metrics calculation.
    """ # noqa: E501
    simulation_id: StrictStr = Field(description="Simulation ID")
    var_confidence_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence level for Value at Risk (VaR) calculation (0-1)")
    risk_free_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Risk-free rate for risk-adjusted return calculations (0-1)")
    benchmark_return: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Benchmark return for alpha and information ratio calculations (0-1)")
    min_acceptable_return: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum acceptable return for Sortino ratio calculation (0-1)")
    tail_risk_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold for tail risk calculation (0-1)")
    monte_carlo_simulations: Optional[StrictInt] = Field(default=None, description="Number of Monte Carlo simulations for risk metrics")
    enable_sensitivity_analysis: Optional[StrictBool] = Field(default=None, description="Whether to enable sensitivity analysis")
    sensitivity_parameters: Optional[List[StrictStr]] = Field(default=None, description="Parameters to analyze in sensitivity analysis")
    __properties: ClassVar[List[str]] = ["simulation_id", "var_confidence_level", "risk_free_rate", "benchmark_return", "min_acceptable_return", "tail_risk_threshold", "monte_carlo_simulations", "enable_sensitivity_analysis", "sensitivity_parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RiskMetricsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RiskMetricsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulation_id": obj.get("simulation_id"),
            "var_confidence_level": obj.get("var_confidence_level"),
            "risk_free_rate": obj.get("risk_free_rate"),
            "benchmark_return": obj.get("benchmark_return"),
            "min_acceptable_return": obj.get("min_acceptable_return"),
            "tail_risk_threshold": obj.get("tail_risk_threshold"),
            "monte_carlo_simulations": obj.get("monte_carlo_simulations"),
            "enable_sensitivity_analysis": obj.get("enable_sensitivity_analysis"),
            "sensitivity_parameters": obj.get("sensitivity_parameters")
        })
        return _obj


