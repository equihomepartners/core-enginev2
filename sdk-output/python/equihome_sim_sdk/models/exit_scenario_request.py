# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ExitScenarioRequest(BaseModel):
    """
    Exit scenario request model.
    """ # noqa: E501
    base_exit_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.1, description="Base annual exit probability")
    time_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.4, description="Weight for time-based exit probability")
    price_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.6, description="Weight for price-based exit probability")
    min_hold_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.0, description="Minimum holding period in years")
    max_hold_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=10.0, description="Maximum holding period in years")
    sale_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.6, description="Base weight for sale exits")
    refinance_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.3, description="Base weight for refinance exits")
    default_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.1, description="Base weight for default exits")
    appreciation_sale_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=2.0, description="How much appreciation increases sale probability")
    interest_rate_refinance_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=3.0, description="How much interest rate changes affect refinance probability")
    economic_factor_default_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=2.0, description="How much economic factors affect default probability")
    appreciation_share: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.2, description="Fund's share of appreciation")
    min_appreciation_share: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.1, description="Minimum appreciation share")
    max_appreciation_share: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.5, description="Maximum appreciation share")
    tiered_appreciation_thresholds: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Thresholds for tiered appreciation sharing")
    tiered_appreciation_shares: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Shares for tiered appreciation sharing")
    base_default_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.01, description="Base annual default probability")
    recovery_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.8, description="Recovery rate in case of default")
    foreclosure_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.1, description="Cost of foreclosure as percentage of property value")
    foreclosure_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.0, description="Time to complete foreclosure in years")
    __properties: ClassVar[List[str]] = ["base_exit_rate", "time_factor", "price_factor", "min_hold_period", "max_hold_period", "sale_weight", "refinance_weight", "default_weight", "appreciation_sale_multiplier", "interest_rate_refinance_multiplier", "economic_factor_default_multiplier", "appreciation_share", "min_appreciation_share", "max_appreciation_share", "tiered_appreciation_thresholds", "tiered_appreciation_shares", "base_default_rate", "recovery_rate", "foreclosure_cost", "foreclosure_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExitScenarioRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExitScenarioRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_exit_rate": obj.get("base_exit_rate") if obj.get("base_exit_rate") is not None else 0.1,
            "time_factor": obj.get("time_factor") if obj.get("time_factor") is not None else 0.4,
            "price_factor": obj.get("price_factor") if obj.get("price_factor") is not None else 0.6,
            "min_hold_period": obj.get("min_hold_period") if obj.get("min_hold_period") is not None else 1.0,
            "max_hold_period": obj.get("max_hold_period") if obj.get("max_hold_period") is not None else 10.0,
            "sale_weight": obj.get("sale_weight") if obj.get("sale_weight") is not None else 0.6,
            "refinance_weight": obj.get("refinance_weight") if obj.get("refinance_weight") is not None else 0.3,
            "default_weight": obj.get("default_weight") if obj.get("default_weight") is not None else 0.1,
            "appreciation_sale_multiplier": obj.get("appreciation_sale_multiplier") if obj.get("appreciation_sale_multiplier") is not None else 2.0,
            "interest_rate_refinance_multiplier": obj.get("interest_rate_refinance_multiplier") if obj.get("interest_rate_refinance_multiplier") is not None else 3.0,
            "economic_factor_default_multiplier": obj.get("economic_factor_default_multiplier") if obj.get("economic_factor_default_multiplier") is not None else 2.0,
            "appreciation_share": obj.get("appreciation_share") if obj.get("appreciation_share") is not None else 0.2,
            "min_appreciation_share": obj.get("min_appreciation_share") if obj.get("min_appreciation_share") is not None else 0.1,
            "max_appreciation_share": obj.get("max_appreciation_share") if obj.get("max_appreciation_share") is not None else 0.5,
            "tiered_appreciation_thresholds": obj.get("tiered_appreciation_thresholds"),
            "tiered_appreciation_shares": obj.get("tiered_appreciation_shares"),
            "base_default_rate": obj.get("base_default_rate") if obj.get("base_default_rate") is not None else 0.01,
            "recovery_rate": obj.get("recovery_rate") if obj.get("recovery_rate") is not None else 0.8,
            "foreclosure_cost": obj.get("foreclosure_cost") if obj.get("foreclosure_cost") is not None else 0.1,
            "foreclosure_time": obj.get("foreclosure_time") if obj.get("foreclosure_time") is not None else 1.0
        })
        return _obj


