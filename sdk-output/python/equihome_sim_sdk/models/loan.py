# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Loan(BaseModel):
    """
    Loan model.
    """ # noqa: E501
    loan_id: StrictStr = Field(description="Loan ID")
    loan_size: Union[StrictFloat, StrictInt] = Field(description="Loan size")
    ltv: Union[StrictFloat, StrictInt] = Field(description="Loan-to-value ratio")
    zone: StrictStr = Field(description="Zone category")
    term: Union[StrictFloat, StrictInt] = Field(description="Loan term in years")
    interest_rate: Union[StrictFloat, StrictInt] = Field(description="Interest rate")
    origination_year: StrictInt = Field(description="Origination year")
    property_value: Union[StrictFloat, StrictInt] = Field(description="Property value")
    property_id: StrictStr = Field(description="Property ID")
    suburb_id: StrictStr = Field(description="Suburb ID")
    suburb_name: StrictStr = Field(description="Suburb name")
    property_type: Optional[StrictStr] = Field(default=None, description="Property type")
    bedrooms: Optional[StrictInt] = Field(default=None, description="Number of bedrooms")
    bathrooms: Optional[StrictInt] = Field(default=None, description="Number of bathrooms")
    land_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Land size")
    building_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Building size")
    year_built: Optional[StrictInt] = Field(default=None, description="Year built")
    __properties: ClassVar[List[str]] = ["loan_id", "loan_size", "ltv", "zone", "term", "interest_rate", "origination_year", "property_value", "property_id", "suburb_id", "suburb_name", "property_type", "bedrooms", "bathrooms", "land_size", "building_size", "year_built"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Loan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Loan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "loan_id": obj.get("loan_id"),
            "loan_size": obj.get("loan_size"),
            "ltv": obj.get("ltv"),
            "zone": obj.get("zone"),
            "term": obj.get("term"),
            "interest_rate": obj.get("interest_rate"),
            "origination_year": obj.get("origination_year"),
            "property_value": obj.get("property_value"),
            "property_id": obj.get("property_id"),
            "suburb_id": obj.get("suburb_id"),
            "suburb_name": obj.get("suburb_name"),
            "property_type": obj.get("property_type"),
            "bedrooms": obj.get("bedrooms"),
            "bathrooms": obj.get("bathrooms"),
            "land_size": obj.get("land_size"),
            "building_size": obj.get("building_size"),
            "year_built": obj.get("year_built")
        })
        return _obj


