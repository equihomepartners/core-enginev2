# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from equihome_sim_sdk.models.cashflow_by_year_item import CashflowByYearItem
from equihome_sim_sdk.models.cashflow_heatmap_item import CashflowHeatmapItem
from equihome_sim_sdk.models.cashflow_sankey import CashflowSankey
from equihome_sim_sdk.models.cashflow_table_item import CashflowTableItem
from equihome_sim_sdk.models.cashflow_waterfall_item import CashflowWaterfallItem
from equihome_sim_sdk.models.cumulative_cashflow_item import CumulativeCashflowItem
from equihome_sim_sdk.models.scenario_comparison_item import ScenarioComparisonItem
from typing import Optional, Set
from typing_extensions import Self

class CashflowVisualization(BaseModel):
    """
    Cashflow visualization model.
    """ # noqa: E501
    cashflow_waterfall_chart: List[CashflowWaterfallItem] = Field(description="Cashflow waterfall chart data")
    cashflow_by_year_chart: List[CashflowByYearItem] = Field(description="Cashflow by year chart data")
    cumulative_cashflow_chart: List[CumulativeCashflowItem] = Field(description="Cumulative cashflow chart data")
    cashflow_table: List[CashflowTableItem] = Field(description="Cashflow table data")
    cashflow_heatmap: Optional[List[CashflowHeatmapItem]] = Field(default=None, description="Cashflow heatmap data")
    cashflow_sankey: Optional[CashflowSankey] = Field(default=None, description="Cashflow Sankey diagram data")
    scenario_comparison_chart: Optional[List[ScenarioComparisonItem]] = Field(default=None, description="Scenario comparison chart data")
    __properties: ClassVar[List[str]] = ["cashflow_waterfall_chart", "cashflow_by_year_chart", "cumulative_cashflow_chart", "cashflow_table", "cashflow_heatmap", "cashflow_sankey", "scenario_comparison_chart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashflowVisualization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cashflow_waterfall_chart (list)
        _items = []
        if self.cashflow_waterfall_chart:
            for _item_cashflow_waterfall_chart in self.cashflow_waterfall_chart:
                if _item_cashflow_waterfall_chart:
                    _items.append(_item_cashflow_waterfall_chart.to_dict())
            _dict['cashflow_waterfall_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cashflow_by_year_chart (list)
        _items = []
        if self.cashflow_by_year_chart:
            for _item_cashflow_by_year_chart in self.cashflow_by_year_chart:
                if _item_cashflow_by_year_chart:
                    _items.append(_item_cashflow_by_year_chart.to_dict())
            _dict['cashflow_by_year_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cumulative_cashflow_chart (list)
        _items = []
        if self.cumulative_cashflow_chart:
            for _item_cumulative_cashflow_chart in self.cumulative_cashflow_chart:
                if _item_cumulative_cashflow_chart:
                    _items.append(_item_cumulative_cashflow_chart.to_dict())
            _dict['cumulative_cashflow_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cashflow_table (list)
        _items = []
        if self.cashflow_table:
            for _item_cashflow_table in self.cashflow_table:
                if _item_cashflow_table:
                    _items.append(_item_cashflow_table.to_dict())
            _dict['cashflow_table'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cashflow_heatmap (list)
        _items = []
        if self.cashflow_heatmap:
            for _item_cashflow_heatmap in self.cashflow_heatmap:
                if _item_cashflow_heatmap:
                    _items.append(_item_cashflow_heatmap.to_dict())
            _dict['cashflow_heatmap'] = _items
        # override the default output from pydantic by calling `to_dict()` of cashflow_sankey
        if self.cashflow_sankey:
            _dict['cashflow_sankey'] = self.cashflow_sankey.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in scenario_comparison_chart (list)
        _items = []
        if self.scenario_comparison_chart:
            for _item_scenario_comparison_chart in self.scenario_comparison_chart:
                if _item_scenario_comparison_chart:
                    _items.append(_item_scenario_comparison_chart.to_dict())
            _dict['scenario_comparison_chart'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashflowVisualization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cashflow_waterfall_chart": [CashflowWaterfallItem.from_dict(_item) for _item in obj["cashflow_waterfall_chart"]] if obj.get("cashflow_waterfall_chart") is not None else None,
            "cashflow_by_year_chart": [CashflowByYearItem.from_dict(_item) for _item in obj["cashflow_by_year_chart"]] if obj.get("cashflow_by_year_chart") is not None else None,
            "cumulative_cashflow_chart": [CumulativeCashflowItem.from_dict(_item) for _item in obj["cumulative_cashflow_chart"]] if obj.get("cumulative_cashflow_chart") is not None else None,
            "cashflow_table": [CashflowTableItem.from_dict(_item) for _item in obj["cashflow_table"]] if obj.get("cashflow_table") is not None else None,
            "cashflow_heatmap": [CashflowHeatmapItem.from_dict(_item) for _item in obj["cashflow_heatmap"]] if obj.get("cashflow_heatmap") is not None else None,
            "cashflow_sankey": CashflowSankey.from_dict(obj["cashflow_sankey"]) if obj.get("cashflow_sankey") is not None else None,
            "scenario_comparison_chart": [ScenarioComparisonItem.from_dict(_item) for _item in obj["scenario_comparison_chart"]] if obj.get("scenario_comparison_chart") is not None else None
        })
        return _obj


