# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LoanExitRequest(BaseModel):
    """
    Loan exit request model.
    """ # noqa: E501
    loan_id: StrictStr = Field(description="Loan ID")
    property_id: StrictStr = Field(description="Property ID")
    suburb_id: Optional[StrictStr] = Field(default='', description="Suburb ID (optional)")
    zone: StrictStr = Field(description="Zone name")
    loan_amount: Union[StrictFloat, StrictInt] = Field(description="Loan amount")
    property_value: Union[StrictFloat, StrictInt] = Field(description="Initial property value")
    exit_month: StrictInt = Field(description="Exit month (0-based)")
    exit_type: StrictStr = Field(description="Exit type (sale, refinance, default, term_completion)")
    __properties: ClassVar[List[str]] = ["loan_id", "property_id", "suburb_id", "zone", "loan_amount", "property_value", "exit_month", "exit_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanExitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanExitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "loan_id": obj.get("loan_id"),
            "property_id": obj.get("property_id"),
            "suburb_id": obj.get("suburb_id") if obj.get("suburb_id") is not None else '',
            "zone": obj.get("zone"),
            "loan_amount": obj.get("loan_amount"),
            "property_value": obj.get("property_value"),
            "exit_month": obj.get("exit_month"),
            "exit_type": obj.get("exit_type")
        })
        return _obj


