# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from equihome_sim_sdk.models.concentration_point import ConcentrationPoint
from equihome_sim_sdk.models.drawdown_point import DrawdownPoint
from equihome_sim_sdk.models.risk_return_point import RiskReturnPoint
from equihome_sim_sdk.models.sensitivity_chart import SensitivityChart
from equihome_sim_sdk.models.stress_test_comparison_point import StressTestComparisonPoint
from equihome_sim_sdk.models.var_histogram import VarHistogram
from typing import Optional, Set
from typing_extensions import Self

class RiskVisualization(BaseModel):
    """
    Risk visualization model.
    """ # noqa: E501
    risk_return_scatter: List[RiskReturnPoint] = Field(description="Risk-return scatter plot data")
    var_histogram: VarHistogram = Field(description="VaR histogram data")
    drawdown_chart: List[DrawdownPoint] = Field(description="Drawdown chart data")
    stress_test_comparison: List[StressTestComparisonPoint] = Field(description="Stress test comparison chart data")
    sensitivity_charts: Dict[str, List[SensitivityChart]] = Field(description="Sensitivity charts data")
    concentration_chart: List[ConcentrationPoint] = Field(description="Concentration chart data")
    __properties: ClassVar[List[str]] = ["risk_return_scatter", "var_histogram", "drawdown_chart", "stress_test_comparison", "sensitivity_charts", "concentration_chart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RiskVisualization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in risk_return_scatter (list)
        _items = []
        if self.risk_return_scatter:
            for _item_risk_return_scatter in self.risk_return_scatter:
                if _item_risk_return_scatter:
                    _items.append(_item_risk_return_scatter.to_dict())
            _dict['risk_return_scatter'] = _items
        # override the default output from pydantic by calling `to_dict()` of var_histogram
        if self.var_histogram:
            _dict['var_histogram'] = self.var_histogram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in drawdown_chart (list)
        _items = []
        if self.drawdown_chart:
            for _item_drawdown_chart in self.drawdown_chart:
                if _item_drawdown_chart:
                    _items.append(_item_drawdown_chart.to_dict())
            _dict['drawdown_chart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stress_test_comparison (list)
        _items = []
        if self.stress_test_comparison:
            for _item_stress_test_comparison in self.stress_test_comparison:
                if _item_stress_test_comparison:
                    _items.append(_item_stress_test_comparison.to_dict())
            _dict['stress_test_comparison'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in sensitivity_charts (dict of array)
        _field_dict_of_array = {}
        if self.sensitivity_charts:
            for _key_sensitivity_charts in self.sensitivity_charts:
                if self.sensitivity_charts[_key_sensitivity_charts] is not None:
                    _field_dict_of_array[_key_sensitivity_charts] = [
                        _item.to_dict() for _item in self.sensitivity_charts[_key_sensitivity_charts]
                    ]
            _dict['sensitivity_charts'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each item in concentration_chart (list)
        _items = []
        if self.concentration_chart:
            for _item_concentration_chart in self.concentration_chart:
                if _item_concentration_chart:
                    _items.append(_item_concentration_chart.to_dict())
            _dict['concentration_chart'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RiskVisualization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "risk_return_scatter": [RiskReturnPoint.from_dict(_item) for _item in obj["risk_return_scatter"]] if obj.get("risk_return_scatter") is not None else None,
            "var_histogram": VarHistogram.from_dict(obj["var_histogram"]) if obj.get("var_histogram") is not None else None,
            "drawdown_chart": [DrawdownPoint.from_dict(_item) for _item in obj["drawdown_chart"]] if obj.get("drawdown_chart") is not None else None,
            "stress_test_comparison": [StressTestComparisonPoint.from_dict(_item) for _item in obj["stress_test_comparison"]] if obj.get("stress_test_comparison") is not None else None,
            "sensitivity_charts": dict(
                (_k,
                        [SensitivityChart.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("sensitivity_charts", {}).items()
            ),
            "concentration_chart": [ConcentrationPoint.from_dict(_item) for _item in obj["concentration_chart"]] if obj.get("concentration_chart") is not None else None
        })
        return _obj


