# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FeeCalculationRequest(BaseModel):
    """
    Request model for fee calculation.
    """ # noqa: E501
    simulation_id: StrictStr = Field(description="Simulation ID")
    management_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Management fee rate (0-1)")
    management_fee_basis: Optional[StrictStr] = Field(default=None, description="Basis for management fee calculation")
    origination_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Origination fee rate (0-1)")
    annual_fund_expenses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Annual fund expenses as percentage of fund size (0-1)")
    fixed_annual_expenses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fixed annual expenses in dollars")
    expense_growth_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Annual growth rate for expenses (0-1)")
    acquisition_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Acquisition fee rate (0-1)")
    disposition_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Disposition fee rate (0-1)")
    setup_costs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="One-time setup costs in dollars")
    __properties: ClassVar[List[str]] = ["simulation_id", "management_fee_rate", "management_fee_basis", "origination_fee_rate", "annual_fund_expenses", "fixed_annual_expenses", "expense_growth_rate", "acquisition_fee_rate", "disposition_fee_rate", "setup_costs"]

    @field_validator('management_fee_basis')
    def management_fee_basis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['committed_capital', 'invested_capital', 'net_asset_value']):
            raise ValueError("must be one of enum values ('committed_capital', 'invested_capital', 'net_asset_value')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeeCalculationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeeCalculationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulation_id": obj.get("simulation_id"),
            "management_fee_rate": obj.get("management_fee_rate"),
            "management_fee_basis": obj.get("management_fee_basis"),
            "origination_fee_rate": obj.get("origination_fee_rate"),
            "annual_fund_expenses": obj.get("annual_fund_expenses"),
            "fixed_annual_expenses": obj.get("fixed_annual_expenses"),
            "expense_growth_rate": obj.get("expense_growth_rate"),
            "acquisition_fee_rate": obj.get("acquisition_fee_rate"),
            "disposition_fee_rate": obj.get("disposition_fee_rate"),
            "setup_costs": obj.get("setup_costs")
        })
        return _obj


