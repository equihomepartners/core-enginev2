# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from equihome_sim_sdk.models.concentration_metrics import ConcentrationMetrics
from equihome_sim_sdk.models.credit_metrics import CreditMetrics
from equihome_sim_sdk.models.market_metrics import MarketMetrics
from equihome_sim_sdk.models.market_price_metrics import MarketPriceMetrics
from equihome_sim_sdk.models.performance_metrics import PerformanceMetrics
from equihome_sim_sdk.models.return_metrics import ReturnMetrics
from equihome_sim_sdk.models.risk_adjusted_return_metrics import RiskAdjustedReturnMetrics
from equihome_sim_sdk.models.risk_metrics_model import RiskMetricsModel
from equihome_sim_sdk.models.risk_visualization import RiskVisualization
from equihome_sim_sdk.models.sensitivity_result import SensitivityResult
from equihome_sim_sdk.models.src_api_routers_risk_leverage_metrics import SrcApiRoutersRiskLeverageMetrics
from equihome_sim_sdk.models.src_api_routers_risk_liquidity_metrics import SrcApiRoutersRiskLiquidityMetrics
from equihome_sim_sdk.models.src_api_routers_risk_stress_test_result import SrcApiRoutersRiskStressTestResult
from typing import Optional, Set
from typing_extensions import Self

class SrcApiRoutersRiskRiskMetricsResponse(BaseModel):
    """
    Response model for risk metrics calculation.
    """ # noqa: E501
    simulation_id: StrictStr = Field(description="Simulation ID")
    market_price_metrics: MarketPriceMetrics = Field(description="Market/price metrics")
    credit_metrics: CreditMetrics = Field(description="Credit metrics")
    liquidity_metrics: SrcApiRoutersRiskLiquidityMetrics = Field(description="Liquidity metrics")
    leverage_metrics: SrcApiRoutersRiskLeverageMetrics = Field(description="Leverage metrics")
    concentration_metrics: ConcentrationMetrics = Field(description="Concentration metrics")
    performance_metrics: PerformanceMetrics = Field(description="Performance/return-risk metrics")
    return_metrics: ReturnMetrics = Field(description="Return metrics")
    risk_metrics: RiskMetricsModel = Field(description="Risk metrics")
    risk_adjusted_return_metrics: RiskAdjustedReturnMetrics = Field(description="Risk-adjusted return metrics")
    market_metrics: MarketMetrics = Field(description="Market metrics")
    stress_test_results: Dict[str, SrcApiRoutersRiskStressTestResult] = Field(description="Stress test results")
    sensitivity_analysis: Dict[str, List[SensitivityResult]] = Field(description="Sensitivity analysis results")
    visualization: RiskVisualization = Field(description="Visualization data")
    __properties: ClassVar[List[str]] = ["simulation_id", "market_price_metrics", "credit_metrics", "liquidity_metrics", "leverage_metrics", "concentration_metrics", "performance_metrics", "return_metrics", "risk_metrics", "risk_adjusted_return_metrics", "market_metrics", "stress_test_results", "sensitivity_analysis", "visualization"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SrcApiRoutersRiskRiskMetricsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of market_price_metrics
        if self.market_price_metrics:
            _dict['market_price_metrics'] = self.market_price_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_metrics
        if self.credit_metrics:
            _dict['credit_metrics'] = self.credit_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_metrics
        if self.liquidity_metrics:
            _dict['liquidity_metrics'] = self.liquidity_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leverage_metrics
        if self.leverage_metrics:
            _dict['leverage_metrics'] = self.leverage_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of concentration_metrics
        if self.concentration_metrics:
            _dict['concentration_metrics'] = self.concentration_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_metrics
        if self.performance_metrics:
            _dict['performance_metrics'] = self.performance_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_metrics
        if self.return_metrics:
            _dict['return_metrics'] = self.return_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_metrics
        if self.risk_metrics:
            _dict['risk_metrics'] = self.risk_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_adjusted_return_metrics
        if self.risk_adjusted_return_metrics:
            _dict['risk_adjusted_return_metrics'] = self.risk_adjusted_return_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_metrics
        if self.market_metrics:
            _dict['market_metrics'] = self.market_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in stress_test_results (dict)
        _field_dict = {}
        if self.stress_test_results:
            for _key_stress_test_results in self.stress_test_results:
                if self.stress_test_results[_key_stress_test_results]:
                    _field_dict[_key_stress_test_results] = self.stress_test_results[_key_stress_test_results].to_dict()
            _dict['stress_test_results'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in sensitivity_analysis (dict of array)
        _field_dict_of_array = {}
        if self.sensitivity_analysis:
            for _key_sensitivity_analysis in self.sensitivity_analysis:
                if self.sensitivity_analysis[_key_sensitivity_analysis] is not None:
                    _field_dict_of_array[_key_sensitivity_analysis] = [
                        _item.to_dict() for _item in self.sensitivity_analysis[_key_sensitivity_analysis]
                    ]
            _dict['sensitivity_analysis'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of visualization
        if self.visualization:
            _dict['visualization'] = self.visualization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SrcApiRoutersRiskRiskMetricsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulation_id": obj.get("simulation_id"),
            "market_price_metrics": MarketPriceMetrics.from_dict(obj["market_price_metrics"]) if obj.get("market_price_metrics") is not None else None,
            "credit_metrics": CreditMetrics.from_dict(obj["credit_metrics"]) if obj.get("credit_metrics") is not None else None,
            "liquidity_metrics": SrcApiRoutersRiskLiquidityMetrics.from_dict(obj["liquidity_metrics"]) if obj.get("liquidity_metrics") is not None else None,
            "leverage_metrics": SrcApiRoutersRiskLeverageMetrics.from_dict(obj["leverage_metrics"]) if obj.get("leverage_metrics") is not None else None,
            "concentration_metrics": ConcentrationMetrics.from_dict(obj["concentration_metrics"]) if obj.get("concentration_metrics") is not None else None,
            "performance_metrics": PerformanceMetrics.from_dict(obj["performance_metrics"]) if obj.get("performance_metrics") is not None else None,
            "return_metrics": ReturnMetrics.from_dict(obj["return_metrics"]) if obj.get("return_metrics") is not None else None,
            "risk_metrics": RiskMetricsModel.from_dict(obj["risk_metrics"]) if obj.get("risk_metrics") is not None else None,
            "risk_adjusted_return_metrics": RiskAdjustedReturnMetrics.from_dict(obj["risk_adjusted_return_metrics"]) if obj.get("risk_adjusted_return_metrics") is not None else None,
            "market_metrics": MarketMetrics.from_dict(obj["market_metrics"]) if obj.get("market_metrics") is not None else None,
            "stress_test_results": dict(
                (_k, SrcApiRoutersRiskStressTestResult.from_dict(_v))
                for _k, _v in obj["stress_test_results"].items()
            )
            if obj.get("stress_test_results") is not None
            else None,
            "sensitivity_analysis": dict(
                (_k,
                        [SensitivityResult.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("sensitivity_analysis", {}).items()
            ),
            "visualization": RiskVisualization.from_dict(obj["visualization"]) if obj.get("visualization") is not None else None
        })
        return _obj


