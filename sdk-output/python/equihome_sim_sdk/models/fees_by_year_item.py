# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class FeesByYearItem(BaseModel):
    """
    Fees by year item model.
    """ # noqa: E501
    year: StrictInt = Field(description="Year")
    management_fees: Union[StrictFloat, StrictInt] = Field(description="Management fees")
    origination_fees: Union[StrictFloat, StrictInt] = Field(description="Origination fees")
    fund_expenses: Union[StrictFloat, StrictInt] = Field(description="Fund expenses")
    acquisition_fees: Union[StrictFloat, StrictInt] = Field(description="Acquisition fees")
    disposition_fees: Union[StrictFloat, StrictInt] = Field(description="Disposition fees")
    setup_costs: Union[StrictFloat, StrictInt] = Field(description="Setup costs")
    total: Union[StrictFloat, StrictInt] = Field(description="Total fees")
    __properties: ClassVar[List[str]] = ["year", "management_fees", "origination_fees", "fund_expenses", "acquisition_fees", "disposition_fees", "setup_costs", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeesByYearItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeesByYearItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "year": obj.get("year"),
            "management_fees": obj.get("management_fees"),
            "origination_fees": obj.get("origination_fees"),
            "fund_expenses": obj.get("fund_expenses"),
            "acquisition_fees": obj.get("acquisition_fees"),
            "disposition_fees": obj.get("disposition_fees"),
            "setup_costs": obj.get("setup_costs"),
            "total": obj.get("total")
        })
        return _obj


