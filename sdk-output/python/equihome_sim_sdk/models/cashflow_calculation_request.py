# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CashflowCalculationRequest(BaseModel):
    """
    Request model for cashflow calculation.
    """ # noqa: E501
    simulation_id: StrictStr = Field(description="Simulation ID")
    time_granularity: Optional[StrictStr] = Field(default=None, description="Time granularity for cashflow aggregation")
    include_loan_level_cashflows: Optional[StrictBool] = Field(default=None, description="Whether to include loan-level cashflows in the results")
    include_fund_level_cashflows: Optional[StrictBool] = Field(default=None, description="Whether to include fund-level cashflows in the results")
    include_stakeholder_cashflows: Optional[StrictBool] = Field(default=None, description="Whether to include stakeholder-level cashflows in the results")
    simple_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Simple interest rate for loans (0-1)")
    origination_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Origination fee rate (0-1)")
    appreciation_share_method: Optional[StrictStr] = Field(default=None, description="Method for calculating appreciation share")
    distribution_frequency: Optional[StrictStr] = Field(default=None, description="Frequency of distributions to investors")
    distribution_lag: Optional[StrictInt] = Field(default=None, description="Lag in months between cashflow receipt and distribution")
    enable_parallel_processing: Optional[StrictBool] = Field(default=None, description="Whether to enable parallel processing for loan-level cashflow calculations")
    num_workers: Optional[StrictInt] = Field(default=None, description="Number of worker processes for parallel processing")
    enable_scenario_analysis: Optional[StrictBool] = Field(default=None, description="Whether to enable scenario analysis")
    scenarios: Optional[List[Dict[str, Any]]] = Field(default=None, description="Scenarios for scenario analysis")
    enable_sensitivity_analysis: Optional[StrictBool] = Field(default=None, description="Whether to enable sensitivity analysis")
    sensitivity_parameters: Optional[List[Dict[str, Any]]] = Field(default=None, description="Parameters to vary for sensitivity analysis")
    enable_cashflow_metrics: Optional[StrictBool] = Field(default=None, description="Whether to enable cashflow metrics calculation")
    discount_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount rate for DCF calculations (0-1)")
    enable_tax_impact_analysis: Optional[StrictBool] = Field(default=None, description="Whether to enable tax impact analysis")
    tax_rates: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Tax rates for different income types")
    enable_reinvestment_modeling: Optional[StrictBool] = Field(default=None, description="Whether to enable reinvestment modeling")
    reinvestment_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate of return on reinvested cashflows (0-1)")
    enable_liquidity_analysis: Optional[StrictBool] = Field(default=None, description="Whether to enable liquidity analysis")
    minimum_cash_reserve: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum cash reserve as percentage of fund size (0-1)")
    enable_export: Optional[StrictBool] = Field(default=None, description="Whether to enable export capabilities")
    export_formats: Optional[List[StrictStr]] = Field(default=None, description="Export formats")
    __properties: ClassVar[List[str]] = ["simulation_id", "time_granularity", "include_loan_level_cashflows", "include_fund_level_cashflows", "include_stakeholder_cashflows", "simple_interest_rate", "origination_fee_rate", "appreciation_share_method", "distribution_frequency", "distribution_lag", "enable_parallel_processing", "num_workers", "enable_scenario_analysis", "scenarios", "enable_sensitivity_analysis", "sensitivity_parameters", "enable_cashflow_metrics", "discount_rate", "enable_tax_impact_analysis", "tax_rates", "enable_reinvestment_modeling", "reinvestment_rate", "enable_liquidity_analysis", "minimum_cash_reserve", "enable_export", "export_formats"]

    @field_validator('time_granularity')
    def time_granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['daily', 'monthly', 'quarterly', 'yearly']):
            raise ValueError("must be one of enum values ('daily', 'monthly', 'quarterly', 'yearly')")
        return value

    @field_validator('appreciation_share_method')
    def appreciation_share_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pro_rata_ltv', 'tiered', 'fixed']):
            raise ValueError("must be one of enum values ('pro_rata_ltv', 'tiered', 'fixed')")
        return value

    @field_validator('distribution_frequency')
    def distribution_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['monthly', 'quarterly', 'semi_annual', 'annual']):
            raise ValueError("must be one of enum values ('monthly', 'quarterly', 'semi_annual', 'annual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashflowCalculationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashflowCalculationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulation_id": obj.get("simulation_id"),
            "time_granularity": obj.get("time_granularity"),
            "include_loan_level_cashflows": obj.get("include_loan_level_cashflows"),
            "include_fund_level_cashflows": obj.get("include_fund_level_cashflows"),
            "include_stakeholder_cashflows": obj.get("include_stakeholder_cashflows"),
            "simple_interest_rate": obj.get("simple_interest_rate"),
            "origination_fee_rate": obj.get("origination_fee_rate"),
            "appreciation_share_method": obj.get("appreciation_share_method"),
            "distribution_frequency": obj.get("distribution_frequency"),
            "distribution_lag": obj.get("distribution_lag"),
            "enable_parallel_processing": obj.get("enable_parallel_processing"),
            "num_workers": obj.get("num_workers"),
            "enable_scenario_analysis": obj.get("enable_scenario_analysis"),
            "scenarios": obj.get("scenarios"),
            "enable_sensitivity_analysis": obj.get("enable_sensitivity_analysis"),
            "sensitivity_parameters": obj.get("sensitivity_parameters"),
            "enable_cashflow_metrics": obj.get("enable_cashflow_metrics"),
            "discount_rate": obj.get("discount_rate"),
            "enable_tax_impact_analysis": obj.get("enable_tax_impact_analysis"),
            "tax_rates": obj.get("tax_rates"),
            "enable_reinvestment_modeling": obj.get("enable_reinvestment_modeling"),
            "reinvestment_rate": obj.get("reinvestment_rate"),
            "enable_liquidity_analysis": obj.get("enable_liquidity_analysis"),
            "minimum_cash_reserve": obj.get("minimum_cash_reserve"),
            "enable_export": obj.get("enable_export"),
            "export_formats": obj.get("export_formats")
        })
        return _obj


