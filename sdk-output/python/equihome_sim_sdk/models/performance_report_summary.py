# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class PerformanceReportSummary(BaseModel):
    """
    Performance report summary model.  Attributes:     simulation_id: Simulation ID     simulation_date: Simulation date     fund_size: Fund size     fund_term: Fund term     hurdle_rate: Hurdle rate     num_loans: Number of loans     total_loan_amount: Total loan amount     avg_ltv: Average LTV     irr: IRR     moic: MOIC     tvpi: TVPI     dpi: DPI     rvpi: RVPI     var_99: VaR (99%)     sharpe_ratio: Sharpe ratio     worst_guardrail_level: Worst guardrail level
    """ # noqa: E501
    simulation_id: StrictStr = Field(description="Simulation ID")
    simulation_date: StrictStr = Field(description="Simulation date")
    fund_size: Union[StrictFloat, StrictInt] = Field(description="Fund size")
    fund_term: StrictInt = Field(description="Fund term")
    hurdle_rate: Union[StrictFloat, StrictInt] = Field(description="Hurdle rate")
    num_loans: StrictInt = Field(description="Number of loans")
    total_loan_amount: Union[StrictFloat, StrictInt] = Field(description="Total loan amount")
    avg_ltv: Union[StrictFloat, StrictInt] = Field(description="Average LTV")
    irr: Union[StrictFloat, StrictInt] = Field(description="IRR")
    moic: Union[StrictFloat, StrictInt] = Field(description="MOIC")
    tvpi: Union[StrictFloat, StrictInt] = Field(description="TVPI")
    dpi: Union[StrictFloat, StrictInt] = Field(description="DPI")
    rvpi: Union[StrictFloat, StrictInt] = Field(description="RVPI")
    var_99: Union[StrictFloat, StrictInt] = Field(description="VaR (99%)")
    sharpe_ratio: Union[StrictFloat, StrictInt] = Field(description="Sharpe ratio")
    worst_guardrail_level: StrictStr = Field(description="Worst guardrail level")
    __properties: ClassVar[List[str]] = ["simulation_id", "simulation_date", "fund_size", "fund_term", "hurdle_rate", "num_loans", "total_loan_amount", "avg_ltv", "irr", "moic", "tvpi", "dpi", "rvpi", "var_99", "sharpe_ratio", "worst_guardrail_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformanceReportSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformanceReportSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulation_id": obj.get("simulation_id"),
            "simulation_date": obj.get("simulation_date"),
            "fund_size": obj.get("fund_size"),
            "fund_term": obj.get("fund_term"),
            "hurdle_rate": obj.get("hurdle_rate"),
            "num_loans": obj.get("num_loans"),
            "total_loan_amount": obj.get("total_loan_amount"),
            "avg_ltv": obj.get("avg_ltv"),
            "irr": obj.get("irr"),
            "moic": obj.get("moic"),
            "tvpi": obj.get("tvpi"),
            "dpi": obj.get("dpi"),
            "rvpi": obj.get("rvpi"),
            "var_99": obj.get("var_99"),
            "sharpe_ratio": obj.get("sharpe_ratio"),
            "worst_guardrail_level": obj.get("worst_guardrail_level")
        })
        return _obj


