# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class SrcApiRoutersPortfolioLeverageMetrics(BaseModel):
    """
    Leverage metrics model.
    """ # noqa: E501
    total_debt: Union[StrictFloat, StrictInt] = Field(description="Total debt outstanding")
    total_available: Union[StrictFloat, StrictInt] = Field(description="Total available debt capacity")
    total_interest_paid: Union[StrictFloat, StrictInt] = Field(description="Total interest paid")
    total_commitment_fees_paid: Union[StrictFloat, StrictInt] = Field(description="Total commitment fees paid")
    weighted_avg_interest_rate: Union[StrictFloat, StrictInt] = Field(description="Weighted average interest rate")
    leverage_ratio: Union[StrictFloat, StrictInt] = Field(description="Leverage ratio (debt / NAV)")
    debt_service_coverage_ratio: Union[StrictFloat, StrictInt] = Field(description="Debt service coverage ratio")
    interest_coverage_ratio: Union[StrictFloat, StrictInt] = Field(description="Interest coverage ratio")
    loan_to_value_ratio: Union[StrictFloat, StrictInt] = Field(description="Loan-to-value ratio")
    __properties: ClassVar[List[str]] = ["total_debt", "total_available", "total_interest_paid", "total_commitment_fees_paid", "weighted_avg_interest_rate", "leverage_ratio", "debt_service_coverage_ratio", "interest_coverage_ratio", "loan_to_value_ratio"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SrcApiRoutersPortfolioLeverageMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SrcApiRoutersPortfolioLeverageMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_debt": obj.get("total_debt"),
            "total_available": obj.get("total_available"),
            "total_interest_paid": obj.get("total_interest_paid"),
            "total_commitment_fees_paid": obj.get("total_commitment_fees_paid"),
            "weighted_avg_interest_rate": obj.get("weighted_avg_interest_rate"),
            "leverage_ratio": obj.get("leverage_ratio"),
            "debt_service_coverage_ratio": obj.get("debt_service_coverage_ratio"),
            "interest_coverage_ratio": obj.get("interest_coverage_ratio"),
            "loan_to_value_ratio": obj.get("loan_to_value_ratio")
        })
        return _obj


