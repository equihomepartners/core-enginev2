# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ManualReinvestmentRequest(BaseModel):
    """
    Manual reinvestment request model.
    """ # noqa: E501
    amount: Union[StrictFloat, StrictInt] = Field(description="Amount to reinvest")
    year: Union[StrictFloat, StrictInt] = Field(description="Simulation year")
    month: Optional[StrictInt] = Field(default=1, description="Month (1-12)")
    strategy: Optional[StrictStr] = Field(default='rebalance', description="Reinvestment strategy")
    source: Optional[StrictStr] = Field(default='exit', description="Source of the reinvestment capital")
    source_details: Optional[Dict[str, Any]] = Field(default=None, description="Details about the source")
    zone_preference_multipliers: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Zone preference multipliers")
    enable_dynamic_allocation: Optional[StrictBool] = Field(default=False, description="Whether to use dynamic allocation")
    __properties: ClassVar[List[str]] = ["amount", "year", "month", "strategy", "source", "source_details", "zone_preference_multipliers", "enable_dynamic_allocation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManualReinvestmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManualReinvestmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "year": obj.get("year"),
            "month": obj.get("month") if obj.get("month") is not None else 1,
            "strategy": obj.get("strategy") if obj.get("strategy") is not None else 'rebalance',
            "source": obj.get("source") if obj.get("source") is not None else 'exit',
            "source_details": obj.get("source_details"),
            "zone_preference_multipliers": obj.get("zone_preference_multipliers"),
            "enable_dynamic_allocation": obj.get("enable_dynamic_allocation") if obj.get("enable_dynamic_allocation") is not None else False
        })
        return _obj


