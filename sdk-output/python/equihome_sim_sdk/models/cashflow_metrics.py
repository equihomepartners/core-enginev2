# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from equihome_sim_sdk.models.fund_level_metrics import FundLevelMetrics
from equihome_sim_sdk.models.gp_metrics import GPMetrics
from equihome_sim_sdk.models.lp_metrics import LPMetrics
from equihome_sim_sdk.models.metrics_by_year import MetricsByYear
from typing import Optional, Set
from typing_extensions import Self

class CashflowMetrics(BaseModel):
    """
    Cashflow metrics model.
    """ # noqa: E501
    fund_level_metrics: FundLevelMetrics = Field(description="Fund-level metrics")
    lp_metrics: LPMetrics = Field(description="LP metrics")
    gp_metrics: GPMetrics = Field(description="GP metrics")
    metrics_by_year: List[MetricsByYear] = Field(description="Metrics by year")
    __properties: ClassVar[List[str]] = ["fund_level_metrics", "lp_metrics", "gp_metrics", "metrics_by_year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashflowMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fund_level_metrics
        if self.fund_level_metrics:
            _dict['fund_level_metrics'] = self.fund_level_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lp_metrics
        if self.lp_metrics:
            _dict['lp_metrics'] = self.lp_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gp_metrics
        if self.gp_metrics:
            _dict['gp_metrics'] = self.gp_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics_by_year (list)
        _items = []
        if self.metrics_by_year:
            for _item_metrics_by_year in self.metrics_by_year:
                if _item_metrics_by_year:
                    _items.append(_item_metrics_by_year.to_dict())
            _dict['metrics_by_year'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashflowMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fund_level_metrics": FundLevelMetrics.from_dict(obj["fund_level_metrics"]) if obj.get("fund_level_metrics") is not None else None,
            "lp_metrics": LPMetrics.from_dict(obj["lp_metrics"]) if obj.get("lp_metrics") is not None else None,
            "gp_metrics": GPMetrics.from_dict(obj["gp_metrics"]) if obj.get("gp_metrics") is not None else None,
            "metrics_by_year": [MetricsByYear.from_dict(_item) for _item in obj["metrics_by_year"]] if obj.get("metrics_by_year") is not None else None
        })
        return _obj


