# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EnhancedExitScenarioRequest(BaseModel):
    """
    Enhanced exit scenario request model.
    """ # noqa: E501
    base_exit_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.1, description="Base annual exit probability")
    time_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.4, description="Weight for time-based exit probability")
    price_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.6, description="Weight for price-based exit probability")
    min_hold_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.0, description="Minimum holding period in years")
    max_hold_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=10.0, description="Maximum holding period in years")
    sale_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.6, description="Base weight for sale exits")
    refinance_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.3, description="Base weight for refinance exits")
    default_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.1, description="Base weight for default exits")
    appreciation_share: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.2, description="Fund's share of appreciation")
    refinance_interest_rate_sensitivity: Optional[Union[StrictFloat, StrictInt]] = Field(default=2.0, description="How sensitive refinancing is to interest rate changes")
    sale_appreciation_sensitivity: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.5, description="How sensitive sales are to appreciation")
    life_event_probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.05, description="Annual probability of life events triggering exits")
    behavioral_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.3, description="Correlation in exit decisions (herd behavior)")
    recession_default_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=2.5, description="How much recessions increase defaults")
    inflation_refinance_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.8, description="How inflation affects refinancing")
    employment_sensitivity: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.2, description="How employment affects exits")
    migration_sensitivity: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.8, description="How population migration affects exits")
    regulatory_compliance_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.01, description="Compliance cost as percentage of loan")
    tax_efficiency_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Tax efficiency factor (1.0 = fully efficient)")
    vintage_segmentation: Optional[StrictBool] = Field(default=True, description="Whether to segment by vintage")
    ltv_segmentation: Optional[StrictBool] = Field(default=True, description="Whether to segment by LTV")
    zone_segmentation: Optional[StrictBool] = Field(default=True, description="Whether to segment by zone")
    var_confidence_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.95, description="Confidence level for Value-at-Risk")
    stress_test_severity: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.3, description="Severity of stress tests (0-1)")
    tail_risk_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.05, description="Threshold for tail risk events")
    use_ml_models: Optional[StrictBool] = Field(default=True, description="Whether to use machine learning models")
    feature_importance_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.05, description="Threshold for important features")
    anomaly_detection_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=3.0, description="Standard deviations for anomaly detection")
    __properties: ClassVar[List[str]] = ["base_exit_rate", "time_factor", "price_factor", "min_hold_period", "max_hold_period", "sale_weight", "refinance_weight", "default_weight", "appreciation_share", "refinance_interest_rate_sensitivity", "sale_appreciation_sensitivity", "life_event_probability", "behavioral_correlation", "recession_default_multiplier", "inflation_refinance_multiplier", "employment_sensitivity", "migration_sensitivity", "regulatory_compliance_cost", "tax_efficiency_factor", "vintage_segmentation", "ltv_segmentation", "zone_segmentation", "var_confidence_level", "stress_test_severity", "tail_risk_threshold", "use_ml_models", "feature_importance_threshold", "anomaly_detection_threshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnhancedExitScenarioRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnhancedExitScenarioRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_exit_rate": obj.get("base_exit_rate") if obj.get("base_exit_rate") is not None else 0.1,
            "time_factor": obj.get("time_factor") if obj.get("time_factor") is not None else 0.4,
            "price_factor": obj.get("price_factor") if obj.get("price_factor") is not None else 0.6,
            "min_hold_period": obj.get("min_hold_period") if obj.get("min_hold_period") is not None else 1.0,
            "max_hold_period": obj.get("max_hold_period") if obj.get("max_hold_period") is not None else 10.0,
            "sale_weight": obj.get("sale_weight") if obj.get("sale_weight") is not None else 0.6,
            "refinance_weight": obj.get("refinance_weight") if obj.get("refinance_weight") is not None else 0.3,
            "default_weight": obj.get("default_weight") if obj.get("default_weight") is not None else 0.1,
            "appreciation_share": obj.get("appreciation_share") if obj.get("appreciation_share") is not None else 0.2,
            "refinance_interest_rate_sensitivity": obj.get("refinance_interest_rate_sensitivity") if obj.get("refinance_interest_rate_sensitivity") is not None else 2.0,
            "sale_appreciation_sensitivity": obj.get("sale_appreciation_sensitivity") if obj.get("sale_appreciation_sensitivity") is not None else 1.5,
            "life_event_probability": obj.get("life_event_probability") if obj.get("life_event_probability") is not None else 0.05,
            "behavioral_correlation": obj.get("behavioral_correlation") if obj.get("behavioral_correlation") is not None else 0.3,
            "recession_default_multiplier": obj.get("recession_default_multiplier") if obj.get("recession_default_multiplier") is not None else 2.5,
            "inflation_refinance_multiplier": obj.get("inflation_refinance_multiplier") if obj.get("inflation_refinance_multiplier") is not None else 1.8,
            "employment_sensitivity": obj.get("employment_sensitivity") if obj.get("employment_sensitivity") is not None else 1.2,
            "migration_sensitivity": obj.get("migration_sensitivity") if obj.get("migration_sensitivity") is not None else 0.8,
            "regulatory_compliance_cost": obj.get("regulatory_compliance_cost") if obj.get("regulatory_compliance_cost") is not None else 0.01,
            "tax_efficiency_factor": obj.get("tax_efficiency_factor") if obj.get("tax_efficiency_factor") is not None else 0.9,
            "vintage_segmentation": obj.get("vintage_segmentation") if obj.get("vintage_segmentation") is not None else True,
            "ltv_segmentation": obj.get("ltv_segmentation") if obj.get("ltv_segmentation") is not None else True,
            "zone_segmentation": obj.get("zone_segmentation") if obj.get("zone_segmentation") is not None else True,
            "var_confidence_level": obj.get("var_confidence_level") if obj.get("var_confidence_level") is not None else 0.95,
            "stress_test_severity": obj.get("stress_test_severity") if obj.get("stress_test_severity") is not None else 0.3,
            "tail_risk_threshold": obj.get("tail_risk_threshold") if obj.get("tail_risk_threshold") is not None else 0.05,
            "use_ml_models": obj.get("use_ml_models") if obj.get("use_ml_models") is not None else True,
            "feature_importance_threshold": obj.get("feature_importance_threshold") if obj.get("feature_importance_threshold") is not None else 0.05,
            "anomaly_detection_threshold": obj.get("anomaly_detection_threshold") if obj.get("anomaly_detection_threshold") is not None else 3.0
        })
        return _obj


