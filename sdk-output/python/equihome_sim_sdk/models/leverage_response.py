# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from equihome_sim_sdk.models.leverage_facility import LeverageFacility
from equihome_sim_sdk.models.leverage_visualization import LeverageVisualization
from equihome_sim_sdk.models.src_api_routers_portfolio_leverage_metrics import SrcApiRoutersPortfolioLeverageMetrics
from equihome_sim_sdk.models.src_api_routers_portfolio_stress_test_result import SrcApiRoutersPortfolioStressTestResult
from typing import Optional, Set
from typing_extensions import Self

class LeverageResponse(BaseModel):
    """
    Leverage response model.
    """ # noqa: E501
    facilities: List[LeverageFacility] = Field(description="Debt facilities")
    metrics: SrcApiRoutersPortfolioLeverageMetrics = Field(description="Leverage metrics")
    visualization: LeverageVisualization = Field(description="Visualization data")
    stress_test_results: Optional[Dict[str, SrcApiRoutersPortfolioStressTestResult]] = Field(default=None, description="Stress test results")
    __properties: ClassVar[List[str]] = ["facilities", "metrics", "visualization", "stress_test_results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeverageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in facilities (list)
        _items = []
        if self.facilities:
            for _item_facilities in self.facilities:
                if _item_facilities:
                    _items.append(_item_facilities.to_dict())
            _dict['facilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visualization
        if self.visualization:
            _dict['visualization'] = self.visualization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in stress_test_results (dict)
        _field_dict = {}
        if self.stress_test_results:
            for _key_stress_test_results in self.stress_test_results:
                if self.stress_test_results[_key_stress_test_results]:
                    _field_dict[_key_stress_test_results] = self.stress_test_results[_key_stress_test_results].to_dict()
            _dict['stress_test_results'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeverageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "facilities": [LeverageFacility.from_dict(_item) for _item in obj["facilities"]] if obj.get("facilities") is not None else None,
            "metrics": SrcApiRoutersPortfolioLeverageMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "visualization": LeverageVisualization.from_dict(obj["visualization"]) if obj.get("visualization") is not None else None,
            "stress_test_results": dict(
                (_k, SrcApiRoutersPortfolioStressTestResult.from_dict(_v))
                for _k, _v in obj["stress_test_results"].items()
            )
            if obj.get("stress_test_results") is not None
            else None
        })
        return _obj


