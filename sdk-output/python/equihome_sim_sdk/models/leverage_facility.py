# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LeverageFacility(BaseModel):
    """
    Leverage facility model.
    """ # noqa: E501
    facility_id: StrictStr = Field(description="Facility ID")
    facility_type: StrictStr = Field(description="Facility type (nav_line, subscription_line)")
    max_amount: Union[StrictFloat, StrictInt] = Field(description="Maximum facility amount")
    interest_rate: Union[StrictFloat, StrictInt] = Field(description="Annual interest rate (as a decimal)")
    commitment_fee_bps: Union[StrictFloat, StrictInt] = Field(description="Commitment fee on undrawn balance (basis points)")
    term_years: Union[StrictFloat, StrictInt] = Field(description="Term of the facility in years")
    advance_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum advance rate (for NAV lines)")
    current_balance: Union[StrictFloat, StrictInt] = Field(description="Current outstanding balance")
    available_amount: Union[StrictFloat, StrictInt] = Field(description="Available amount to draw")
    inception_date: Optional[StrictStr] = Field(default=None, description="Date when the facility was first drawn")
    maturity_date: Optional[StrictStr] = Field(default=None, description="Date when the facility matures")
    __properties: ClassVar[List[str]] = ["facility_id", "facility_type", "max_amount", "interest_rate", "commitment_fee_bps", "term_years", "advance_rate", "current_balance", "available_amount", "inception_date", "maturity_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeverageFacility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeverageFacility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "facility_id": obj.get("facility_id"),
            "facility_type": obj.get("facility_type"),
            "max_amount": obj.get("max_amount"),
            "interest_rate": obj.get("interest_rate"),
            "commitment_fee_bps": obj.get("commitment_fee_bps"),
            "term_years": obj.get("term_years"),
            "advance_rate": obj.get("advance_rate"),
            "current_balance": obj.get("current_balance"),
            "available_amount": obj.get("available_amount"),
            "inception_date": obj.get("inception_date"),
            "maturity_date": obj.get("maturity_date")
        })
        return _obj


