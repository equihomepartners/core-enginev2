# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class ExitStatisticsResponse(BaseModel):
    """
    Exit statistics response model.
    """ # noqa: E501
    avg_exit_year: Union[StrictFloat, StrictInt] = Field(description="Average exit year")
    avg_roi: Union[StrictFloat, StrictInt] = Field(description="Average ROI")
    avg_annualized_roi: Union[StrictFloat, StrictInt] = Field(description="Average annualized ROI")
    exit_type_distribution: Dict[str, Union[StrictFloat, StrictInt]] = Field(description="Exit type distribution")
    exit_timing_distribution: Dict[str, StrictInt] = Field(description="Exit timing distribution")
    exit_roi_distribution: Dict[str, StrictInt] = Field(description="Exit ROI distribution")
    exit_type_roi: Dict[str, Dict[str, Any]] = Field(description="Exit type ROI")
    exit_value_total: Union[StrictFloat, StrictInt] = Field(description="Total exit value")
    appreciation_share_total: Union[StrictFloat, StrictInt] = Field(description="Total appreciation share")
    total_return: Union[StrictFloat, StrictInt] = Field(description="Total return")
    total_roi: Union[StrictFloat, StrictInt] = Field(description="Total ROI")
    annualized_roi: Union[StrictFloat, StrictInt] = Field(description="Annualized ROI")
    __properties: ClassVar[List[str]] = ["avg_exit_year", "avg_roi", "avg_annualized_roi", "exit_type_distribution", "exit_timing_distribution", "exit_roi_distribution", "exit_type_roi", "exit_value_total", "appreciation_share_total", "total_return", "total_roi", "annualized_roi"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExitStatisticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExitStatisticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avg_exit_year": obj.get("avg_exit_year"),
            "avg_roi": obj.get("avg_roi"),
            "avg_annualized_roi": obj.get("avg_annualized_roi"),
            "exit_type_distribution": obj.get("exit_type_distribution"),
            "exit_timing_distribution": obj.get("exit_timing_distribution"),
            "exit_roi_distribution": obj.get("exit_roi_distribution"),
            "exit_type_roi": obj.get("exit_type_roi"),
            "exit_value_total": obj.get("exit_value_total"),
            "appreciation_share_total": obj.get("appreciation_share_total"),
            "total_return": obj.get("total_return"),
            "total_roi": obj.get("total_roi"),
            "annualized_roi": obj.get("annualized_roi")
        })
        return _obj


