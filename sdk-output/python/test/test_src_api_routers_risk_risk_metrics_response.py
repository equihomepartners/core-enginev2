# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equihome_sim_sdk.models.src_api_routers_risk_risk_metrics_response import SrcApiRoutersRiskRiskMetricsResponse

class TestSrcApiRoutersRiskRiskMetricsResponse(unittest.TestCase):
    """SrcApiRoutersRiskRiskMetricsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SrcApiRoutersRiskRiskMetricsResponse:
        """Test SrcApiRoutersRiskRiskMetricsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SrcApiRoutersRiskRiskMetricsResponse`
        """
        model = SrcApiRoutersRiskRiskMetricsResponse()
        if include_optional:
            return SrcApiRoutersRiskRiskMetricsResponse(
                simulation_id = '',
                market_price_metrics = equihome_sim_sdk.models.market_price_metrics.MarketPriceMetrics(
                    volatility = equihome_sim_sdk.models.volatility.Volatility(), 
                    alpha_idiosyncratic_share = 1.337, 
                    beta = equihome_sim_sdk.models.beta.Beta(), 
                    var = equihome_sim_sdk.models.var.Var(), 
                    cvar = equihome_sim_sdk.models.cvar.Cvar(), ),
                credit_metrics = equihome_sim_sdk.models.credit_metrics.CreditMetrics(
                    current_ltv = equihome_sim_sdk.models.current_ltv.Current Ltv(), 
                    stress_ltv = equihome_sim_sdk.models.stress_ltv.Stress Ltv(), 
                    default_probability = equihome_sim_sdk.models.default_probability.Default Probability(), 
                    portfolio_default_rate = 1.337, ),
                liquidity_metrics = equihome_sim_sdk.models.liquidity_metrics.LiquidityMetrics(
                    liquidity_score = equihome_sim_sdk.models.liquidity_score.Liquidity Score(), 
                    expected_exit_lag = equihome_sim_sdk.models.expected_exit_lag.Expected Exit Lag(), 
                    wal = 1.337, 
                    cfar = equihome_sim_sdk.models.cfar.Cfar(), ),
                leverage_metrics = equihome_sim_sdk.models.leverage_metrics.LeverageMetrics(
                    nav_utilisation = 1.337, 
                    interest_coverage = 1.337, 
                    var_uplift = equihome_sim_sdk.models.var_uplift.Var Uplift(), ),
                concentration_metrics = equihome_sim_sdk.models.concentration_metrics.ConcentrationMetrics(
                    herfindahl_index = 1.337, 
                    zone_concentration = null, 
                    suburb_concentration = null, ),
                performance_metrics = equihome_sim_sdk.models.performance_metrics.PerformanceMetrics(
                    net_irr = 1.337, 
                    sharpe_ratio = 1.337, 
                    sortino_ratio = 1.337, 
                    hurdle_clear_probability = equihome_sim_sdk.models.hurdle_clear_probability.Hurdle Clear Probability(), 
                    calmar_ratio = 1.337, 
                    information_ratio = 1.337, 
                    treynor_ratio = 1.337, 
                    omega_ratio = 1.337, 
                    kappa_ratio = 1.337, 
                    gain_loss_ratio = 1.337, ),
                return_metrics = equihome_sim_sdk.models.return_metrics.ReturnMetrics(
                    irr = 1.337, 
                    equity_multiple = 1.337, 
                    moic = 1.337, 
                    tvpi = 1.337, 
                    dpi = 1.337, 
                    rvpi = 1.337, 
                    roi = 1.337, 
                    payback_period = 1.337, 
                    cash_yield = 1.337, 
                    annualized_return = 1.337, ),
                risk_metrics = equihome_sim_sdk.models.risk_metrics_model.RiskMetricsModel(
                    var_95 = 1.337, 
                    var_99 = 1.337, 
                    cvar_95 = 1.337, 
                    cvar_99 = 1.337, 
                    max_drawdown = 1.337, 
                    volatility = 1.337, 
                    downside_deviation = 1.337, 
                    tail_risk = 1.337, 
                    tail_probability = 1.337, 
                    tail_severity = 1.337, ),
                risk_adjusted_return_metrics = equihome_sim_sdk.models.risk_adjusted_return_metrics.RiskAdjustedReturnMetrics(
                    sharpe_ratio = 1.337, 
                    sortino_ratio = 1.337, 
                    calmar_ratio = 1.337, 
                    information_ratio = 1.337, 
                    treynor_ratio = 1.337, 
                    omega_ratio = 1.337, 
                    kappa_ratio = 1.337, 
                    gain_loss_ratio = 1.337, ),
                market_metrics = equihome_sim_sdk.models.market_metrics.MarketMetrics(
                    beta = 1.337, 
                    alpha = 1.337, 
                    tracking_error = 1.337, 
                    r_squared = 1.337, 
                    upside_capture = 1.337, 
                    downside_capture = 1.337, 
                    upside_potential = 1.337, 
                    downside_risk = 1.337, ),
                stress_test_results = {
                    'key' : equihome_sim_sdk.models.stress_test_result.StressTestResult(
                        irr = 1.337, 
                        equity_multiple = 1.337, 
                        roi = 1.337, 
                        max_drawdown = 1.337, 
                        var_95 = 1.337, 
                        impact_pct = 1.337, )
                    },
                sensitivity_analysis = {
                    'key' : [
                        equihome_sim_sdk.models.sensitivity_result.SensitivityResult(
                            parameter_value = 1.337, 
                            irr = 1.337, 
                            equity_multiple = 1.337, 
                            roi = 1.337, )
                        ]
                    },
                visualization = equihome_sim_sdk.models.risk_visualization.RiskVisualization(
                    risk_return_scatter = [
                        equihome_sim_sdk.models.risk_return_point.RiskReturnPoint(
                            scenario = '', 
                            risk = 1.337, 
                            return = 1.337, )
                        ], 
                    var_histogram = null, 
                    drawdown_chart = [
                        equihome_sim_sdk.models.drawdown_point.DrawdownPoint(
                            year = 56, 
                            month = 56, 
                            drawdown = 1.337, )
                        ], 
                    stress_test_comparison = [
                        equihome_sim_sdk.models.stress_test_comparison_point.StressTestComparisonPoint(
                            scenario = '', 
                            metric = '', 
                            value = 1.337, 
                            base_value = 1.337, 
                            pct_change = 1.337, )
                        ], 
                    sensitivity_charts = {
                        'key' : [
                            equihome_sim_sdk.models.sensitivity_chart.SensitivityChart(
                                parameter = '', 
                                values = [
                                    1.337
                                    ], 
                                metric_values = [
                                    1.337
                                    ], )
                            ]
                        }, 
                    concentration_chart = [
                        equihome_sim_sdk.models.concentration_point.ConcentrationPoint(
                            category = '', 
                            name = '', 
                            value = 1.337, 
                            percentage = 1.337, )
                        ], )
            )
        else:
            return SrcApiRoutersRiskRiskMetricsResponse(
                simulation_id = '',
                market_price_metrics = equihome_sim_sdk.models.market_price_metrics.MarketPriceMetrics(
                    volatility = equihome_sim_sdk.models.volatility.Volatility(), 
                    alpha_idiosyncratic_share = 1.337, 
                    beta = equihome_sim_sdk.models.beta.Beta(), 
                    var = equihome_sim_sdk.models.var.Var(), 
                    cvar = equihome_sim_sdk.models.cvar.Cvar(), ),
                credit_metrics = equihome_sim_sdk.models.credit_metrics.CreditMetrics(
                    current_ltv = equihome_sim_sdk.models.current_ltv.Current Ltv(), 
                    stress_ltv = equihome_sim_sdk.models.stress_ltv.Stress Ltv(), 
                    default_probability = equihome_sim_sdk.models.default_probability.Default Probability(), 
                    portfolio_default_rate = 1.337, ),
                liquidity_metrics = equihome_sim_sdk.models.liquidity_metrics.LiquidityMetrics(
                    liquidity_score = equihome_sim_sdk.models.liquidity_score.Liquidity Score(), 
                    expected_exit_lag = equihome_sim_sdk.models.expected_exit_lag.Expected Exit Lag(), 
                    wal = 1.337, 
                    cfar = equihome_sim_sdk.models.cfar.Cfar(), ),
                leverage_metrics = equihome_sim_sdk.models.leverage_metrics.LeverageMetrics(
                    nav_utilisation = 1.337, 
                    interest_coverage = 1.337, 
                    var_uplift = equihome_sim_sdk.models.var_uplift.Var Uplift(), ),
                concentration_metrics = equihome_sim_sdk.models.concentration_metrics.ConcentrationMetrics(
                    herfindahl_index = 1.337, 
                    zone_concentration = null, 
                    suburb_concentration = null, ),
                performance_metrics = equihome_sim_sdk.models.performance_metrics.PerformanceMetrics(
                    net_irr = 1.337, 
                    sharpe_ratio = 1.337, 
                    sortino_ratio = 1.337, 
                    hurdle_clear_probability = equihome_sim_sdk.models.hurdle_clear_probability.Hurdle Clear Probability(), 
                    calmar_ratio = 1.337, 
                    information_ratio = 1.337, 
                    treynor_ratio = 1.337, 
                    omega_ratio = 1.337, 
                    kappa_ratio = 1.337, 
                    gain_loss_ratio = 1.337, ),
                return_metrics = equihome_sim_sdk.models.return_metrics.ReturnMetrics(
                    irr = 1.337, 
                    equity_multiple = 1.337, 
                    moic = 1.337, 
                    tvpi = 1.337, 
                    dpi = 1.337, 
                    rvpi = 1.337, 
                    roi = 1.337, 
                    payback_period = 1.337, 
                    cash_yield = 1.337, 
                    annualized_return = 1.337, ),
                risk_metrics = equihome_sim_sdk.models.risk_metrics_model.RiskMetricsModel(
                    var_95 = 1.337, 
                    var_99 = 1.337, 
                    cvar_95 = 1.337, 
                    cvar_99 = 1.337, 
                    max_drawdown = 1.337, 
                    volatility = 1.337, 
                    downside_deviation = 1.337, 
                    tail_risk = 1.337, 
                    tail_probability = 1.337, 
                    tail_severity = 1.337, ),
                risk_adjusted_return_metrics = equihome_sim_sdk.models.risk_adjusted_return_metrics.RiskAdjustedReturnMetrics(
                    sharpe_ratio = 1.337, 
                    sortino_ratio = 1.337, 
                    calmar_ratio = 1.337, 
                    information_ratio = 1.337, 
                    treynor_ratio = 1.337, 
                    omega_ratio = 1.337, 
                    kappa_ratio = 1.337, 
                    gain_loss_ratio = 1.337, ),
                market_metrics = equihome_sim_sdk.models.market_metrics.MarketMetrics(
                    beta = 1.337, 
                    alpha = 1.337, 
                    tracking_error = 1.337, 
                    r_squared = 1.337, 
                    upside_capture = 1.337, 
                    downside_capture = 1.337, 
                    upside_potential = 1.337, 
                    downside_risk = 1.337, ),
                stress_test_results = {
                    'key' : equihome_sim_sdk.models.stress_test_result.StressTestResult(
                        irr = 1.337, 
                        equity_multiple = 1.337, 
                        roi = 1.337, 
                        max_drawdown = 1.337, 
                        var_95 = 1.337, 
                        impact_pct = 1.337, )
                    },
                sensitivity_analysis = {
                    'key' : [
                        equihome_sim_sdk.models.sensitivity_result.SensitivityResult(
                            parameter_value = 1.337, 
                            irr = 1.337, 
                            equity_multiple = 1.337, 
                            roi = 1.337, )
                        ]
                    },
                visualization = equihome_sim_sdk.models.risk_visualization.RiskVisualization(
                    risk_return_scatter = [
                        equihome_sim_sdk.models.risk_return_point.RiskReturnPoint(
                            scenario = '', 
                            risk = 1.337, 
                            return = 1.337, )
                        ], 
                    var_histogram = null, 
                    drawdown_chart = [
                        equihome_sim_sdk.models.drawdown_point.DrawdownPoint(
                            year = 56, 
                            month = 56, 
                            drawdown = 1.337, )
                        ], 
                    stress_test_comparison = [
                        equihome_sim_sdk.models.stress_test_comparison_point.StressTestComparisonPoint(
                            scenario = '', 
                            metric = '', 
                            value = 1.337, 
                            base_value = 1.337, 
                            pct_change = 1.337, )
                        ], 
                    sensitivity_charts = {
                        'key' : [
                            equihome_sim_sdk.models.sensitivity_chart.SensitivityChart(
                                parameter = '', 
                                values = [
                                    1.337
                                    ], 
                                metric_values = [
                                    1.337
                                    ], )
                            ]
                        }, 
                    concentration_chart = [
                        equihome_sim_sdk.models.concentration_point.ConcentrationPoint(
                            category = '', 
                            name = '', 
                            value = 1.337, 
                            percentage = 1.337, )
                        ], ),
        )
        """

    def testSrcApiRoutersRiskRiskMetricsResponse(self):
        """Test SrcApiRoutersRiskRiskMetricsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
