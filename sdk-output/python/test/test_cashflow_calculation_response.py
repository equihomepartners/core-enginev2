# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equihome_sim_sdk.models.cashflow_calculation_response import CashflowCalculationResponse

class TestCashflowCalculationResponse(unittest.TestCase):
    """CashflowCalculationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CashflowCalculationResponse:
        """Test CashflowCalculationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CashflowCalculationResponse`
        """
        model = CashflowCalculationResponse()
        if include_optional:
            return CashflowCalculationResponse(
                simulation_id = '',
                loan_level_cashflows = [
                    equihome_sim_sdk.models.loan_level_cashflow.LoanLevelCashflow(
                        loan_id = '', 
                        origination = equihome_sim_sdk.models.origination.Origination(), 
                        exit = equihome_sim_sdk.models.exit.Exit(), )
                    ],
                fund_level_cashflows = [
                    equihome_sim_sdk.models.fund_level_cashflow.FundLevelCashflow(
                        year = 56, 
                        month = 56, 
                        quarter = 56, 
                        capital_calls = 1.337, 
                        loan_investments = 1.337, 
                        origination_fees = 1.337, 
                        principal_repayments = 1.337, 
                        interest_income = 1.337, 
                        appreciation_share = 1.337, 
                        management_fees = 1.337, 
                        fund_expenses = 1.337, 
                        leverage_draws = 1.337, 
                        leverage_repayments = 1.337, 
                        leverage_interest = 1.337, 
                        distributions = 1.337, 
                        net_cashflow = 1.337, 
                        cumulative_cashflow = 1.337, )
                    ],
                stakeholder_cashflows = {
                    'key' : [
                        null
                        ]
                    },
                visualization = equihome_sim_sdk.models.cashflow_visualization.CashflowVisualization(
                    cashflow_waterfall_chart = [
                        equihome_sim_sdk.models.cashflow_waterfall_item.CashflowWaterfallItem(
                            category = '', 
                            amount = 1.337, )
                        ], 
                    cashflow_by_year_chart = [
                        equihome_sim_sdk.models.cashflow_by_year_item.CashflowByYearItem(
                            year = 56, 
                            inflows = 1.337, 
                            outflows = 1.337, 
                            net = 1.337, )
                        ], 
                    cumulative_cashflow_chart = [
                        equihome_sim_sdk.models.cumulative_cashflow_item.CumulativeCashflowItem(
                            year = 56, 
                            cumulative_cashflow = 1.337, )
                        ], 
                    cashflow_table = [
                        equihome_sim_sdk.models.cashflow_table_item.CashflowTableItem(
                            year = 56, 
                            capital_calls = 1.337, 
                            loan_investments = 1.337, 
                            origination_fees = 1.337, 
                            principal_repayments = 1.337, 
                            interest_income = 1.337, 
                            appreciation_share = 1.337, 
                            management_fees = 1.337, 
                            fund_expenses = 1.337, 
                            distributions = 1.337, 
                            net_cashflow = 1.337, 
                            cumulative_cashflow = 1.337, )
                        ], 
                    cashflow_heatmap = [
                        equihome_sim_sdk.models.cashflow_heatmap_item.CashflowHeatmapItem(
                            year = 56, 
                            month = 56, 
                            category = '', 
                            amount = 1.337, )
                        ], 
                    cashflow_sankey = null, 
                    scenario_comparison_chart = [
                        equihome_sim_sdk.models.scenario_comparison_item.ScenarioComparisonItem(
                            scenario = '', 
                            metric = '', 
                            value = 1.337, )
                        ], ),
                metrics = equihome_sim_sdk.models.cashflow_metrics.CashflowMetrics(
                    fund_level_metrics = null, 
                    lp_metrics = null, 
                    gp_metrics = null, 
                    metrics_by_year = [
                        equihome_sim_sdk.models.metrics_by_year.MetricsByYear(
                            year = 56, 
                            dpi = 1.337, 
                            rvpi = 1.337, 
                            tvpi = 1.337, 
                            irr = 1.337, 
                            cash_yield = 1.337, )
                        ], ),
                sensitivity_analysis = equihome_sim_sdk.models.sensitivity_analysis.SensitivityAnalysis(
                    parameter_variations = [
                        equihome_sim_sdk.models.parameter_variation.ParameterVariation(
                            parameter = '', 
                            value = 1.337, 
                            metrics = {
                                'key' : 1.337
                                }, )
                        ], 
                    tornado_chart = [
                        equihome_sim_sdk.models.tornado_chart_item.TornadoChartItem(
                            parameter = '', 
                            low_value = 1.337, 
                            high_value = 1.337, 
                            low_metric = 1.337, 
                            high_metric = 1.337, 
                            base_metric = 1.337, 
                            metric_name = '', )
                        ], ),
                scenario_analysis = equihome_sim_sdk.models.scenario_analysis.ScenarioAnalysis(
                    scenarios = [
                        equihome_sim_sdk.models.scenario_result.ScenarioResult(
                            name = '', 
                            description = '', 
                            metrics = {
                                'key' : 1.337
                                }, 
                            cashflows = [
                                {
                                    'key' : 1.337
                                    }
                                ], )
                        ], ),
                tax_impact = equihome_sim_sdk.models.tax_impact_analysis.TaxImpactAnalysis(
                    pre_tax_cashflows = [
                        equihome_sim_sdk.models.tax_cashflow.TaxCashflow(
                            year = 56, 
                            net_cashflow = 1.337, 
                            tax_amount = 1.337, )
                        ], 
                    post_tax_cashflows = [
                        equihome_sim_sdk.models.tax_cashflow.TaxCashflow(
                            year = 56, 
                            net_cashflow = 1.337, 
                            tax_amount = 1.337, )
                        ], 
                    tax_metrics = null, ),
                liquidity_analysis = equihome_sim_sdk.models.liquidity_analysis.LiquidityAnalysis(
                    cash_reserves = [
                        equihome_sim_sdk.models.cash_reserve.CashReserve(
                            year = 56, 
                            month = 56, 
                            cash_reserve = 1.337, 
                            minimum_required = 1.337, 
                            shortfall = 1.337, )
                        ], 
                    liquidity_metrics = null, )
            )
        else:
            return CashflowCalculationResponse(
                simulation_id = '',
                fund_level_cashflows = [
                    equihome_sim_sdk.models.fund_level_cashflow.FundLevelCashflow(
                        year = 56, 
                        month = 56, 
                        quarter = 56, 
                        capital_calls = 1.337, 
                        loan_investments = 1.337, 
                        origination_fees = 1.337, 
                        principal_repayments = 1.337, 
                        interest_income = 1.337, 
                        appreciation_share = 1.337, 
                        management_fees = 1.337, 
                        fund_expenses = 1.337, 
                        leverage_draws = 1.337, 
                        leverage_repayments = 1.337, 
                        leverage_interest = 1.337, 
                        distributions = 1.337, 
                        net_cashflow = 1.337, 
                        cumulative_cashflow = 1.337, )
                    ],
                stakeholder_cashflows = {
                    'key' : [
                        null
                        ]
                    },
                visualization = equihome_sim_sdk.models.cashflow_visualization.CashflowVisualization(
                    cashflow_waterfall_chart = [
                        equihome_sim_sdk.models.cashflow_waterfall_item.CashflowWaterfallItem(
                            category = '', 
                            amount = 1.337, )
                        ], 
                    cashflow_by_year_chart = [
                        equihome_sim_sdk.models.cashflow_by_year_item.CashflowByYearItem(
                            year = 56, 
                            inflows = 1.337, 
                            outflows = 1.337, 
                            net = 1.337, )
                        ], 
                    cumulative_cashflow_chart = [
                        equihome_sim_sdk.models.cumulative_cashflow_item.CumulativeCashflowItem(
                            year = 56, 
                            cumulative_cashflow = 1.337, )
                        ], 
                    cashflow_table = [
                        equihome_sim_sdk.models.cashflow_table_item.CashflowTableItem(
                            year = 56, 
                            capital_calls = 1.337, 
                            loan_investments = 1.337, 
                            origination_fees = 1.337, 
                            principal_repayments = 1.337, 
                            interest_income = 1.337, 
                            appreciation_share = 1.337, 
                            management_fees = 1.337, 
                            fund_expenses = 1.337, 
                            distributions = 1.337, 
                            net_cashflow = 1.337, 
                            cumulative_cashflow = 1.337, )
                        ], 
                    cashflow_heatmap = [
                        equihome_sim_sdk.models.cashflow_heatmap_item.CashflowHeatmapItem(
                            year = 56, 
                            month = 56, 
                            category = '', 
                            amount = 1.337, )
                        ], 
                    cashflow_sankey = null, 
                    scenario_comparison_chart = [
                        equihome_sim_sdk.models.scenario_comparison_item.ScenarioComparisonItem(
                            scenario = '', 
                            metric = '', 
                            value = 1.337, )
                        ], ),
        )
        """

    def testCashflowCalculationResponse(self):
        """Test CashflowCalculationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
