# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equihome_sim_sdk.models.leverage_response import LeverageResponse

class TestLeverageResponse(unittest.TestCase):
    """LeverageResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LeverageResponse:
        """Test LeverageResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LeverageResponse`
        """
        model = LeverageResponse()
        if include_optional:
            return LeverageResponse(
                facilities = [
                    equihome_sim_sdk.models.leverage_facility.LeverageFacility(
                        facility_id = '', 
                        facility_type = '', 
                        max_amount = 1.337, 
                        interest_rate = 1.337, 
                        commitment_fee_bps = 1.337, 
                        term_years = 1.337, 
                        advance_rate = 1.337, 
                        current_balance = 1.337, 
                        available_amount = 1.337, 
                        inception_date = '', 
                        maturity_date = '', )
                    ],
                metrics = equihome_sim_sdk.models.leverage_metrics.LeverageMetrics(
                    total_debt = 1.337, 
                    total_available = 1.337, 
                    total_interest_paid = 1.337, 
                    total_commitment_fees_paid = 1.337, 
                    weighted_avg_interest_rate = 1.337, 
                    leverage_ratio = 1.337, 
                    debt_service_coverage_ratio = 1.337, 
                    interest_coverage_ratio = 1.337, 
                    loan_to_value_ratio = 1.337, ),
                visualization = equihome_sim_sdk.models.leverage_visualization.LeverageVisualization(
                    leverage_timeline = [
                        None
                        ], 
                    facility_utilization = [
                        None
                        ], 
                    interest_expense = [
                        None
                        ], ),
                stress_test_results = {
                    'key' : equihome_sim_sdk.models.stress_test_result.StressTestResult(
                        is_compliant = True, 
                        details = equihome_sim_sdk.models.details.Details(), )
                    }
            )
        else:
            return LeverageResponse(
                facilities = [
                    equihome_sim_sdk.models.leverage_facility.LeverageFacility(
                        facility_id = '', 
                        facility_type = '', 
                        max_amount = 1.337, 
                        interest_rate = 1.337, 
                        commitment_fee_bps = 1.337, 
                        term_years = 1.337, 
                        advance_rate = 1.337, 
                        current_balance = 1.337, 
                        available_amount = 1.337, 
                        inception_date = '', 
                        maturity_date = '', )
                    ],
                metrics = equihome_sim_sdk.models.leverage_metrics.LeverageMetrics(
                    total_debt = 1.337, 
                    total_available = 1.337, 
                    total_interest_paid = 1.337, 
                    total_commitment_fees_paid = 1.337, 
                    weighted_avg_interest_rate = 1.337, 
                    leverage_ratio = 1.337, 
                    debt_service_coverage_ratio = 1.337, 
                    interest_coverage_ratio = 1.337, 
                    loan_to_value_ratio = 1.337, ),
                visualization = equihome_sim_sdk.models.leverage_visualization.LeverageVisualization(
                    leverage_timeline = [
                        None
                        ], 
                    facility_utilization = [
                        None
                        ], 
                    interest_expense = [
                        None
                        ], ),
        )
        """

    def testLeverageResponse(self):
        """Test LeverageResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
