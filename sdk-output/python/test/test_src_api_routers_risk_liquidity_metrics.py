# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equihome_sim_sdk.models.src_api_routers_risk_liquidity_metrics import SrcApiRoutersRiskLiquidityMetrics

class TestSrcApiRoutersRiskLiquidityMetrics(unittest.TestCase):
    """SrcApiRoutersRiskLiquidityMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SrcApiRoutersRiskLiquidityMetrics:
        """Test SrcApiRoutersRiskLiquidityMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SrcApiRoutersRiskLiquidityMetrics`
        """
        model = SrcApiRoutersRiskLiquidityMetrics()
        if include_optional:
            return SrcApiRoutersRiskLiquidityMetrics(
                liquidity_score = equihome_sim_sdk.models.liquidity_score.Liquidity Score(),
                expected_exit_lag = equihome_sim_sdk.models.expected_exit_lag.Expected Exit Lag(),
                wal = 1.337,
                cfar = equihome_sim_sdk.models.cfar.Cfar()
            )
        else:
            return SrcApiRoutersRiskLiquidityMetrics(
                liquidity_score = equihome_sim_sdk.models.liquidity_score.Liquidity Score(),
                expected_exit_lag = equihome_sim_sdk.models.expected_exit_lag.Expected Exit Lag(),
                wal = 1.337,
                cfar = equihome_sim_sdk.models.cfar.Cfar(),
        )
        """

    def testSrcApiRoutersRiskLiquidityMetrics(self):
        """Test SrcApiRoutersRiskLiquidityMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
