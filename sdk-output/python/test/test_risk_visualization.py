# coding: utf-8

"""
    EQU IHOME SIM ENGINE API

    API for running home equity investment fund simulations

    The version of the OpenAPI document: 0.1.0
    Contact: info@equihome.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equihome_sim_sdk.models.risk_visualization import RiskVisualization

class TestRiskVisualization(unittest.TestCase):
    """RiskVisualization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RiskVisualization:
        """Test RiskVisualization
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RiskVisualization`
        """
        model = RiskVisualization()
        if include_optional:
            return RiskVisualization(
                risk_return_scatter = [
                    equihome_sim_sdk.models.risk_return_point.RiskReturnPoint(
                        scenario = '', 
                        risk = 1.337, 
                        return = 1.337, )
                    ],
                var_histogram = equihome_sim_sdk.models.var_histogram.VarHistogram(
                    bins = [
                        1.337
                        ], 
                    frequencies = [
                        56
                        ], 
                    var_95 = 1.337, 
                    var_99 = 1.337, ),
                drawdown_chart = [
                    equihome_sim_sdk.models.drawdown_point.DrawdownPoint(
                        year = 56, 
                        month = 56, 
                        drawdown = 1.337, )
                    ],
                stress_test_comparison = [
                    equihome_sim_sdk.models.stress_test_comparison_point.StressTestComparisonPoint(
                        scenario = '', 
                        metric = '', 
                        value = 1.337, 
                        base_value = 1.337, 
                        pct_change = 1.337, )
                    ],
                sensitivity_charts = {
                    'key' : [
                        equihome_sim_sdk.models.sensitivity_chart.SensitivityChart(
                            parameter = '', 
                            values = [
                                1.337
                                ], 
                            metric_values = [
                                1.337
                                ], )
                        ]
                    },
                concentration_chart = [
                    equihome_sim_sdk.models.concentration_point.ConcentrationPoint(
                        category = '', 
                        name = '', 
                        value = 1.337, 
                        percentage = 1.337, )
                    ]
            )
        else:
            return RiskVisualization(
                risk_return_scatter = [
                    equihome_sim_sdk.models.risk_return_point.RiskReturnPoint(
                        scenario = '', 
                        risk = 1.337, 
                        return = 1.337, )
                    ],
                var_histogram = equihome_sim_sdk.models.var_histogram.VarHistogram(
                    bins = [
                        1.337
                        ], 
                    frequencies = [
                        56
                        ], 
                    var_95 = 1.337, 
                    var_99 = 1.337, ),
                drawdown_chart = [
                    equihome_sim_sdk.models.drawdown_point.DrawdownPoint(
                        year = 56, 
                        month = 56, 
                        drawdown = 1.337, )
                    ],
                stress_test_comparison = [
                    equihome_sim_sdk.models.stress_test_comparison_point.StressTestComparisonPoint(
                        scenario = '', 
                        metric = '', 
                        value = 1.337, 
                        base_value = 1.337, 
                        pct_change = 1.337, )
                    ],
                sensitivity_charts = {
                    'key' : [
                        equihome_sim_sdk.models.sensitivity_chart.SensitivityChart(
                            parameter = '', 
                            values = [
                                1.337
                                ], 
                            metric_values = [
                                1.337
                                ], )
                        ]
                    },
                concentration_chart = [
                    equihome_sim_sdk.models.concentration_point.ConcentrationPoint(
                        category = '', 
                        name = '', 
                        value = 1.337, 
                        percentage = 1.337, )
                    ],
        )
        """

    def testRiskVisualization(self):
        """Test RiskVisualization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
