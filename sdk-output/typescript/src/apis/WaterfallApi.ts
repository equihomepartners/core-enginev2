/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  WaterfallConfigModel,
  WaterfallResultModel,
  WaterfallVisualizationModel,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    WaterfallConfigModelFromJSON,
    WaterfallConfigModelToJSON,
    WaterfallResultModelFromJSON,
    WaterfallResultModelToJSON,
    WaterfallVisualizationModelFromJSON,
    WaterfallVisualizationModelToJSON,
} from '../models/index';

export interface CalculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRequest {
    simulationId: string;
    waterfallConfigModel: WaterfallConfigModel;
}

export interface GetWaterfallDistributionSimulationsSimulationIdWaterfallGetRequest {
    simulationId: string;
}

export interface GetWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRequest {
    simulationId: string;
}

/**
 * WaterfallApi - interface
 * 
 * @export
 * @interface WaterfallApiInterface
 */
export interface WaterfallApiInterface {
    /**
     * Calculates waterfall distribution based on provided configuration
     * @summary Calculate waterfall distribution
     * @param {string} simulationId 
     * @param {WaterfallConfigModel} waterfallConfigModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WaterfallApiInterface
     */
    calculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRaw(requestParameters: CalculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterfallResultModel>>;

    /**
     * Calculates waterfall distribution based on provided configuration
     * Calculate waterfall distribution
     */
    calculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePost(requestParameters: CalculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterfallResultModel>;

    /**
     * Returns the waterfall distribution for a simulation
     * @summary Get waterfall distribution for a simulation
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WaterfallApiInterface
     */
    getWaterfallDistributionSimulationsSimulationIdWaterfallGetRaw(requestParameters: GetWaterfallDistributionSimulationsSimulationIdWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterfallResultModel>>;

    /**
     * Returns the waterfall distribution for a simulation
     * Get waterfall distribution for a simulation
     */
    getWaterfallDistributionSimulationsSimulationIdWaterfallGet(requestParameters: GetWaterfallDistributionSimulationsSimulationIdWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterfallResultModel>;

    /**
     * Returns visualization data for waterfall distribution
     * @summary Get waterfall visualization data
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WaterfallApiInterface
     */
    getWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRaw(requestParameters: GetWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterfallVisualizationModel>>;

    /**
     * Returns visualization data for waterfall distribution
     * Get waterfall visualization data
     */
    getWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGet(requestParameters: GetWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterfallVisualizationModel>;

}

/**
 * 
 */
export class WaterfallApi extends runtime.BaseAPI implements WaterfallApiInterface {

    /**
     * Calculates waterfall distribution based on provided configuration
     * Calculate waterfall distribution
     */
    async calculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRaw(requestParameters: CalculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterfallResultModel>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling calculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePost().'
            );
        }

        if (requestParameters['waterfallConfigModel'] == null) {
            throw new runtime.RequiredError(
                'waterfallConfigModel',
                'Required parameter "waterfallConfigModel" was null or undefined when calling calculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/waterfall/calculate`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaterfallConfigModelToJSON(requestParameters['waterfallConfigModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterfallResultModelFromJSON(jsonValue));
    }

    /**
     * Calculates waterfall distribution based on provided configuration
     * Calculate waterfall distribution
     */
    async calculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePost(requestParameters: CalculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterfallResultModel> {
        const response = await this.calculateWaterfallDistributionSimulationsSimulationIdWaterfallCalculatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the waterfall distribution for a simulation
     * Get waterfall distribution for a simulation
     */
    async getWaterfallDistributionSimulationsSimulationIdWaterfallGetRaw(requestParameters: GetWaterfallDistributionSimulationsSimulationIdWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterfallResultModel>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getWaterfallDistributionSimulationsSimulationIdWaterfallGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/waterfall`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterfallResultModelFromJSON(jsonValue));
    }

    /**
     * Returns the waterfall distribution for a simulation
     * Get waterfall distribution for a simulation
     */
    async getWaterfallDistributionSimulationsSimulationIdWaterfallGet(requestParameters: GetWaterfallDistributionSimulationsSimulationIdWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterfallResultModel> {
        const response = await this.getWaterfallDistributionSimulationsSimulationIdWaterfallGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns visualization data for waterfall distribution
     * Get waterfall visualization data
     */
    async getWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRaw(requestParameters: GetWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterfallVisualizationModel>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}/waterfall/visualization`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterfallVisualizationModelFromJSON(jsonValue));
    }

    /**
     * Returns visualization data for waterfall distribution
     * Get waterfall visualization data
     */
    async getWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGet(requestParameters: GetWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterfallVisualizationModel> {
        const response = await this.getWaterfallVisualizationSimulationsSimulationIdWaterfallVisualizationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
