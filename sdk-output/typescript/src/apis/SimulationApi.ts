/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SimulationRequest,
  SimulationResponse,
  SimulationResult,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SimulationRequestFromJSON,
    SimulationRequestToJSON,
    SimulationResponseFromJSON,
    SimulationResponseToJSON,
    SimulationResultFromJSON,
    SimulationResultToJSON,
} from '../models/index';

export interface CreateSimulationSimulationsPostRequest {
    simulationRequest: SimulationRequest;
}

export interface DeleteSimulationSimulationsSimulationIdDeleteRequest {
    simulationId: string;
}

export interface GetSimulationSimulationsSimulationIdGetRequest {
    simulationId: string;
}

/**
 * SimulationApi - interface
 * 
 * @export
 * @interface SimulationApiInterface
 */
export interface SimulationApiInterface {
    /**
     * Create a new simulation.  Args:     request: Simulation request     background_tasks: Background tasks  Returns:     Simulation response
     * @summary Create Simulation
     * @param {SimulationRequest} simulationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    createSimulationSimulationsPostRaw(requestParameters: CreateSimulationSimulationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulationResponse>>;

    /**
     * Create a new simulation.  Args:     request: Simulation request     background_tasks: Background tasks  Returns:     Simulation response
     * Create Simulation
     */
    createSimulationSimulationsPost(requestParameters: CreateSimulationSimulationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulationResponse>;

    /**
     * Delete a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * @summary Delete Simulation
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    deleteSimulationSimulationsSimulationIdDeleteRaw(requestParameters: DeleteSimulationSimulationsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>>;

    /**
     * Delete a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * Delete Simulation
     */
    deleteSimulationSimulationsSimulationIdDelete(requestParameters: DeleteSimulationSimulationsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }>;

    /**
     * Get a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * @summary Get Simulation
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    getSimulationSimulationsSimulationIdGetRaw(requestParameters: GetSimulationSimulationsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulationResult>>;

    /**
     * Get a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * Get Simulation
     */
    getSimulationSimulationsSimulationIdGet(requestParameters: GetSimulationSimulationsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulationResult>;

    /**
     * List all simulations.  Returns:     List of simulation results
     * @summary List Simulations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    listSimulationsSimulationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SimulationResult>>>;

    /**
     * List all simulations.  Returns:     List of simulation results
     * List Simulations
     */
    listSimulationsSimulationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SimulationResult>>;

}

/**
 * 
 */
export class SimulationApi extends runtime.BaseAPI implements SimulationApiInterface {

    /**
     * Create a new simulation.  Args:     request: Simulation request     background_tasks: Background tasks  Returns:     Simulation response
     * Create Simulation
     */
    async createSimulationSimulationsPostRaw(requestParameters: CreateSimulationSimulationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulationResponse>> {
        if (requestParameters['simulationRequest'] == null) {
            throw new runtime.RequiredError(
                'simulationRequest',
                'Required parameter "simulationRequest" was null or undefined when calling createSimulationSimulationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SimulationRequestToJSON(requestParameters['simulationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulationResponseFromJSON(jsonValue));
    }

    /**
     * Create a new simulation.  Args:     request: Simulation request     background_tasks: Background tasks  Returns:     Simulation response
     * Create Simulation
     */
    async createSimulationSimulationsPost(requestParameters: CreateSimulationSimulationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulationResponse> {
        const response = await this.createSimulationSimulationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * Delete Simulation
     */
    async deleteSimulationSimulationsSimulationIdDeleteRaw(requestParameters: DeleteSimulationSimulationsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling deleteSimulationSimulationsSimulationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * Delete Simulation
     */
    async deleteSimulationSimulationsSimulationIdDelete(requestParameters: DeleteSimulationSimulationsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.deleteSimulationSimulationsSimulationIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * Get Simulation
     */
    async getSimulationSimulationsSimulationIdGetRaw(requestParameters: GetSimulationSimulationsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulationResult>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getSimulationSimulationsSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulationResultFromJSON(jsonValue));
    }

    /**
     * Get a simulation by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * Get Simulation
     */
    async getSimulationSimulationsSimulationIdGet(requestParameters: GetSimulationSimulationsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulationResult> {
        const response = await this.getSimulationSimulationsSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all simulations.  Returns:     List of simulation results
     * List Simulations
     */
    async listSimulationsSimulationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SimulationResult>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/simulations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SimulationResultFromJSON));
    }

    /**
     * List all simulations.  Returns:     List of simulation results
     * List Simulations
     */
    async listSimulationsSimulationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SimulationResult>> {
        const response = await this.listSimulationsSimulationsGetRaw(initOverrides);
        return await response.value();
    }

}
