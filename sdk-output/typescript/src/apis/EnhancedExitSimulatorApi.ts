/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnhancedExitScenarioRequest,
  EnhancedExitStatisticsResponse,
  EnhancedExitVisualizationResponse,
  HTTPValidationError,
} from '../models/index';
import {
    EnhancedExitScenarioRequestFromJSON,
    EnhancedExitScenarioRequestToJSON,
    EnhancedExitStatisticsResponseFromJSON,
    EnhancedExitStatisticsResponseToJSON,
    EnhancedExitVisualizationResponseFromJSON,
    EnhancedExitVisualizationResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRequest {
    simulationId: string;
}

export interface GetEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRequest {
    simulationId: string;
}

export interface GetEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRequest {
    simulationId: string;
}

export interface RunEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRequest {
    simulationId: string;
    enhancedExitScenarioRequest: EnhancedExitScenarioRequest;
}

/**
 * EnhancedExitSimulatorApi - interface
 * 
 * @export
 * @interface EnhancedExitSimulatorApiInterface
 */
export interface EnhancedExitSimulatorApiInterface {
    /**
     * Get enhanced statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced statistics data
     * @summary Get Enhanced Exit Statistics
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhancedExitSimulatorApiInterface
     */
    getEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRaw(requestParameters: GetEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnhancedExitStatisticsResponse>>;

    /**
     * Get enhanced statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced statistics data
     * Get Enhanced Exit Statistics
     */
    getEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGet(requestParameters: GetEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnhancedExitStatisticsResponse>;

    /**
     * Get enhanced visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced visualization data
     * @summary Get Enhanced Exit Visualization
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhancedExitSimulatorApiInterface
     */
    getEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRaw(requestParameters: GetEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnhancedExitVisualizationResponse>>;

    /**
     * Get enhanced visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced visualization data
     * Get Enhanced Exit Visualization
     */
    getEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGet(requestParameters: GetEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnhancedExitVisualizationResponse>;

    /**
     * Get enhanced exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Enhanced exit simulation results
     * @summary Get Enhanced Exits
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhancedExitSimulatorApiInterface
     */
    getEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRaw(requestParameters: GetEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get enhanced exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Enhanced exit simulation results
     * Get Enhanced Exits
     */
    getEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGet(requestParameters: GetEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Run an enhanced exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Enhanced exit scenario request  Returns:     Enhanced exit scenario results
     * @summary Run Enhanced Exit Scenario
     * @param {string} simulationId 
     * @param {EnhancedExitScenarioRequest} enhancedExitScenarioRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhancedExitSimulatorApiInterface
     */
    runEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRaw(requestParameters: RunEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Run an enhanced exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Enhanced exit scenario request  Returns:     Enhanced exit scenario results
     * Run Enhanced Exit Scenario
     */
    runEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPost(requestParameters: RunEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class EnhancedExitSimulatorApi extends runtime.BaseAPI implements EnhancedExitSimulatorApiInterface {

    /**
     * Get enhanced statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced statistics data
     * Get Enhanced Exit Statistics
     */
    async getEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRaw(requestParameters: GetEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnhancedExitStatisticsResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/enhanced-exits/statistics`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnhancedExitStatisticsResponseFromJSON(jsonValue));
    }

    /**
     * Get enhanced statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced statistics data
     * Get Enhanced Exit Statistics
     */
    async getEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGet(requestParameters: GetEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnhancedExitStatisticsResponse> {
        const response = await this.getEnhancedExitStatisticsApiV1SimulationsSimulationIdEnhancedExitsStatisticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get enhanced visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced visualization data
     * Get Enhanced Exit Visualization
     */
    async getEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRaw(requestParameters: GetEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnhancedExitVisualizationResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/enhanced-exits/visualization`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnhancedExitVisualizationResponseFromJSON(jsonValue));
    }

    /**
     * Get enhanced visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Enhanced visualization data
     * Get Enhanced Exit Visualization
     */
    async getEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGet(requestParameters: GetEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnhancedExitVisualizationResponse> {
        const response = await this.getEnhancedExitVisualizationApiV1SimulationsSimulationIdEnhancedExitsVisualizationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get enhanced exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Enhanced exit simulation results
     * Get Enhanced Exits
     */
    async getEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRaw(requestParameters: GetEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/enhanced-exits`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get enhanced exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Enhanced exit simulation results
     * Get Enhanced Exits
     */
    async getEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGet(requestParameters: GetEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getEnhancedExitsApiV1SimulationsSimulationIdEnhancedExitsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run an enhanced exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Enhanced exit scenario request  Returns:     Enhanced exit scenario results
     * Run Enhanced Exit Scenario
     */
    async runEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRaw(requestParameters: RunEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling runEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPost().'
            );
        }

        if (requestParameters['enhancedExitScenarioRequest'] == null) {
            throw new runtime.RequiredError(
                'enhancedExitScenarioRequest',
                'Required parameter "enhancedExitScenarioRequest" was null or undefined when calling runEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/enhanced-exits/scenario`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnhancedExitScenarioRequestToJSON(requestParameters['enhancedExitScenarioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Run an enhanced exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Enhanced exit scenario request  Returns:     Enhanced exit scenario results
     * Run Enhanced Exit Scenario
     */
    async runEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPost(requestParameters: RunEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.runEnhancedExitScenarioApiV1SimulationsSimulationIdEnhancedExitsScenarioPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
