/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ManualReinvestmentRequest,
  ReinvestmentEventResponse,
  SrcApiRoutersReinvestmentReinvestmentResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ManualReinvestmentRequestFromJSON,
    ManualReinvestmentRequestToJSON,
    ReinvestmentEventResponseFromJSON,
    ReinvestmentEventResponseToJSON,
    SrcApiRoutersReinvestmentReinvestmentResponseFromJSON,
    SrcApiRoutersReinvestmentReinvestmentResponseToJSON,
} from '../models/index';

export interface GetReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRequest {
    simulationId: string;
}

export interface GetReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRequest {
    simulationId: string;
}

export interface ManualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRequest {
    simulationId: string;
    manualReinvestmentRequest: ManualReinvestmentRequest;
}

/**
 * ReinvestmentApi - interface
 * 
 * @export
 * @interface ReinvestmentApiInterface
 */
export interface ReinvestmentApiInterface {
    /**
     * Get reinvestment data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Reinvestment data
     * @summary Get Reinvestment Data
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinvestmentApiInterface
     */
    getReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRaw(requestParameters: GetReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersReinvestmentReinvestmentResponse>>;

    /**
     * Get reinvestment data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Reinvestment data
     * Get Reinvestment Data
     */
    getReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGet(requestParameters: GetReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersReinvestmentReinvestmentResponse>;

    /**
     * Get reinvestment risk metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of risk metrics for each reinvestment event
     * @summary Get Reinvestment Risk Metrics
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinvestmentApiInterface
     */
    getReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRaw(requestParameters: GetReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>>;

    /**
     * Get reinvestment risk metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of risk metrics for each reinvestment event
     * Get Reinvestment Risk Metrics
     */
    getReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGet(requestParameters: GetReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>>;

    /**
     * Manually trigger a reinvestment event.  Args:     simulation_id: Simulation ID     request: Manual reinvestment request  Returns:     Reinvestment event details
     * @summary Manual Reinvestment
     * @param {string} simulationId 
     * @param {ManualReinvestmentRequest} manualReinvestmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinvestmentApiInterface
     */
    manualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRaw(requestParameters: ManualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinvestmentEventResponse>>;

    /**
     * Manually trigger a reinvestment event.  Args:     simulation_id: Simulation ID     request: Manual reinvestment request  Returns:     Reinvestment event details
     * Manual Reinvestment
     */
    manualReinvestmentApiV1SimulationsSimulationIdReinvestmentPost(requestParameters: ManualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinvestmentEventResponse>;

}

/**
 * 
 */
export class ReinvestmentApi extends runtime.BaseAPI implements ReinvestmentApiInterface {

    /**
     * Get reinvestment data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Reinvestment data
     * Get Reinvestment Data
     */
    async getReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRaw(requestParameters: GetReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrcApiRoutersReinvestmentReinvestmentResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/reinvestment`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SrcApiRoutersReinvestmentReinvestmentResponseFromJSON(jsonValue));
    }

    /**
     * Get reinvestment data for a simulation.  Args:     simulation_id: Simulation ID  Returns:     Reinvestment data
     * Get Reinvestment Data
     */
    async getReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGet(requestParameters: GetReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrcApiRoutersReinvestmentReinvestmentResponse> {
        const response = await this.getReinvestmentDataApiV1SimulationsSimulationIdReinvestmentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get reinvestment risk metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of risk metrics for each reinvestment event
     * Get Reinvestment Risk Metrics
     */
    async getReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRaw(requestParameters: GetReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/reinvestment/risk`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get reinvestment risk metrics for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of risk metrics for each reinvestment event
     * Get Reinvestment Risk Metrics
     */
    async getReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGet(requestParameters: GetReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getReinvestmentRiskMetricsApiV1SimulationsSimulationIdReinvestmentRiskGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manually trigger a reinvestment event.  Args:     simulation_id: Simulation ID     request: Manual reinvestment request  Returns:     Reinvestment event details
     * Manual Reinvestment
     */
    async manualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRaw(requestParameters: ManualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinvestmentEventResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling manualReinvestmentApiV1SimulationsSimulationIdReinvestmentPost().'
            );
        }

        if (requestParameters['manualReinvestmentRequest'] == null) {
            throw new runtime.RequiredError(
                'manualReinvestmentRequest',
                'Required parameter "manualReinvestmentRequest" was null or undefined when calling manualReinvestmentApiV1SimulationsSimulationIdReinvestmentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/reinvestment`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManualReinvestmentRequestToJSON(requestParameters['manualReinvestmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReinvestmentEventResponseFromJSON(jsonValue));
    }

    /**
     * Manually trigger a reinvestment event.  Args:     simulation_id: Simulation ID     request: Manual reinvestment request  Returns:     Reinvestment event details
     * Manual Reinvestment
     */
    async manualReinvestmentApiV1SimulationsSimulationIdReinvestmentPost(requestParameters: ManualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinvestmentEventResponse> {
        const response = await this.manualReinvestmentApiV1SimulationsSimulationIdReinvestmentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
