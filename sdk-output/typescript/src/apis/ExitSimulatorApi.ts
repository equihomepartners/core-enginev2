/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExitScenarioRequest,
  ExitStatisticsResponse,
  ExitVisualizationResponse,
  HTTPValidationError,
  LoanExitRequest,
  LoanExitResponse,
} from '../models/index';
import {
    ExitScenarioRequestFromJSON,
    ExitScenarioRequestToJSON,
    ExitStatisticsResponseFromJSON,
    ExitStatisticsResponseToJSON,
    ExitVisualizationResponseFromJSON,
    ExitVisualizationResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LoanExitRequestFromJSON,
    LoanExitRequestToJSON,
    LoanExitResponseFromJSON,
    LoanExitResponseToJSON,
} from '../models/index';

export interface CalculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRequest {
    simulationId: string;
    loanExitRequest: LoanExitRequest;
}

export interface GetExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRequest {
    simulationId: string;
}

export interface GetExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRequest {
    simulationId: string;
}

export interface GetExitsApiV1SimulationsSimulationIdExitsGetRequest {
    simulationId: string;
}

export interface RunExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRequest {
    simulationId: string;
    exitScenarioRequest: ExitScenarioRequest;
}

/**
 * ExitSimulatorApi - interface
 * 
 * @export
 * @interface ExitSimulatorApiInterface
 */
export interface ExitSimulatorApiInterface {
    /**
     * Calculate exit value for a specific loan.  Args:     simulation_id: Simulation ID     request: Loan exit request  Returns:     Loan exit value
     * @summary Calculate Loan Exit
     * @param {string} simulationId 
     * @param {LoanExitRequest} loanExitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExitSimulatorApiInterface
     */
    calculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRaw(requestParameters: CalculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanExitResponse>>;

    /**
     * Calculate exit value for a specific loan.  Args:     simulation_id: Simulation ID     request: Loan exit request  Returns:     Loan exit value
     * Calculate Loan Exit
     */
    calculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPost(requestParameters: CalculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanExitResponse>;

    /**
     * Get statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * @summary Get Exit Statistics
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExitSimulatorApiInterface
     */
    getExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRaw(requestParameters: GetExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExitStatisticsResponse>>;

    /**
     * Get statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * Get Exit Statistics
     */
    getExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGet(requestParameters: GetExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExitStatisticsResponse>;

    /**
     * Get visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * @summary Get Exit Visualization
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExitSimulatorApiInterface
     */
    getExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRaw(requestParameters: GetExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExitVisualizationResponse>>;

    /**
     * Get visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Exit Visualization
     */
    getExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGet(requestParameters: GetExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExitVisualizationResponse>;

    /**
     * Get exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Exit simulation results
     * @summary Get Exits
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExitSimulatorApiInterface
     */
    getExitsApiV1SimulationsSimulationIdExitsGetRaw(requestParameters: GetExitsApiV1SimulationsSimulationIdExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Exit simulation results
     * Get Exits
     */
    getExitsApiV1SimulationsSimulationIdExitsGet(requestParameters: GetExitsApiV1SimulationsSimulationIdExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Run an exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Exit scenario request  Returns:     Exit scenario results
     * @summary Run Exit Scenario
     * @param {string} simulationId 
     * @param {ExitScenarioRequest} exitScenarioRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExitSimulatorApiInterface
     */
    runExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRaw(requestParameters: RunExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Run an exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Exit scenario request  Returns:     Exit scenario results
     * Run Exit Scenario
     */
    runExitScenarioApiV1SimulationsSimulationIdExitsScenarioPost(requestParameters: RunExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class ExitSimulatorApi extends runtime.BaseAPI implements ExitSimulatorApiInterface {

    /**
     * Calculate exit value for a specific loan.  Args:     simulation_id: Simulation ID     request: Loan exit request  Returns:     Loan exit value
     * Calculate Loan Exit
     */
    async calculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRaw(requestParameters: CalculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanExitResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling calculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPost().'
            );
        }

        if (requestParameters['loanExitRequest'] == null) {
            throw new runtime.RequiredError(
                'loanExitRequest',
                'Required parameter "loanExitRequest" was null or undefined when calling calculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/exits/loan-exit`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoanExitRequestToJSON(requestParameters['loanExitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanExitResponseFromJSON(jsonValue));
    }

    /**
     * Calculate exit value for a specific loan.  Args:     simulation_id: Simulation ID     request: Loan exit request  Returns:     Loan exit value
     * Calculate Loan Exit
     */
    async calculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPost(requestParameters: CalculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanExitResponse> {
        const response = await this.calculateLoanExitApiV1SimulationsSimulationIdExitsLoanExitPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * Get Exit Statistics
     */
    async getExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRaw(requestParameters: GetExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExitStatisticsResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/exits/statistics`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExitStatisticsResponseFromJSON(jsonValue));
    }

    /**
     * Get statistics for exits.  Args:     simulation_id: Simulation ID  Returns:     Statistics data
     * Get Exit Statistics
     */
    async getExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGet(requestParameters: GetExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExitStatisticsResponse> {
        const response = await this.getExitStatisticsApiV1SimulationsSimulationIdExitsStatisticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Exit Visualization
     */
    async getExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRaw(requestParameters: GetExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExitVisualizationResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/exits/visualization`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExitVisualizationResponseFromJSON(jsonValue));
    }

    /**
     * Get visualization data for exits.  Args:     simulation_id: Simulation ID  Returns:     Visualization data
     * Get Exit Visualization
     */
    async getExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGet(requestParameters: GetExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExitVisualizationResponse> {
        const response = await this.getExitVisualizationApiV1SimulationsSimulationIdExitsVisualizationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Exit simulation results
     * Get Exits
     */
    async getExitsApiV1SimulationsSimulationIdExitsGetRaw(requestParameters: GetExitsApiV1SimulationsSimulationIdExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getExitsApiV1SimulationsSimulationIdExitsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/exits`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get exit simulation results.  Args:     simulation_id: Simulation ID  Returns:     Exit simulation results
     * Get Exits
     */
    async getExitsApiV1SimulationsSimulationIdExitsGet(requestParameters: GetExitsApiV1SimulationsSimulationIdExitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getExitsApiV1SimulationsSimulationIdExitsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run an exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Exit scenario request  Returns:     Exit scenario results
     * Run Exit Scenario
     */
    async runExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRaw(requestParameters: RunExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling runExitScenarioApiV1SimulationsSimulationIdExitsScenarioPost().'
            );
        }

        if (requestParameters['exitScenarioRequest'] == null) {
            throw new runtime.RequiredError(
                'exitScenarioRequest',
                'Required parameter "exitScenarioRequest" was null or undefined when calling runExitScenarioApiV1SimulationsSimulationIdExitsScenarioPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/simulations/{simulation_id}/exits/scenario`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExitScenarioRequestToJSON(requestParameters['exitScenarioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Run an exit scenario with custom parameters.  Args:     simulation_id: Simulation ID     request: Exit scenario request  Returns:     Exit scenario results
     * Run Exit Scenario
     */
    async runExitScenarioApiV1SimulationsSimulationIdExitsScenarioPost(requestParameters: RunExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.runExitScenarioApiV1SimulationsSimulationIdExitsScenarioPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
