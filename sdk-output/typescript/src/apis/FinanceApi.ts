/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CashflowCalculationRequest,
  CashflowCalculationResponse,
  FeeCalculationRequest,
  FeeCalculationResponse,
  HTTPValidationError,
} from '../models/index';
import {
    CashflowCalculationRequestFromJSON,
    CashflowCalculationRequestToJSON,
    CashflowCalculationResponseFromJSON,
    CashflowCalculationResponseToJSON,
    FeeCalculationRequestFromJSON,
    FeeCalculationRequestToJSON,
    FeeCalculationResponseFromJSON,
    FeeCalculationResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CalculateCashflowsFinanceCashflowsCalculatePostRequest {
    cashflowCalculationRequest: CashflowCalculationRequest;
    simulationId?: string;
}

export interface CalculateFeesFinanceFeesCalculatePostRequest {
    feeCalculationRequest: FeeCalculationRequest;
    simulationId?: string;
}

export interface GetCashflowsFinanceCashflowsSimulationIdGetRequest {
    simulationId: string;
}

export interface GetFeesFinanceFeesSimulationIdGetRequest {
    simulationId: string;
}

/**
 * FinanceApi - interface
 * 
 * @export
 * @interface FinanceApiInterface
 */
export interface FinanceApiInterface {
    /**
     * Calculate cashflows for a simulation.  This endpoint calculates cashflows for a simulation, including loan-level cashflows, fund-level cashflows, and stakeholder cashflows.  Args:     request: Cashflow calculation request     context: Simulation context  Returns:     Cashflow calculation response
     * @summary Calculate Cashflows
     * @param {CashflowCalculationRequest} cashflowCalculationRequest 
     * @param {string} [simulationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    calculateCashflowsFinanceCashflowsCalculatePostRaw(requestParameters: CalculateCashflowsFinanceCashflowsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashflowCalculationResponse>>;

    /**
     * Calculate cashflows for a simulation.  This endpoint calculates cashflows for a simulation, including loan-level cashflows, fund-level cashflows, and stakeholder cashflows.  Args:     request: Cashflow calculation request     context: Simulation context  Returns:     Cashflow calculation response
     * Calculate Cashflows
     */
    calculateCashflowsFinanceCashflowsCalculatePost(requestParameters: CalculateCashflowsFinanceCashflowsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashflowCalculationResponse>;

    /**
     * Calculate fees for a simulation.  This endpoint calculates fees for a simulation, including management fees, origination fees, fund expenses, acquisition fees, and disposition fees.  Args:     request: Fee calculation request     context: Simulation context  Returns:     Fee calculation response
     * @summary Calculate Fees
     * @param {FeeCalculationRequest} feeCalculationRequest 
     * @param {string} [simulationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    calculateFeesFinanceFeesCalculatePostRaw(requestParameters: CalculateFeesFinanceFeesCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeeCalculationResponse>>;

    /**
     * Calculate fees for a simulation.  This endpoint calculates fees for a simulation, including management fees, origination fees, fund expenses, acquisition fees, and disposition fees.  Args:     request: Fee calculation request     context: Simulation context  Returns:     Fee calculation response
     * Calculate Fees
     */
    calculateFeesFinanceFeesCalculatePost(requestParameters: CalculateFeesFinanceFeesCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeeCalculationResponse>;

    /**
     * Get cashflow calculation results for a simulation.  This endpoint retrieves cashflow calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Cashflow calculation response
     * @summary Get Cashflows
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    getCashflowsFinanceCashflowsSimulationIdGetRaw(requestParameters: GetCashflowsFinanceCashflowsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashflowCalculationResponse>>;

    /**
     * Get cashflow calculation results for a simulation.  This endpoint retrieves cashflow calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Cashflow calculation response
     * Get Cashflows
     */
    getCashflowsFinanceCashflowsSimulationIdGet(requestParameters: GetCashflowsFinanceCashflowsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashflowCalculationResponse>;

    /**
     * Get fee calculation results for a simulation.  This endpoint retrieves fee calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Fee calculation response
     * @summary Get Fees
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    getFeesFinanceFeesSimulationIdGetRaw(requestParameters: GetFeesFinanceFeesSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeeCalculationResponse>>;

    /**
     * Get fee calculation results for a simulation.  This endpoint retrieves fee calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Fee calculation response
     * Get Fees
     */
    getFeesFinanceFeesSimulationIdGet(requestParameters: GetFeesFinanceFeesSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeeCalculationResponse>;

}

/**
 * 
 */
export class FinanceApi extends runtime.BaseAPI implements FinanceApiInterface {

    /**
     * Calculate cashflows for a simulation.  This endpoint calculates cashflows for a simulation, including loan-level cashflows, fund-level cashflows, and stakeholder cashflows.  Args:     request: Cashflow calculation request     context: Simulation context  Returns:     Cashflow calculation response
     * Calculate Cashflows
     */
    async calculateCashflowsFinanceCashflowsCalculatePostRaw(requestParameters: CalculateCashflowsFinanceCashflowsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashflowCalculationResponse>> {
        if (requestParameters['cashflowCalculationRequest'] == null) {
            throw new runtime.RequiredError(
                'cashflowCalculationRequest',
                'Required parameter "cashflowCalculationRequest" was null or undefined when calling calculateCashflowsFinanceCashflowsCalculatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/finance/cashflows/calculate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashflowCalculationRequestToJSON(requestParameters['cashflowCalculationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashflowCalculationResponseFromJSON(jsonValue));
    }

    /**
     * Calculate cashflows for a simulation.  This endpoint calculates cashflows for a simulation, including loan-level cashflows, fund-level cashflows, and stakeholder cashflows.  Args:     request: Cashflow calculation request     context: Simulation context  Returns:     Cashflow calculation response
     * Calculate Cashflows
     */
    async calculateCashflowsFinanceCashflowsCalculatePost(requestParameters: CalculateCashflowsFinanceCashflowsCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashflowCalculationResponse> {
        const response = await this.calculateCashflowsFinanceCashflowsCalculatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculate fees for a simulation.  This endpoint calculates fees for a simulation, including management fees, origination fees, fund expenses, acquisition fees, and disposition fees.  Args:     request: Fee calculation request     context: Simulation context  Returns:     Fee calculation response
     * Calculate Fees
     */
    async calculateFeesFinanceFeesCalculatePostRaw(requestParameters: CalculateFeesFinanceFeesCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeeCalculationResponse>> {
        if (requestParameters['feeCalculationRequest'] == null) {
            throw new runtime.RequiredError(
                'feeCalculationRequest',
                'Required parameter "feeCalculationRequest" was null or undefined when calling calculateFeesFinanceFeesCalculatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/finance/fees/calculate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeeCalculationRequestToJSON(requestParameters['feeCalculationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeeCalculationResponseFromJSON(jsonValue));
    }

    /**
     * Calculate fees for a simulation.  This endpoint calculates fees for a simulation, including management fees, origination fees, fund expenses, acquisition fees, and disposition fees.  Args:     request: Fee calculation request     context: Simulation context  Returns:     Fee calculation response
     * Calculate Fees
     */
    async calculateFeesFinanceFeesCalculatePost(requestParameters: CalculateFeesFinanceFeesCalculatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeeCalculationResponse> {
        const response = await this.calculateFeesFinanceFeesCalculatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cashflow calculation results for a simulation.  This endpoint retrieves cashflow calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Cashflow calculation response
     * Get Cashflows
     */
    async getCashflowsFinanceCashflowsSimulationIdGetRaw(requestParameters: GetCashflowsFinanceCashflowsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashflowCalculationResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getCashflowsFinanceCashflowsSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/finance/cashflows/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashflowCalculationResponseFromJSON(jsonValue));
    }

    /**
     * Get cashflow calculation results for a simulation.  This endpoint retrieves cashflow calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Cashflow calculation response
     * Get Cashflows
     */
    async getCashflowsFinanceCashflowsSimulationIdGet(requestParameters: GetCashflowsFinanceCashflowsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashflowCalculationResponse> {
        const response = await this.getCashflowsFinanceCashflowsSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get fee calculation results for a simulation.  This endpoint retrieves fee calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Fee calculation response
     * Get Fees
     */
    async getFeesFinanceFeesSimulationIdGetRaw(requestParameters: GetFeesFinanceFeesSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeeCalculationResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getFeesFinanceFeesSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/finance/fees/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeeCalculationResponseFromJSON(jsonValue));
    }

    /**
     * Get fee calculation results for a simulation.  This endpoint retrieves fee calculation results for a simulation.  Args:     simulation_id: Simulation ID     context: Simulation context  Returns:     Fee calculation response
     * Get Fees
     */
    async getFeesFinanceFeesSimulationIdGet(requestParameters: GetFeesFinanceFeesSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeeCalculationResponse> {
        const response = await this.getFeesFinanceFeesSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
