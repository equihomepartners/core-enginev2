/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoverageTestResponse,
  HTTPValidationError,
  ReserveAccountResponse,
  TrancheAllocationResponse,
  TrancheCashflowResponse,
  TrancheResponse,
} from '../models/index';
import {
    CoverageTestResponseFromJSON,
    CoverageTestResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ReserveAccountResponseFromJSON,
    ReserveAccountResponseToJSON,
    TrancheAllocationResponseFromJSON,
    TrancheAllocationResponseToJSON,
    TrancheCashflowResponseFromJSON,
    TrancheCashflowResponseToJSON,
    TrancheResponseFromJSON,
    TrancheResponseToJSON,
} from '../models/index';

export interface GetCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRequest {
    simulationId: string;
}

export interface GetCoverageTestsTranchesCoverageTestsGetRequest {
    simulationId: string;
    testType?: string;
}

export interface GetReserveAccountTranchesReserveAccountGetRequest {
    simulationId: string;
}

export interface GetReserveAccountVisualizationTranchesVisualizationReserveAccountGetRequest {
    simulationId: string;
}

export interface GetTrancheAllocationVisualizationTranchesVisualizationAllocationGetRequest {
    simulationId: string;
}

export interface GetTrancheAllocationsTranchesTrancheNameAllocationsGetRequest {
    trancheName: string;
    simulationId: string;
}

export interface GetTrancheCashflowVisualizationTranchesVisualizationCashflowGetRequest {
    simulationId: string;
}

export interface GetTrancheCashflowsTranchesTrancheNameCashflowsGetRequest {
    trancheName: string;
    simulationId: string;
}

export interface GetTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRequest {
    simulationId: string;
}

export interface GetTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRequest {
    simulationId: string;
}

export interface GetTranchesTranchesGetRequest {
    simulationId: string;
}

/**
 * TranchesApi - interface
 * 
 * @export
 * @interface TranchesApiInterface
 */
export interface TranchesApiInterface {
    /**
     * Get coverage test visualization data.  Args:     simulation_id: Simulation ID  Returns:     Coverage test visualization data
     * @summary Get Coverage Test Visualization
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRaw(requestParameters: GetCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<object>; }>>;

    /**
     * Get coverage test visualization data.  Args:     simulation_id: Simulation ID  Returns:     Coverage test visualization data
     * Get Coverage Test Visualization
     */
    getCoverageTestVisualizationTranchesVisualizationCoverageTestsGet(requestParameters: GetCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<object>; }>;

    /**
     * Get coverage test results.  Args:     simulation_id: Simulation ID     test_type: Test type filter  Returns:     List of coverage test results
     * @summary Get Coverage Tests
     * @param {string} simulationId Simulation ID
     * @param {string} [testType] Test type (overcollateralization, interest_coverage)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getCoverageTestsTranchesCoverageTestsGetRaw(requestParameters: GetCoverageTestsTranchesCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoverageTestResponse>>>;

    /**
     * Get coverage test results.  Args:     simulation_id: Simulation ID     test_type: Test type filter  Returns:     List of coverage test results
     * Get Coverage Tests
     */
    getCoverageTestsTranchesCoverageTestsGet(requestParameters: GetCoverageTestsTranchesCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoverageTestResponse>>;

    /**
     * Get reserve account history.  Args:     simulation_id: Simulation ID  Returns:     Reserve account history
     * @summary Get Reserve Account
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getReserveAccountTranchesReserveAccountGetRaw(requestParameters: GetReserveAccountTranchesReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReserveAccountResponse>>>;

    /**
     * Get reserve account history.  Args:     simulation_id: Simulation ID  Returns:     Reserve account history
     * Get Reserve Account
     */
    getReserveAccountTranchesReserveAccountGet(requestParameters: GetReserveAccountTranchesReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReserveAccountResponse>>;

    /**
     * Get reserve account visualization data.  Args:     simulation_id: Simulation ID  Returns:     Reserve account visualization data
     * @summary Get Reserve Account Visualization
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getReserveAccountVisualizationTranchesVisualizationReserveAccountGetRaw(requestParameters: GetReserveAccountVisualizationTranchesVisualizationReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>>;

    /**
     * Get reserve account visualization data.  Args:     simulation_id: Simulation ID  Returns:     Reserve account visualization data
     * Get Reserve Account Visualization
     */
    getReserveAccountVisualizationTranchesVisualizationReserveAccountGet(requestParameters: GetReserveAccountVisualizationTranchesVisualizationReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>>;

    /**
     * Get tranche allocation visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche allocation visualization data
     * @summary Get Tranche Allocation Visualization
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getTrancheAllocationVisualizationTranchesVisualizationAllocationGetRaw(requestParameters: GetTrancheAllocationVisualizationTranchesVisualizationAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>>;

    /**
     * Get tranche allocation visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche allocation visualization data
     * Get Tranche Allocation Visualization
     */
    getTrancheAllocationVisualizationTranchesVisualizationAllocationGet(requestParameters: GetTrancheAllocationVisualizationTranchesVisualizationAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>>;

    /**
     * Get loan allocations for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of loan allocations
     * @summary Get Tranche Allocations
     * @param {string} trancheName 
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getTrancheAllocationsTranchesTrancheNameAllocationsGetRaw(requestParameters: GetTrancheAllocationsTranchesTrancheNameAllocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrancheAllocationResponse>>>;

    /**
     * Get loan allocations for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of loan allocations
     * Get Tranche Allocations
     */
    getTrancheAllocationsTranchesTrancheNameAllocationsGet(requestParameters: GetTrancheAllocationsTranchesTrancheNameAllocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrancheAllocationResponse>>;

    /**
     * Get tranche cashflow visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche cashflow visualization data
     * @summary Get Tranche Cashflow Visualization
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getTrancheCashflowVisualizationTranchesVisualizationCashflowGetRaw(requestParameters: GetTrancheCashflowVisualizationTranchesVisualizationCashflowGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<object>; }>>;

    /**
     * Get tranche cashflow visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche cashflow visualization data
     * Get Tranche Cashflow Visualization
     */
    getTrancheCashflowVisualizationTranchesVisualizationCashflowGet(requestParameters: GetTrancheCashflowVisualizationTranchesVisualizationCashflowGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<object>; }>;

    /**
     * Get cashflows for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of cashflows
     * @summary Get Tranche Cashflows
     * @param {string} trancheName 
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getTrancheCashflowsTranchesTrancheNameCashflowsGetRaw(requestParameters: GetTrancheCashflowsTranchesTrancheNameCashflowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrancheCashflowResponse>>>;

    /**
     * Get cashflows for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of cashflows
     * Get Tranche Cashflows
     */
    getTrancheCashflowsTranchesTrancheNameCashflowsGet(requestParameters: GetTrancheCashflowsTranchesTrancheNameCashflowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrancheCashflowResponse>>;

    /**
     * Get tranche performance visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche performance visualization data
     * @summary Get Tranche Performance Visualization
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRaw(requestParameters: GetTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>>;

    /**
     * Get tranche performance visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche performance visualization data
     * Get Tranche Performance Visualization
     */
    getTranchePerformanceVisualizationTranchesVisualizationPerformanceGet(requestParameters: GetTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>>;

    /**
     * Get tranche waterfall visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche waterfall visualization data
     * @summary Get Tranche Waterfall Visualization
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRaw(requestParameters: GetTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>>;

    /**
     * Get tranche waterfall visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche waterfall visualization data
     * Get Tranche Waterfall Visualization
     */
    getTrancheWaterfallVisualizationTranchesVisualizationWaterfallGet(requestParameters: GetTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>>;

    /**
     * Get all tranches for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of tranches
     * @summary Get Tranches
     * @param {string} simulationId Simulation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranchesApiInterface
     */
    getTranchesTranchesGetRaw(requestParameters: GetTranchesTranchesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrancheResponse>>>;

    /**
     * Get all tranches for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of tranches
     * Get Tranches
     */
    getTranchesTranchesGet(requestParameters: GetTranchesTranchesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrancheResponse>>;

}

/**
 * 
 */
export class TranchesApi extends runtime.BaseAPI implements TranchesApiInterface {

    /**
     * Get coverage test visualization data.  Args:     simulation_id: Simulation ID  Returns:     Coverage test visualization data
     * Get Coverage Test Visualization
     */
    async getCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRaw(requestParameters: GetCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<object>; }>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getCoverageTestVisualizationTranchesVisualizationCoverageTestsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/visualization/coverage-tests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get coverage test visualization data.  Args:     simulation_id: Simulation ID  Returns:     Coverage test visualization data
     * Get Coverage Test Visualization
     */
    async getCoverageTestVisualizationTranchesVisualizationCoverageTestsGet(requestParameters: GetCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<object>; }> {
        const response = await this.getCoverageTestVisualizationTranchesVisualizationCoverageTestsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get coverage test results.  Args:     simulation_id: Simulation ID     test_type: Test type filter  Returns:     List of coverage test results
     * Get Coverage Tests
     */
    async getCoverageTestsTranchesCoverageTestsGetRaw(requestParameters: GetCoverageTestsTranchesCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoverageTestResponse>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getCoverageTestsTranchesCoverageTestsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        if (requestParameters['testType'] != null) {
            queryParameters['test_type'] = requestParameters['testType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/coverage-tests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoverageTestResponseFromJSON));
    }

    /**
     * Get coverage test results.  Args:     simulation_id: Simulation ID     test_type: Test type filter  Returns:     List of coverage test results
     * Get Coverage Tests
     */
    async getCoverageTestsTranchesCoverageTestsGet(requestParameters: GetCoverageTestsTranchesCoverageTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoverageTestResponse>> {
        const response = await this.getCoverageTestsTranchesCoverageTestsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get reserve account history.  Args:     simulation_id: Simulation ID  Returns:     Reserve account history
     * Get Reserve Account
     */
    async getReserveAccountTranchesReserveAccountGetRaw(requestParameters: GetReserveAccountTranchesReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReserveAccountResponse>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getReserveAccountTranchesReserveAccountGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/reserve-account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReserveAccountResponseFromJSON));
    }

    /**
     * Get reserve account history.  Args:     simulation_id: Simulation ID  Returns:     Reserve account history
     * Get Reserve Account
     */
    async getReserveAccountTranchesReserveAccountGet(requestParameters: GetReserveAccountTranchesReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReserveAccountResponse>> {
        const response = await this.getReserveAccountTranchesReserveAccountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get reserve account visualization data.  Args:     simulation_id: Simulation ID  Returns:     Reserve account visualization data
     * Get Reserve Account Visualization
     */
    async getReserveAccountVisualizationTranchesVisualizationReserveAccountGetRaw(requestParameters: GetReserveAccountVisualizationTranchesVisualizationReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getReserveAccountVisualizationTranchesVisualizationReserveAccountGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/visualization/reserve-account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get reserve account visualization data.  Args:     simulation_id: Simulation ID  Returns:     Reserve account visualization data
     * Get Reserve Account Visualization
     */
    async getReserveAccountVisualizationTranchesVisualizationReserveAccountGet(requestParameters: GetReserveAccountVisualizationTranchesVisualizationReserveAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getReserveAccountVisualizationTranchesVisualizationReserveAccountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tranche allocation visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche allocation visualization data
     * Get Tranche Allocation Visualization
     */
    async getTrancheAllocationVisualizationTranchesVisualizationAllocationGetRaw(requestParameters: GetTrancheAllocationVisualizationTranchesVisualizationAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getTrancheAllocationVisualizationTranchesVisualizationAllocationGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/visualization/allocation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get tranche allocation visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche allocation visualization data
     * Get Tranche Allocation Visualization
     */
    async getTrancheAllocationVisualizationTranchesVisualizationAllocationGet(requestParameters: GetTrancheAllocationVisualizationTranchesVisualizationAllocationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getTrancheAllocationVisualizationTranchesVisualizationAllocationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get loan allocations for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of loan allocations
     * Get Tranche Allocations
     */
    async getTrancheAllocationsTranchesTrancheNameAllocationsGetRaw(requestParameters: GetTrancheAllocationsTranchesTrancheNameAllocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrancheAllocationResponse>>> {
        if (requestParameters['trancheName'] == null) {
            throw new runtime.RequiredError(
                'trancheName',
                'Required parameter "trancheName" was null or undefined when calling getTrancheAllocationsTranchesTrancheNameAllocationsGet().'
            );
        }

        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getTrancheAllocationsTranchesTrancheNameAllocationsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/{tranche_name}/allocations`.replace(`{${"tranche_name"}}`, encodeURIComponent(String(requestParameters['trancheName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrancheAllocationResponseFromJSON));
    }

    /**
     * Get loan allocations for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of loan allocations
     * Get Tranche Allocations
     */
    async getTrancheAllocationsTranchesTrancheNameAllocationsGet(requestParameters: GetTrancheAllocationsTranchesTrancheNameAllocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrancheAllocationResponse>> {
        const response = await this.getTrancheAllocationsTranchesTrancheNameAllocationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tranche cashflow visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche cashflow visualization data
     * Get Tranche Cashflow Visualization
     */
    async getTrancheCashflowVisualizationTranchesVisualizationCashflowGetRaw(requestParameters: GetTrancheCashflowVisualizationTranchesVisualizationCashflowGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<object>; }>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getTrancheCashflowVisualizationTranchesVisualizationCashflowGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/visualization/cashflow`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get tranche cashflow visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche cashflow visualization data
     * Get Tranche Cashflow Visualization
     */
    async getTrancheCashflowVisualizationTranchesVisualizationCashflowGet(requestParameters: GetTrancheCashflowVisualizationTranchesVisualizationCashflowGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<object>; }> {
        const response = await this.getTrancheCashflowVisualizationTranchesVisualizationCashflowGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cashflows for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of cashflows
     * Get Tranche Cashflows
     */
    async getTrancheCashflowsTranchesTrancheNameCashflowsGetRaw(requestParameters: GetTrancheCashflowsTranchesTrancheNameCashflowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrancheCashflowResponse>>> {
        if (requestParameters['trancheName'] == null) {
            throw new runtime.RequiredError(
                'trancheName',
                'Required parameter "trancheName" was null or undefined when calling getTrancheCashflowsTranchesTrancheNameCashflowsGet().'
            );
        }

        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getTrancheCashflowsTranchesTrancheNameCashflowsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/{tranche_name}/cashflows`.replace(`{${"tranche_name"}}`, encodeURIComponent(String(requestParameters['trancheName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrancheCashflowResponseFromJSON));
    }

    /**
     * Get cashflows for a tranche.  Args:     tranche_name: Tranche name     simulation_id: Simulation ID  Returns:     List of cashflows
     * Get Tranche Cashflows
     */
    async getTrancheCashflowsTranchesTrancheNameCashflowsGet(requestParameters: GetTrancheCashflowsTranchesTrancheNameCashflowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrancheCashflowResponse>> {
        const response = await this.getTrancheCashflowsTranchesTrancheNameCashflowsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tranche performance visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche performance visualization data
     * Get Tranche Performance Visualization
     */
    async getTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRaw(requestParameters: GetTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getTranchePerformanceVisualizationTranchesVisualizationPerformanceGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/visualization/performance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get tranche performance visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche performance visualization data
     * Get Tranche Performance Visualization
     */
    async getTranchePerformanceVisualizationTranchesVisualizationPerformanceGet(requestParameters: GetTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getTranchePerformanceVisualizationTranchesVisualizationPerformanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tranche waterfall visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche waterfall visualization data
     * Get Tranche Waterfall Visualization
     */
    async getTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRaw(requestParameters: GetTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getTrancheWaterfallVisualizationTranchesVisualizationWaterfallGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/visualization/waterfall`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get tranche waterfall visualization data.  Args:     simulation_id: Simulation ID  Returns:     Tranche waterfall visualization data
     * Get Tranche Waterfall Visualization
     */
    async getTrancheWaterfallVisualizationTranchesVisualizationWaterfallGet(requestParameters: GetTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getTrancheWaterfallVisualizationTranchesVisualizationWaterfallGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tranches for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of tranches
     * Get Tranches
     */
    async getTranchesTranchesGetRaw(requestParameters: GetTranchesTranchesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrancheResponse>>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getTranchesTranchesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['simulationId'] != null) {
            queryParameters['simulation_id'] = requestParameters['simulationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tranches/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrancheResponseFromJSON));
    }

    /**
     * Get all tranches for a simulation.  Args:     simulation_id: Simulation ID  Returns:     List of tranches
     * Get Tranches
     */
    async getTranchesTranchesGet(requestParameters: GetTranchesTranchesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrancheResponse>> {
        const response = await this.getTranchesTranchesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
