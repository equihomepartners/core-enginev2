/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ResultListResponse,
  ResultResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ResultListResponseFromJSON,
    ResultListResponseToJSON,
    ResultResponseFromJSON,
    ResultResponseToJSON,
} from '../models/index';

export interface DeleteResultApiV1ResultsSimulationIdDeleteRequest {
    simulationId: string;
}

export interface ExportResultApiV1ResultsSimulationIdExportPostRequest {
    simulationId: string;
}

export interface GetResultApiV1ResultsSimulationIdGetRequest {
    simulationId: string;
}

export interface ListResultsApiV1ResultsGetRequest {
    limit?: number;
    offset?: number;
}

/**
 * PersistenceApi - interface
 * 
 * @export
 * @interface PersistenceApiInterface
 */
export interface PersistenceApiInterface {
    /**
     * Delete a simulation result.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * @summary Delete Result
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersistenceApiInterface
     */
    deleteResultApiV1ResultsSimulationIdDeleteRaw(requestParameters: DeleteResultApiV1ResultsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Delete a simulation result.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * Delete Result
     */
    deleteResultApiV1ResultsSimulationIdDelete(requestParameters: DeleteResultApiV1ResultsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Export a simulation result to a file.  Args:     simulation_id: Simulation ID     background_tasks: Background tasks  Returns:     Export status
     * @summary Export Result
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersistenceApiInterface
     */
    exportResultApiV1ResultsSimulationIdExportPostRaw(requestParameters: ExportResultApiV1ResultsSimulationIdExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Export a simulation result to a file.  Args:     simulation_id: Simulation ID     background_tasks: Background tasks  Returns:     Export status
     * Export Result
     */
    exportResultApiV1ResultsSimulationIdExportPost(requestParameters: ExportResultApiV1ResultsSimulationIdExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Get a simulation result by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * @summary Get Result
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersistenceApiInterface
     */
    getResultApiV1ResultsSimulationIdGetRaw(requestParameters: GetResultApiV1ResultsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultResponse>>;

    /**
     * Get a simulation result by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * Get Result
     */
    getResultApiV1ResultsSimulationIdGet(requestParameters: GetResultApiV1ResultsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultResponse>;

    /**
     * List simulation results.  Args:     limit: Maximum number of results to return     offset: Offset for pagination  Returns:     List of simulation results
     * @summary List Results
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersistenceApiInterface
     */
    listResultsApiV1ResultsGetRaw(requestParameters: ListResultsApiV1ResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultListResponse>>;

    /**
     * List simulation results.  Args:     limit: Maximum number of results to return     offset: Offset for pagination  Returns:     List of simulation results
     * List Results
     */
    listResultsApiV1ResultsGet(requestParameters: ListResultsApiV1ResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultListResponse>;

}

/**
 * 
 */
export class PersistenceApi extends runtime.BaseAPI implements PersistenceApiInterface {

    /**
     * Delete a simulation result.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * Delete Result
     */
    async deleteResultApiV1ResultsSimulationIdDeleteRaw(requestParameters: DeleteResultApiV1ResultsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling deleteResultApiV1ResultsSimulationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/results/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a simulation result.  Args:     simulation_id: Simulation ID  Returns:     Success message
     * Delete Result
     */
    async deleteResultApiV1ResultsSimulationIdDelete(requestParameters: DeleteResultApiV1ResultsSimulationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteResultApiV1ResultsSimulationIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export a simulation result to a file.  Args:     simulation_id: Simulation ID     background_tasks: Background tasks  Returns:     Export status
     * Export Result
     */
    async exportResultApiV1ResultsSimulationIdExportPostRaw(requestParameters: ExportResultApiV1ResultsSimulationIdExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling exportResultApiV1ResultsSimulationIdExportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/results/{simulation_id}/export`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Export a simulation result to a file.  Args:     simulation_id: Simulation ID     background_tasks: Background tasks  Returns:     Export status
     * Export Result
     */
    async exportResultApiV1ResultsSimulationIdExportPost(requestParameters: ExportResultApiV1ResultsSimulationIdExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.exportResultApiV1ResultsSimulationIdExportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a simulation result by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * Get Result
     */
    async getResultApiV1ResultsSimulationIdGetRaw(requestParameters: GetResultApiV1ResultsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultResponse>> {
        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getResultApiV1ResultsSimulationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/results/{simulation_id}`.replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultResponseFromJSON(jsonValue));
    }

    /**
     * Get a simulation result by ID.  Args:     simulation_id: Simulation ID  Returns:     Simulation result
     * Get Result
     */
    async getResultApiV1ResultsSimulationIdGet(requestParameters: GetResultApiV1ResultsSimulationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultResponse> {
        const response = await this.getResultApiV1ResultsSimulationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List simulation results.  Args:     limit: Maximum number of results to return     offset: Offset for pagination  Returns:     List of simulation results
     * List Results
     */
    async listResultsApiV1ResultsGetRaw(requestParameters: ListResultsApiV1ResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/results/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultListResponseFromJSON(jsonValue));
    }

    /**
     * List simulation results.  Args:     limit: Maximum number of results to return     offset: Offset for pagination  Returns:     List of simulation results
     * List Results
     */
    async listResultsApiV1ResultsGet(requestParameters: ListResultsApiV1ResultsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultListResponse> {
        const response = await this.listResultsApiV1ResultsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
