/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Coverage test response model.
 * @export
 * @interface CoverageTestResponse
 */
export interface CoverageTestResponse {
    /**
     * Test type (e.g., 'overcollateralization', 'interest_coverage')
     * @type {string}
     * @memberof CoverageTestResponse
     */
    testType: string;
    /**
     * Date of the test
     * @type {string}
     * @memberof CoverageTestResponse
     */
    testDate: string;
    /**
     * Year of the test
     * @type {number}
     * @memberof CoverageTestResponse
     */
    year: number;
    /**
     * Month of the test
     * @type {number}
     * @memberof CoverageTestResponse
     */
    month: number;
    /**
     * Test threshold
     * @type {number}
     * @memberof CoverageTestResponse
     */
    threshold: number;
    /**
     * Actual value
     * @type {number}
     * @memberof CoverageTestResponse
     */
    actualValue: number;
    /**
     * Whether the test passed
     * @type {boolean}
     * @memberof CoverageTestResponse
     */
    passed: boolean;
    /**
     * Deadline to cure the test failure (if applicable)
     * @type {string}
     * @memberof CoverageTestResponse
     */
    cureDeadline?: string;
    /**
     * Whether the test failure was cured (if applicable)
     * @type {boolean}
     * @memberof CoverageTestResponse
     */
    cured?: boolean;
}

/**
 * Check if a given object implements the CoverageTestResponse interface.
 */
export function instanceOfCoverageTestResponse(value: object): value is CoverageTestResponse {
    if (!('testType' in value) || value['testType'] === undefined) return false;
    if (!('testDate' in value) || value['testDate'] === undefined) return false;
    if (!('year' in value) || value['year'] === undefined) return false;
    if (!('month' in value) || value['month'] === undefined) return false;
    if (!('threshold' in value) || value['threshold'] === undefined) return false;
    if (!('actualValue' in value) || value['actualValue'] === undefined) return false;
    if (!('passed' in value) || value['passed'] === undefined) return false;
    return true;
}

export function CoverageTestResponseFromJSON(json: any): CoverageTestResponse {
    return CoverageTestResponseFromJSONTyped(json, false);
}

export function CoverageTestResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoverageTestResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'testType': json['test_type'],
        'testDate': json['test_date'],
        'year': json['year'],
        'month': json['month'],
        'threshold': json['threshold'],
        'actualValue': json['actual_value'],
        'passed': json['passed'],
        'cureDeadline': json['cure_deadline'] == null ? undefined : json['cure_deadline'],
        'cured': json['cured'] == null ? undefined : json['cured'],
    };
}

export function CoverageTestResponseToJSON(json: any): CoverageTestResponse {
    return CoverageTestResponseToJSONTyped(json, false);
}

export function CoverageTestResponseToJSONTyped(value?: CoverageTestResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'test_type': value['testType'],
        'test_date': value['testDate'],
        'year': value['year'],
        'month': value['month'],
        'threshold': value['threshold'],
        'actual_value': value['actualValue'],
        'passed': value['passed'],
        'cure_deadline': value['cureDeadline'],
        'cured': value['cured'],
    };
}

