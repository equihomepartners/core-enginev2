/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Tranche response model.
 * @export
 * @interface TrancheResponse
 */
export interface TrancheResponse {
    /**
     * Tranche name
     * @type {string}
     * @memberof TrancheResponse
     */
    name: string;
    /**
     * Tranche type
     * @type {string}
     * @memberof TrancheResponse
     */
    type: string;
    /**
     * Tranche size in dollars
     * @type {number}
     * @memberof TrancheResponse
     */
    size: number;
    /**
     * Payment priority
     * @type {number}
     * @memberof TrancheResponse
     */
    priority: number;
    /**
     * Interest rate for debt tranches
     * @type {number}
     * @memberof TrancheResponse
     */
    interestRate?: number;
    /**
     * Target return for the tranche
     * @type {number}
     * @memberof TrancheResponse
     */
    targetReturn?: number;
    /**
     * Actual return achieved
     * @type {number}
     * @memberof TrancheResponse
     */
    actualReturn?: number;
    /**
     * Internal rate of return
     * @type {number}
     * @memberof TrancheResponse
     */
    irr?: number;
    /**
     * Multiple on invested capital
     * @type {number}
     * @memberof TrancheResponse
     */
    moic?: number;
    /**
     * Total payments made to the tranche
     * @type {number}
     * @memberof TrancheResponse
     */
    totalPayments: number;
    /**
     * Principal payments made to the tranche
     * @type {number}
     * @memberof TrancheResponse
     */
    principalPayments: number;
    /**
     * Interest payments made to the tranche
     * @type {number}
     * @memberof TrancheResponse
     */
    interestPayments: number;
    /**
     * Profit share payments made to the tranche
     * @type {number}
     * @memberof TrancheResponse
     */
    profitSharePayments: number;
    /**
     * Shortfall amount (if any)
     * @type {number}
     * @memberof TrancheResponse
     */
    shortfall: number;
    /**
     * Tranche status (e.g., 'paid', 'defaulted', 'active')
     * @type {string}
     * @memberof TrancheResponse
     */
    status: string;
}

/**
 * Check if a given object implements the TrancheResponse interface.
 */
export function instanceOfTrancheResponse(value: object): value is TrancheResponse {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('totalPayments' in value) || value['totalPayments'] === undefined) return false;
    if (!('principalPayments' in value) || value['principalPayments'] === undefined) return false;
    if (!('interestPayments' in value) || value['interestPayments'] === undefined) return false;
    if (!('profitSharePayments' in value) || value['profitSharePayments'] === undefined) return false;
    if (!('shortfall' in value) || value['shortfall'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function TrancheResponseFromJSON(json: any): TrancheResponse {
    return TrancheResponseFromJSONTyped(json, false);
}

export function TrancheResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrancheResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'size': json['size'],
        'priority': json['priority'],
        'interestRate': json['interest_rate'] == null ? undefined : json['interest_rate'],
        'targetReturn': json['target_return'] == null ? undefined : json['target_return'],
        'actualReturn': json['actual_return'] == null ? undefined : json['actual_return'],
        'irr': json['irr'] == null ? undefined : json['irr'],
        'moic': json['moic'] == null ? undefined : json['moic'],
        'totalPayments': json['total_payments'],
        'principalPayments': json['principal_payments'],
        'interestPayments': json['interest_payments'],
        'profitSharePayments': json['profit_share_payments'],
        'shortfall': json['shortfall'],
        'status': json['status'],
    };
}

export function TrancheResponseToJSON(json: any): TrancheResponse {
    return TrancheResponseToJSONTyped(json, false);
}

export function TrancheResponseToJSONTyped(value?: TrancheResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': value['type'],
        'size': value['size'],
        'priority': value['priority'],
        'interest_rate': value['interestRate'],
        'target_return': value['targetReturn'],
        'actual_return': value['actualReturn'],
        'irr': value['irr'],
        'moic': value['moic'],
        'total_payments': value['totalPayments'],
        'principal_payments': value['principalPayments'],
        'interest_payments': value['interestPayments'],
        'profit_share_payments': value['profitSharePayments'],
        'shortfall': value['shortfall'],
        'status': value['status'],
    };
}

