/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Metric distribution model.
 * @export
 * @interface MetricDistribution
 */
export interface MetricDistribution {
    /**
     * Metric name
     * @type {string}
     * @memberof MetricDistribution
     */
    metricName: string;
    /**
     * Metric category
     * @type {string}
     * @memberof MetricDistribution
     */
    category: string;
    /**
     * Metric unit
     * @type {string}
     * @memberof MetricDistribution
     */
    unit: string;
    /**
     * Minimum value
     * @type {number}
     * @memberof MetricDistribution
     */
    minValue: number;
    /**
     * Maximum value
     * @type {number}
     * @memberof MetricDistribution
     */
    maxValue: number;
    /**
     * Mean value
     * @type {number}
     * @memberof MetricDistribution
     */
    mean: number;
    /**
     * Median value
     * @type {number}
     * @memberof MetricDistribution
     */
    median: number;
    /**
     * Standard deviation
     * @type {number}
     * @memberof MetricDistribution
     */
    stdDev: number;
    /**
     * Percentiles (10, 25, 50, 75, 90)
     * @type {{ [key: string]: number; }}
     * @memberof MetricDistribution
     */
    percentiles: { [key: string]: number; };
    /**
     * Histogram data
     * @type {Array<object>}
     * @memberof MetricDistribution
     */
    histogram: Array<object>;
    /**
     * Statistics by zone
     * @type {{ [key: string]: { [key: string]: number; }; }}
     * @memberof MetricDistribution
     */
    byZone: { [key: string]: { [key: string]: number; }; };
}

/**
 * Check if a given object implements the MetricDistribution interface.
 */
export function instanceOfMetricDistribution(value: object): value is MetricDistribution {
    if (!('metricName' in value) || value['metricName'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('unit' in value) || value['unit'] === undefined) return false;
    if (!('minValue' in value) || value['minValue'] === undefined) return false;
    if (!('maxValue' in value) || value['maxValue'] === undefined) return false;
    if (!('mean' in value) || value['mean'] === undefined) return false;
    if (!('median' in value) || value['median'] === undefined) return false;
    if (!('stdDev' in value) || value['stdDev'] === undefined) return false;
    if (!('percentiles' in value) || value['percentiles'] === undefined) return false;
    if (!('histogram' in value) || value['histogram'] === undefined) return false;
    if (!('byZone' in value) || value['byZone'] === undefined) return false;
    return true;
}

export function MetricDistributionFromJSON(json: any): MetricDistribution {
    return MetricDistributionFromJSONTyped(json, false);
}

export function MetricDistributionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetricDistribution {
    if (json == null) {
        return json;
    }
    return {
        
        'metricName': json['metric_name'],
        'category': json['category'],
        'unit': json['unit'],
        'minValue': json['min_value'],
        'maxValue': json['max_value'],
        'mean': json['mean'],
        'median': json['median'],
        'stdDev': json['std_dev'],
        'percentiles': json['percentiles'],
        'histogram': json['histogram'],
        'byZone': json['by_zone'],
    };
}

export function MetricDistributionToJSON(json: any): MetricDistribution {
    return MetricDistributionToJSONTyped(json, false);
}

export function MetricDistributionToJSONTyped(value?: MetricDistribution | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'metric_name': value['metricName'],
        'category': value['category'],
        'unit': value['unit'],
        'min_value': value['minValue'],
        'max_value': value['maxValue'],
        'mean': value['mean'],
        'median': value['median'],
        'std_dev': value['stdDev'],
        'percentiles': value['percentiles'],
        'histogram': value['histogram'],
        'by_zone': value['byZone'],
    };
}

