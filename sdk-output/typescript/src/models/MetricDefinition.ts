/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Metric definition model.
 * @export
 * @interface MetricDefinition
 */
export interface MetricDefinition {
    /**
     * Metric name
     * @type {string}
     * @memberof MetricDefinition
     */
    name: string;
    /**
     * Metric category
     * @type {string}
     * @memberof MetricDefinition
     */
    category: string;
    /**
     * Metric description
     * @type {string}
     * @memberof MetricDefinition
     */
    description: string;
    /**
     * Metric unit
     * @type {string}
     * @memberof MetricDefinition
     */
    unit: string;
    /**
     * Minimum value
     * @type {number}
     * @memberof MetricDefinition
     */
    minValue: number;
    /**
     * Maximum value
     * @type {number}
     * @memberof MetricDefinition
     */
    maxValue: number;
    /**
     * Whether higher values are better
     * @type {boolean}
     * @memberof MetricDefinition
     */
    isHigherBetter?: boolean;
}

/**
 * Check if a given object implements the MetricDefinition interface.
 */
export function instanceOfMetricDefinition(value: object): value is MetricDefinition {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('unit' in value) || value['unit'] === undefined) return false;
    if (!('minValue' in value) || value['minValue'] === undefined) return false;
    if (!('maxValue' in value) || value['maxValue'] === undefined) return false;
    return true;
}

export function MetricDefinitionFromJSON(json: any): MetricDefinition {
    return MetricDefinitionFromJSONTyped(json, false);
}

export function MetricDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetricDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'category': json['category'],
        'description': json['description'],
        'unit': json['unit'],
        'minValue': json['min_value'],
        'maxValue': json['max_value'],
        'isHigherBetter': json['is_higher_better'] == null ? undefined : json['is_higher_better'],
    };
}

export function MetricDefinitionToJSON(json: any): MetricDefinition {
    return MetricDefinitionToJSONTyped(json, false);
}

export function MetricDefinitionToJSONTyped(value?: MetricDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'category': value['category'],
        'description': value['description'],
        'unit': value['unit'],
        'min_value': value['minValue'],
        'max_value': value['maxValue'],
        'is_higher_better': value['isHigherBetter'],
    };
}

