/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Reinvestment event response model.
 * @export
 * @interface ReinvestmentEventResponse
 */
export interface ReinvestmentEventResponse {
    /**
     * Unique identifier for the reinvestment event
     * @type {string}
     * @memberof ReinvestmentEventResponse
     */
    eventId: string;
    /**
     * Timestamp of the reinvestment event
     * @type {number}
     * @memberof ReinvestmentEventResponse
     */
    timestamp: number;
    /**
     * Simulation year of the reinvestment event
     * @type {number}
     * @memberof ReinvestmentEventResponse
     */
    year: number;
    /**
     * Month of the reinvestment event (1-12)
     * @type {number}
     * @memberof ReinvestmentEventResponse
     */
    month: number;
    /**
     * Amount reinvested
     * @type {number}
     * @memberof ReinvestmentEventResponse
     */
    amount: number;
    /**
     * Source of the reinvestment capital
     * @type {string}
     * @memberof ReinvestmentEventResponse
     */
    source: string;
    /**
     * Details about the source
     * @type {object}
     * @memberof ReinvestmentEventResponse
     */
    sourceDetails: object;
    /**
     * Reinvestment strategy used
     * @type {string}
     * @memberof ReinvestmentEventResponse
     */
    strategyUsed: string;
    /**
     * Target zone allocations
     * @type {{ [key: string]: number; }}
     * @memberof ReinvestmentEventResponse
     */
    targetAllocations: { [key: string]: number; };
    /**
     * Actual zone allocations
     * @type {{ [key: string]: number; }}
     * @memberof ReinvestmentEventResponse
     */
    actualAllocations: { [key: string]: number; };
    /**
     * Number of loans generated
     * @type {number}
     * @memberof ReinvestmentEventResponse
     */
    numLoansGenerated: number;
    /**
     * IDs of loans generated
     * @type {Array<string>}
     * @memberof ReinvestmentEventResponse
     */
    loanIds: Array<string>;
    /**
     * Performance adjustments
     * @type {{ [key: string]: number; }}
     * @memberof ReinvestmentEventResponse
     */
    performanceAdjustments?: { [key: string]: number; };
    /**
     * Cash reserve before reinvestment
     * @type {number}
     * @memberof ReinvestmentEventResponse
     */
    cashReserveBefore?: number;
    /**
     * Cash reserve after reinvestment
     * @type {number}
     * @memberof ReinvestmentEventResponse
     */
    cashReserveAfter?: number;
}

/**
 * Check if a given object implements the ReinvestmentEventResponse interface.
 */
export function instanceOfReinvestmentEventResponse(value: object): value is ReinvestmentEventResponse {
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('year' in value) || value['year'] === undefined) return false;
    if (!('month' in value) || value['month'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('sourceDetails' in value) || value['sourceDetails'] === undefined) return false;
    if (!('strategyUsed' in value) || value['strategyUsed'] === undefined) return false;
    if (!('targetAllocations' in value) || value['targetAllocations'] === undefined) return false;
    if (!('actualAllocations' in value) || value['actualAllocations'] === undefined) return false;
    if (!('numLoansGenerated' in value) || value['numLoansGenerated'] === undefined) return false;
    if (!('loanIds' in value) || value['loanIds'] === undefined) return false;
    return true;
}

export function ReinvestmentEventResponseFromJSON(json: any): ReinvestmentEventResponse {
    return ReinvestmentEventResponseFromJSONTyped(json, false);
}

export function ReinvestmentEventResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReinvestmentEventResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'eventId': json['event_id'],
        'timestamp': json['timestamp'],
        'year': json['year'],
        'month': json['month'],
        'amount': json['amount'],
        'source': json['source'],
        'sourceDetails': json['source_details'],
        'strategyUsed': json['strategy_used'],
        'targetAllocations': json['target_allocations'],
        'actualAllocations': json['actual_allocations'],
        'numLoansGenerated': json['num_loans_generated'],
        'loanIds': json['loan_ids'],
        'performanceAdjustments': json['performance_adjustments'] == null ? undefined : json['performance_adjustments'],
        'cashReserveBefore': json['cash_reserve_before'] == null ? undefined : json['cash_reserve_before'],
        'cashReserveAfter': json['cash_reserve_after'] == null ? undefined : json['cash_reserve_after'],
    };
}

export function ReinvestmentEventResponseToJSON(json: any): ReinvestmentEventResponse {
    return ReinvestmentEventResponseToJSONTyped(json, false);
}

export function ReinvestmentEventResponseToJSONTyped(value?: ReinvestmentEventResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'event_id': value['eventId'],
        'timestamp': value['timestamp'],
        'year': value['year'],
        'month': value['month'],
        'amount': value['amount'],
        'source': value['source'],
        'source_details': value['sourceDetails'],
        'strategy_used': value['strategyUsed'],
        'target_allocations': value['targetAllocations'],
        'actual_allocations': value['actualAllocations'],
        'num_loans_generated': value['numLoansGenerated'],
        'loan_ids': value['loanIds'],
        'performance_adjustments': value['performanceAdjustments'],
        'cash_reserve_before': value['cashReserveBefore'],
        'cash_reserve_after': value['cashReserveAfter'],
    };
}

