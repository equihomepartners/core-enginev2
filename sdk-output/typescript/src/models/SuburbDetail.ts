/* tslint:disable */
/* eslint-disable */
/**
 * EQU IHOME SIM ENGINE API
 * API for running home equity investment fund simulations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@equihome.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MetricValue } from './MetricValue';
import {
    MetricValueFromJSON,
    MetricValueFromJSONTyped,
    MetricValueToJSON,
    MetricValueToJSONTyped,
} from './MetricValue';

/**
 * Suburb detail model.
 * @export
 * @interface SuburbDetail
 */
export interface SuburbDetail {
    /**
     * Suburb ID
     * @type {string}
     * @memberof SuburbDetail
     */
    suburbId: string;
    /**
     * Suburb name
     * @type {string}
     * @memberof SuburbDetail
     */
    name: string;
    /**
     * State
     * @type {string}
     * @memberof SuburbDetail
     */
    state: string;
    /**
     * Postcode
     * @type {string}
     * @memberof SuburbDetail
     */
    postcode: string;
    /**
     * Latitude
     * @type {number}
     * @memberof SuburbDetail
     */
    latitude: number;
    /**
     * Longitude
     * @type {number}
     * @memberof SuburbDetail
     */
    longitude: number;
    /**
     * Zone category (green, orange, red)
     * @type {string}
     * @memberof SuburbDetail
     */
    zoneCategory: string;
    /**
     * Overall score (0-100)
     * @type {number}
     * @memberof SuburbDetail
     */
    overallScore: number;
    /**
     * Appreciation score (0-100)
     * @type {number}
     * @memberof SuburbDetail
     */
    appreciationScore: number;
    /**
     * Risk score (0-100)
     * @type {number}
     * @memberof SuburbDetail
     */
    riskScore: number;
    /**
     * Liquidity score (0-100)
     * @type {number}
     * @memberof SuburbDetail
     */
    liquidityScore: number;
    /**
     * Appreciation confidence (0-1)
     * @type {number}
     * @memberof SuburbDetail
     */
    appreciationConfidence: number;
    /**
     * Risk confidence (0-1)
     * @type {number}
     * @memberof SuburbDetail
     */
    riskConfidence: number;
    /**
     * Liquidity confidence (0-1)
     * @type {number}
     * @memberof SuburbDetail
     */
    liquidityConfidence: number;
    /**
     * Overall confidence (0-1)
     * @type {number}
     * @memberof SuburbDetail
     */
    overallConfidence: number;
    /**
     * Metrics
     * @type {{ [key: string]: MetricValue; }}
     * @memberof SuburbDetail
     */
    metrics: { [key: string]: MetricValue; };
    /**
     * Number of properties
     * @type {number}
     * @memberof SuburbDetail
     */
    propertyCount: number;
}

/**
 * Check if a given object implements the SuburbDetail interface.
 */
export function instanceOfSuburbDetail(value: object): value is SuburbDetail {
    if (!('suburbId' in value) || value['suburbId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('postcode' in value) || value['postcode'] === undefined) return false;
    if (!('latitude' in value) || value['latitude'] === undefined) return false;
    if (!('longitude' in value) || value['longitude'] === undefined) return false;
    if (!('zoneCategory' in value) || value['zoneCategory'] === undefined) return false;
    if (!('overallScore' in value) || value['overallScore'] === undefined) return false;
    if (!('appreciationScore' in value) || value['appreciationScore'] === undefined) return false;
    if (!('riskScore' in value) || value['riskScore'] === undefined) return false;
    if (!('liquidityScore' in value) || value['liquidityScore'] === undefined) return false;
    if (!('appreciationConfidence' in value) || value['appreciationConfidence'] === undefined) return false;
    if (!('riskConfidence' in value) || value['riskConfidence'] === undefined) return false;
    if (!('liquidityConfidence' in value) || value['liquidityConfidence'] === undefined) return false;
    if (!('overallConfidence' in value) || value['overallConfidence'] === undefined) return false;
    if (!('metrics' in value) || value['metrics'] === undefined) return false;
    if (!('propertyCount' in value) || value['propertyCount'] === undefined) return false;
    return true;
}

export function SuburbDetailFromJSON(json: any): SuburbDetail {
    return SuburbDetailFromJSONTyped(json, false);
}

export function SuburbDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuburbDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'suburbId': json['suburb_id'],
        'name': json['name'],
        'state': json['state'],
        'postcode': json['postcode'],
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'zoneCategory': json['zone_category'],
        'overallScore': json['overall_score'],
        'appreciationScore': json['appreciation_score'],
        'riskScore': json['risk_score'],
        'liquidityScore': json['liquidity_score'],
        'appreciationConfidence': json['appreciation_confidence'],
        'riskConfidence': json['risk_confidence'],
        'liquidityConfidence': json['liquidity_confidence'],
        'overallConfidence': json['overall_confidence'],
        'metrics': (mapValues(json['metrics'], MetricValueFromJSON)),
        'propertyCount': json['property_count'],
    };
}

export function SuburbDetailToJSON(json: any): SuburbDetail {
    return SuburbDetailToJSONTyped(json, false);
}

export function SuburbDetailToJSONTyped(value?: SuburbDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'suburb_id': value['suburbId'],
        'name': value['name'],
        'state': value['state'],
        'postcode': value['postcode'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'zone_category': value['zoneCategory'],
        'overall_score': value['overallScore'],
        'appreciation_score': value['appreciationScore'],
        'risk_score': value['riskScore'],
        'liquidity_score': value['liquidityScore'],
        'appreciation_confidence': value['appreciationConfidence'],
        'risk_confidence': value['riskConfidence'],
        'liquidity_confidence': value['liquidityConfidence'],
        'overall_confidence': value['overallConfidence'],
        'metrics': (mapValues(value['metrics'], MetricValueToJSON)),
        'property_count': value['propertyCount'],
    };
}

